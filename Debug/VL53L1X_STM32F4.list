
VL53L1X_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  0800f108  0800f108  0001f108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f68c  0800f68c  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800f68c  0800f68c  0001f68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f694  0800f694  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f694  0800f694  0001f694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f698  0800f698  0001f698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800f69c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d4  20000208  0800f8a4  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00001204  200007dc  0800f8a4  000207dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e608  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f22  00000000  00000000  0004e840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f0  00000000  00000000  00052768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001780  00000000  00000000  00054058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c08  00000000  00000000  000557d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fc87  00000000  00000000  0007e3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee3a2  00000000  00000000  0009e067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018c409  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008038  00000000  00000000  0018c45c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f0ec 	.word	0x0800f0ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800f0ec 	.word	0x0800f0ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <MX_GPIO_Init+0xd0>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a2c      	ldr	r2, [pc, #176]	; (80010bc <MX_GPIO_Init+0xd0>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b2a      	ldr	r3, [pc, #168]	; (80010bc <MX_GPIO_Init+0xd0>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b26      	ldr	r3, [pc, #152]	; (80010bc <MX_GPIO_Init+0xd0>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a25      	ldr	r2, [pc, #148]	; (80010bc <MX_GPIO_Init+0xd0>)
 8001028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b23      	ldr	r3, [pc, #140]	; (80010bc <MX_GPIO_Init+0xd0>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <MX_GPIO_Init+0xd0>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a1e      	ldr	r2, [pc, #120]	; (80010bc <MX_GPIO_Init+0xd0>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <MX_GPIO_Init+0xd0>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <MX_GPIO_Init+0xd0>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a17      	ldr	r2, [pc, #92]	; (80010bc <MX_GPIO_Init+0xd0>)
 8001060:	f043 0308 	orr.w	r3, r3, #8
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <MX_GPIO_Init+0xd0>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0308 	and.w	r3, r3, #8
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <MX_GPIO_Init+0xd0>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a10      	ldr	r2, [pc, #64]	; (80010bc <MX_GPIO_Init+0xd0>)
 800107c:	f043 0302 	orr.w	r3, r3, #2
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <MX_GPIO_Init+0xd0>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2102      	movs	r1, #2
 8001092:	480b      	ldr	r0, [pc, #44]	; (80010c0 <MX_GPIO_Init+0xd4>)
 8001094:	f006 fdce 	bl	8007c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001098:	2302      	movs	r3, #2
 800109a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4619      	mov	r1, r3
 80010ae:	4804      	ldr	r0, [pc, #16]	; (80010c0 <MX_GPIO_Init+0xd4>)
 80010b0:	f006 fc24 	bl	80078fc <HAL_GPIO_Init>

}
 80010b4:	bf00      	nop
 80010b6:	3728      	adds	r7, #40	; 0x28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020000 	.word	0x40020000

080010c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <MX_I2C1_Init+0x50>)
 80010ca:	4a13      	ldr	r2, [pc, #76]	; (8001118 <MX_I2C1_Init+0x54>)
 80010cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_I2C1_Init+0x50>)
 80010d0:	4a12      	ldr	r2, [pc, #72]	; (800111c <MX_I2C1_Init+0x58>)
 80010d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_I2C1_Init+0x50>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_I2C1_Init+0x50>)
 80010dc:	2200      	movs	r2, #0
 80010de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <MX_I2C1_Init+0x50>)
 80010e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e8:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <MX_I2C1_Init+0x50>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_I2C1_Init+0x50>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <MX_I2C1_Init+0x50>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_I2C1_Init+0x50>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001100:	4804      	ldr	r0, [pc, #16]	; (8001114 <MX_I2C1_Init+0x50>)
 8001102:	f006 fdb1 	bl	8007c68 <HAL_I2C_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800110c:	f000 f9fc 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000250 	.word	0x20000250
 8001118:	40005400 	.word	0x40005400
 800111c:	000186a0 	.word	0x000186a0

08001120 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a19      	ldr	r2, [pc, #100]	; (80011a4 <HAL_I2C_MspInit+0x84>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d12b      	bne.n	800119a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <HAL_I2C_MspInit+0x88>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a17      	ldr	r2, [pc, #92]	; (80011a8 <HAL_I2C_MspInit+0x88>)
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <HAL_I2C_MspInit+0x88>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800115e:	23c0      	movs	r3, #192	; 0xc0
 8001160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001162:	2312      	movs	r3, #18
 8001164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001166:	2301      	movs	r3, #1
 8001168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800116e:	2304      	movs	r3, #4
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	480c      	ldr	r0, [pc, #48]	; (80011ac <HAL_I2C_MspInit+0x8c>)
 800117a:	f006 fbbf 	bl	80078fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_I2C_MspInit+0x88>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <HAL_I2C_MspInit+0x88>)
 8001188:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800118c:	6413      	str	r3, [r2, #64]	; 0x40
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_I2C_MspInit+0x88>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800119a:	bf00      	nop
 800119c:	3728      	adds	r7, #40	; 0x28
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40005400 	.word	0x40005400
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020400 	.word	0x40020400

080011b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
	static VL53L1_RangingMeasurementData_t RangingData;
	VL53L1_UserRoi_t roiConfig;

	uint8_t byteData;
	uint8_t status;
	int16_t distance=0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	81fb      	strh	r3, [r7, #14]
	uint16_t print_count = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	81bb      	strh	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011be:	f006 f963 	bl	8007488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c2:	f000 f937 	bl	8001434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c6:	f7ff ff11 	bl	8000fec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80011ca:	f000 fc53 	bl	8001a74 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 80011ce:	f000 fb2b 	bl	8001828 <MX_TIM7_Init>
  MX_TIM6_Init();
 80011d2:	f000 faf3 	bl	80017bc <MX_TIM6_Init>
  MX_USART3_UART_Init();
 80011d6:	f000 fc77 	bl	8001ac8 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80011da:	f7ff ff73 	bl	80010c4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80011de:	4888      	ldr	r0, [pc, #544]	; (8001400 <main+0x250>)
 80011e0:	f008 f9c6 	bl	8009570 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80011e4:	4887      	ldr	r0, [pc, #540]	; (8001404 <main+0x254>)
 80011e6:	f008 f9c3 	bl	8009570 <HAL_TIM_Base_Start_IT>

	printf("VL53L1X Examples...\n");
 80011ea:	4887      	ldr	r0, [pc, #540]	; (8001408 <main+0x258>)
 80011ec:	f00a f9d8 	bl	800b5a0 <puts>
	Dev->I2cHandle = &hi2c1;
 80011f0:	4b86      	ldr	r3, [pc, #536]	; (800140c <main+0x25c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a86      	ldr	r2, [pc, #536]	; (8001410 <main+0x260>)
 80011f6:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	Dev->I2cDevAddr = 0x52;
 80011fa:	4b84      	ldr	r3, [pc, #528]	; (800140c <main+0x25c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2252      	movs	r2, #82	; 0x52
 8001200:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
	Dev->comms_type = 1;
 8001204:	4b81      	ldr	r3, [pc, #516]	; (800140c <main+0x25c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2201      	movs	r2, #1
 800120a:	f883 2399 	strb.w	r2, [r3, #921]	; 0x399
	Dev->comms_speed_khz = 400;
 800120e:	4b7f      	ldr	r3, [pc, #508]	; (800140c <main+0x25c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001216:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a

	status = VL53L1_RdByte(Dev, 0x010F, &byteData);
 800121a:	4b7c      	ldr	r3, [pc, #496]	; (800140c <main+0x25c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	1cfa      	adds	r2, r7, #3
 8001220:	f240 110f 	movw	r1, #271	; 0x10f
 8001224:	4618      	mov	r0, r3
 8001226:	f006 f86d 	bl	8007304 <VL53L1_RdByte>
 800122a:	4603      	mov	r3, r0
 800122c:	72fb      	strb	r3, [r7, #11]
	printf("VL53L1X Model_ID: %x\r\n", byteData);
 800122e:	78fb      	ldrb	r3, [r7, #3]
 8001230:	4619      	mov	r1, r3
 8001232:	4878      	ldr	r0, [pc, #480]	; (8001414 <main+0x264>)
 8001234:	f00a f92e 	bl	800b494 <iprintf>
	HAL_Delay(500);
 8001238:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800123c:	f006 f996 	bl	800756c <HAL_Delay>
	status = VL53L1_RdByte(Dev, 0x0110, &byteData);
 8001240:	4b72      	ldr	r3, [pc, #456]	; (800140c <main+0x25c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	1cfa      	adds	r2, r7, #3
 8001246:	f44f 7188 	mov.w	r1, #272	; 0x110
 800124a:	4618      	mov	r0, r3
 800124c:	f006 f85a 	bl	8007304 <VL53L1_RdByte>
 8001250:	4603      	mov	r3, r0
 8001252:	72fb      	strb	r3, [r7, #11]
	printf("VL53L1X Module_Type: %x\r\n", byteData);
 8001254:	78fb      	ldrb	r3, [r7, #3]
 8001256:	4619      	mov	r1, r3
 8001258:	486f      	ldr	r0, [pc, #444]	; (8001418 <main+0x268>)
 800125a:	f00a f91b 	bl	800b494 <iprintf>
	HAL_Delay(500);
 800125e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001262:	f006 f983 	bl	800756c <HAL_Delay>


	printf("Autonomous Ranging Test\n");
 8001266:	486d      	ldr	r0, [pc, #436]	; (800141c <main+0x26c>)
 8001268:	f00a f99a 	bl	800b5a0 <puts>
	HAL_Delay(500);
 800126c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001270:	f006 f97c 	bl	800756c <HAL_Delay>
	status = VL53L1_WaitDeviceBooted(Dev);
 8001274:	4b65      	ldr	r3, [pc, #404]	; (800140c <main+0x25c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f000 fdc0 	bl	8001dfe <VL53L1_WaitDeviceBooted>
 800127e:	4603      	mov	r3, r0
 8001280:	72fb      	strb	r3, [r7, #11]
	status = VL53L1_DataInit(Dev);
 8001282:	4b62      	ldr	r3, [pc, #392]	; (800140c <main+0x25c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f000 fd3d 	bl	8001d06 <VL53L1_DataInit>
 800128c:	4603      	mov	r3, r0
 800128e:	72fb      	strb	r3, [r7, #11]
	status = VL53L1_StaticInit(Dev);
 8001290:	4b5e      	ldr	r3, [pc, #376]	; (800140c <main+0x25c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f000 fd8b 	bl	8001db0 <VL53L1_StaticInit>
 800129a:	4603      	mov	r3, r0
 800129c:	72fb      	strb	r3, [r7, #11]
	roiConfig.TopLeftX = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	713b      	strb	r3, [r7, #4]
	roiConfig.TopLeftY = 15;
 80012a2:	230f      	movs	r3, #15
 80012a4:	717b      	strb	r3, [r7, #5]
	roiConfig.BotRightX = 15;
 80012a6:	230f      	movs	r3, #15
 80012a8:	71bb      	strb	r3, [r7, #6]
	roiConfig.BotRightY = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	71fb      	strb	r3, [r7, #7]
	status = VL53L1_SetUserROI(Dev,&roiConfig);
 80012ae:	4b57      	ldr	r3, [pc, #348]	; (800140c <main+0x25c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	1d3a      	adds	r2, r7, #4
 80012b4:	4611      	mov	r1, r2
 80012b6:	4618      	mov	r0, r3
 80012b8:	f001 f957 	bl	800256a <VL53L1_SetUserROI>
 80012bc:	4603      	mov	r3, r0
 80012be:	72fb      	strb	r3, [r7, #11]

	status = VL53L1_GetCalibrationData(Dev, &Calibration_Data);
 80012c0:	4b52      	ldr	r3, [pc, #328]	; (800140c <main+0x25c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4956      	ldr	r1, [pc, #344]	; (8001420 <main+0x270>)
 80012c6:	4618      	mov	r0, r3
 80012c8:	f001 fd1e 	bl	8002d08 <VL53L1_GetCalibrationData>
 80012cc:	4603      	mov	r3, r0
 80012ce:	72fb      	strb	r3, [r7, #11]
	Calibration_Data.customer.algo__crosstalk_compensation_plane_offset_kcps = 2000;
 80012d0:	4b53      	ldr	r3, [pc, #332]	; (8001420 <main+0x270>)
 80012d2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80012d6:	611a      	str	r2, [r3, #16]
	Calibration_Data.customer.algo__part_to_part_range_offset_mm = 156;
 80012d8:	4b51      	ldr	r3, [pc, #324]	; (8001420 <main+0x270>)
 80012da:	229c      	movs	r2, #156	; 0x9c
 80012dc:	835a      	strh	r2, [r3, #26]
	Calibration_Data.customer.global_config__spad_enables_ref_0 = 255;
 80012de:	4b50      	ldr	r3, [pc, #320]	; (8001420 <main+0x270>)
 80012e0:	22ff      	movs	r2, #255	; 0xff
 80012e2:	711a      	strb	r2, [r3, #4]
	Calibration_Data.customer.global_config__spad_enables_ref_1 = 255;
 80012e4:	4b4e      	ldr	r3, [pc, #312]	; (8001420 <main+0x270>)
 80012e6:	22ff      	movs	r2, #255	; 0xff
 80012e8:	715a      	strb	r2, [r3, #5]
	Calibration_Data.customer.global_config__spad_enables_ref_2 = 255;
 80012ea:	4b4d      	ldr	r3, [pc, #308]	; (8001420 <main+0x270>)
 80012ec:	22ff      	movs	r2, #255	; 0xff
 80012ee:	719a      	strb	r2, [r3, #6]
	Calibration_Data.customer.global_config__spad_enables_ref_3 = 255;
 80012f0:	4b4b      	ldr	r3, [pc, #300]	; (8001420 <main+0x270>)
 80012f2:	22ff      	movs	r2, #255	; 0xff
 80012f4:	71da      	strb	r2, [r3, #7]
	Calibration_Data.customer.global_config__spad_enables_ref_4 = 255;
 80012f6:	4b4a      	ldr	r3, [pc, #296]	; (8001420 <main+0x270>)
 80012f8:	22ff      	movs	r2, #255	; 0xff
 80012fa:	721a      	strb	r2, [r3, #8]
	Calibration_Data.customer.global_config__spad_enables_ref_5 = 255;
 80012fc:	4b48      	ldr	r3, [pc, #288]	; (8001420 <main+0x270>)
 80012fe:	22ff      	movs	r2, #255	; 0xff
 8001300:	725a      	strb	r2, [r3, #9]
	Calibration_Data.customer.ref_spad_man__num_requested_ref_spads = 8;
 8001302:	4b47      	ldr	r3, [pc, #284]	; (8001420 <main+0x270>)
 8001304:	2208      	movs	r2, #8
 8001306:	72da      	strb	r2, [r3, #11]
	Calibration_Data.customer.ref_spad_man__ref_location = 1;
 8001308:	4b45      	ldr	r3, [pc, #276]	; (8001420 <main+0x270>)
 800130a:	2201      	movs	r2, #1
 800130c:	731a      	strb	r2, [r3, #12]
	status = VL53L1_SetCalibrationData(Dev, &Calibration_Data);
 800130e:	4b3f      	ldr	r3, [pc, #252]	; (800140c <main+0x25c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4943      	ldr	r1, [pc, #268]	; (8001420 <main+0x270>)
 8001314:	4618      	mov	r0, r3
 8001316:	f001 fc83 	bl	8002c20 <VL53L1_SetCalibrationData>
 800131a:	4603      	mov	r3, r0
 800131c:	72fb      	strb	r3, [r7, #11]



	status = VL53L1_SetDistanceMode(Dev, VL53L1_DISTANCEMODE_LONG);
 800131e:	4b3b      	ldr	r3, [pc, #236]	; (800140c <main+0x25c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2103      	movs	r1, #3
 8001324:	4618      	mov	r0, r3
 8001326:	f000 fe96 	bl	8002056 <VL53L1_SetDistanceMode>
 800132a:	4603      	mov	r3, r0
 800132c:	72fb      	strb	r3, [r7, #11]
	status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(Dev, 50000);
 800132e:	4b37      	ldr	r3, [pc, #220]	; (800140c <main+0x25c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001336:	4618      	mov	r0, r3
 8001338:	f000 ff14 	bl	8002164 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800133c:	4603      	mov	r3, r0
 800133e:	72fb      	strb	r3, [r7, #11]
	status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev, 10);
 8001340:	4b32      	ldr	r3, [pc, #200]	; (800140c <main+0x25c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	210a      	movs	r1, #10
 8001346:	4618      	mov	r0, r3
 8001348:	f000 ffe2 	bl	8002310 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 800134c:	4603      	mov	r3, r0
 800134e:	72fb      	strb	r3, [r7, #11]
	status = VL53L1_StartMeasurement(Dev);
 8001350:	4b2e      	ldr	r3, [pc, #184]	; (800140c <main+0x25c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f001 f973 	bl	8002640 <VL53L1_StartMeasurement>
 800135a:	4603      	mov	r3, r0
 800135c:	72fb      	strb	r3, [r7, #11]


	if(status){
 800135e:	7afb      	ldrb	r3, [r7, #11]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <main+0x1bc>
		printf("VL53L1_StartMeasurement failed \n");
 8001364:	482f      	ldr	r0, [pc, #188]	; (8001424 <main+0x274>)
 8001366:	f00a f91b 	bl	800b5a0 <puts>
		while(1);
 800136a:	e7fe      	b.n	800136a <main+0x1ba>
	}
	do // polling mode
		{
		  status = VL53L1_WaitMeasurementDataReady(Dev);
 800136c:	4b27      	ldr	r3, [pc, #156]	; (800140c <main+0x25c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f001 fa5e 	bl	8002832 <VL53L1_WaitMeasurementDataReady>
 8001376:	4603      	mov	r3, r0
 8001378:	72fb      	strb	r3, [r7, #11]
			if(!status)
 800137a:	7afb      	ldrb	r3, [r7, #11]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f5      	bne.n	800136c <main+0x1bc>
			{
				status = VL53L1_GetRangingMeasurementData(Dev, &RangingData);
 8001380:	4b22      	ldr	r3, [pc, #136]	; (800140c <main+0x25c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4928      	ldr	r1, [pc, #160]	; (8001428 <main+0x278>)
 8001386:	4618      	mov	r0, r3
 8001388:	f001 fc0e 	bl	8002ba8 <VL53L1_GetRangingMeasurementData>
 800138c:	4603      	mov	r3, r0
 800138e:	72fb      	strb	r3, [r7, #11]
				if(status==0){
 8001390:	7afb      	ldrb	r3, [r7, #11]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d12c      	bne.n	80013f0 <main+0x240>
					SerialPlotFramePlotWord(RangingData.RangeMilliMeter,RangingData.RangeMilliMeter);
 8001396:	4b24      	ldr	r3, [pc, #144]	; (8001428 <main+0x278>)
 8001398:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800139c:	4a22      	ldr	r2, [pc, #136]	; (8001428 <main+0x278>)
 800139e:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 f8b5 	bl	8001514 <SerialPlotFramePlotWord>
					distance = distance * 0.8f + RangingData.RangeMilliMeter * 0.2f;
 80013aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013ae:	ee07 3a90 	vmov	s15, r3
 80013b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800142c <main+0x27c>
 80013ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013be:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <main+0x278>)
 80013c0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80013c4:	ee07 3a90 	vmov	s15, r3
 80013c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013cc:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001430 <main+0x280>
 80013d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013dc:	ee17 3a90 	vmov	r3, s15
 80013e0:	81fb      	strh	r3, [r7, #14]
					if(print_count++ >= 10)
 80013e2:	89bb      	ldrh	r3, [r7, #12]
 80013e4:	1c5a      	adds	r2, r3, #1
 80013e6:	81ba      	strh	r2, [r7, #12]
 80013e8:	2b09      	cmp	r3, #9
 80013ea:	d901      	bls.n	80013f0 <main+0x240>
					{
						print_count = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	81bb      	strh	r3, [r7, #12]
//						SerialPlotFramePlotWord(distance,distance);
					}

//					printf("%d\r\n", RangingData.RangeMilliMeter);
				}
				status = VL53L1_ClearInterruptAndStartMeasurement(Dev);
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <main+0x25c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f001 f9f4 	bl	80027e2 <VL53L1_ClearInterruptAndStartMeasurement>
 80013fa:	4603      	mov	r3, r0
 80013fc:	72fb      	strb	r3, [r7, #11]
		  status = VL53L1_WaitMeasurementDataReady(Dev);
 80013fe:	e7b5      	b.n	800136c <main+0x1bc>
 8001400:	200006b0 	.word	0x200006b0
 8001404:	200006f8 	.word	0x200006f8
 8001408:	0800f108 	.word	0x0800f108
 800140c:	20000000 	.word	0x20000000
 8001410:	20000250 	.word	0x20000250
 8001414:	0800f11c 	.word	0x0800f11c
 8001418:	0800f134 	.word	0x0800f134
 800141c:	0800f150 	.word	0x0800f150
 8001420:	20000648 	.word	0x20000648
 8001424:	0800f168 	.word	0x0800f168
 8001428:	20000224 	.word	0x20000224
 800142c:	3f4ccccd 	.word	0x3f4ccccd
 8001430:	3e4ccccd 	.word	0x3e4ccccd

08001434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b094      	sub	sp, #80	; 0x50
 8001438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143a:	f107 0320 	add.w	r3, r7, #32
 800143e:	2230      	movs	r2, #48	; 0x30
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f009 f9a4 	bl	800a790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001458:	2300      	movs	r3, #0
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	4b28      	ldr	r3, [pc, #160]	; (8001500 <SystemClock_Config+0xcc>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	4a27      	ldr	r2, [pc, #156]	; (8001500 <SystemClock_Config+0xcc>)
 8001462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001466:	6413      	str	r3, [r2, #64]	; 0x40
 8001468:	4b25      	ldr	r3, [pc, #148]	; (8001500 <SystemClock_Config+0xcc>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001474:	2300      	movs	r3, #0
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	4b22      	ldr	r3, [pc, #136]	; (8001504 <SystemClock_Config+0xd0>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a21      	ldr	r2, [pc, #132]	; (8001504 <SystemClock_Config+0xd0>)
 800147e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <SystemClock_Config+0xd0>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001490:	2301      	movs	r3, #1
 8001492:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001494:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800149a:	2302      	movs	r3, #2
 800149c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800149e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014a4:	2304      	movs	r3, #4
 80014a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014a8:	23a8      	movs	r3, #168	; 0xa8
 80014aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014ac:	2302      	movs	r3, #2
 80014ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014b0:	2307      	movs	r3, #7
 80014b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b4:	f107 0320 	add.w	r3, r7, #32
 80014b8:	4618      	mov	r0, r3
 80014ba:	f007 fb95 	bl	8008be8 <HAL_RCC_OscConfig>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014c4:	f000 f820 	bl	8001508 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c8:	230f      	movs	r3, #15
 80014ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014cc:	2302      	movs	r3, #2
 80014ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	2105      	movs	r1, #5
 80014e6:	4618      	mov	r0, r3
 80014e8:	f007 fdf6 	bl	80090d8 <HAL_RCC_ClockConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014f2:	f000 f809 	bl	8001508 <Error_Handler>
  }
}
 80014f6:	bf00      	nop
 80014f8:	3750      	adds	r7, #80	; 0x50
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800
 8001504:	40007000 	.word	0x40007000

08001508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800150c:	b672      	cpsid	i
}
 800150e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001510:	e7fe      	b.n	8001510 <Error_Handler+0x8>
	...

08001514 <SerialPlotFramePlotWord>:
	.frameHeader1 = 0xAA,
	.frameHeader2 = 0xBB,
};

void SerialPlotFramePlotWord(int16_t fdata,int16_t fdata2)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	460a      	mov	r2, r1
 800151e:	80fb      	strh	r3, [r7, #6]
 8001520:	4613      	mov	r3, r2
 8001522:	80bb      	strh	r3, [r7, #4]
	frame.fdata[0] = fdata;
 8001524:	4a08      	ldr	r2, [pc, #32]	; (8001548 <SerialPlotFramePlotWord+0x34>)
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	8053      	strh	r3, [r2, #2]
	frame.fdata[1] = fdata2;
 800152a:	4a07      	ldr	r2, [pc, #28]	; (8001548 <SerialPlotFramePlotWord+0x34>)
 800152c:	88bb      	ldrh	r3, [r7, #4]
 800152e:	8093      	strh	r3, [r2, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&frame, sizeof(SerialPlotFrame), 0xFFFF);
 8001530:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001534:	2206      	movs	r2, #6
 8001536:	4904      	ldr	r1, [pc, #16]	; (8001548 <SerialPlotFramePlotWord+0x34>)
 8001538:	4804      	ldr	r0, [pc, #16]	; (800154c <SerialPlotFramePlotWord+0x38>)
 800153a:	f008 fb36 	bl	8009baa <HAL_UART_Transmit>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000004 	.word	0x20000004
 800154c:	20000784 	.word	0x20000784

08001550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <HAL_MspInit+0x4c>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	4a0f      	ldr	r2, [pc, #60]	; (800159c <HAL_MspInit+0x4c>)
 8001560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001564:	6453      	str	r3, [r2, #68]	; 0x44
 8001566:	4b0d      	ldr	r3, [pc, #52]	; (800159c <HAL_MspInit+0x4c>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	603b      	str	r3, [r7, #0]
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_MspInit+0x4c>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	4a08      	ldr	r2, [pc, #32]	; (800159c <HAL_MspInit+0x4c>)
 800157c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001580:	6413      	str	r3, [r2, #64]	; 0x40
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_MspInit+0x4c>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800

080015a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <NMI_Handler+0x4>

080015a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015aa:	e7fe      	b.n	80015aa <HardFault_Handler+0x4>

080015ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <MemManage_Handler+0x4>

080015b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <BusFault_Handler+0x4>

080015b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <UsageFault_Handler+0x4>

080015be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ec:	f005 ff9e 	bl	800752c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015f8:	4802      	ldr	r0, [pc, #8]	; (8001604 <USART1_IRQHandler+0x10>)
 80015fa:	f008 fb69 	bl	8009cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000784 	.word	0x20000784

08001608 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800160c:	4802      	ldr	r0, [pc, #8]	; (8001618 <USART3_IRQHandler+0x10>)
 800160e:	f008 fb5f 	bl	8009cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000740 	.word	0x20000740

0800161c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <TIM6_DAC_IRQHandler+0x10>)
 8001622:	f008 f815 	bl	8009650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200006b0 	.word	0x200006b0

08001630 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <TIM7_IRQHandler+0x10>)
 8001636:	f008 f80b 	bl	8009650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200006f8 	.word	0x200006f8

08001644 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
	return 1;
 8001648:	2301      	movs	r3, #1
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <_kill>:

int _kill(int pid, int sig)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800165e:	f009 f85f 	bl	800a720 <__errno>
 8001662:	4603      	mov	r3, r0
 8001664:	2216      	movs	r2, #22
 8001666:	601a      	str	r2, [r3, #0]
	return -1;
 8001668:	f04f 33ff 	mov.w	r3, #4294967295
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <_exit>:

void _exit (int status)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800167c:	f04f 31ff 	mov.w	r1, #4294967295
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ffe7 	bl	8001654 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001686:	e7fe      	b.n	8001686 <_exit+0x12>

08001688 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	e00a      	b.n	80016b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800169a:	f3af 8000 	nop.w
 800169e:	4601      	mov	r1, r0
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	60ba      	str	r2, [r7, #8]
 80016a6:	b2ca      	uxtb	r2, r1
 80016a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	3301      	adds	r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	dbf0      	blt.n	800169a <_read+0x12>
	}

return len;
 80016b8:	687b      	ldr	r3, [r7, #4]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
	return -1;
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ea:	605a      	str	r2, [r3, #4]
	return 0;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <_isatty>:

int _isatty(int file)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
	return 1;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
	return 0;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001734:	4a14      	ldr	r2, [pc, #80]	; (8001788 <_sbrk+0x5c>)
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <_sbrk+0x60>)
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d102      	bne.n	800174e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <_sbrk+0x64>)
 800174a:	4a12      	ldr	r2, [pc, #72]	; (8001794 <_sbrk+0x68>)
 800174c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <_sbrk+0x64>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	429a      	cmp	r2, r3
 800175a:	d207      	bcs.n	800176c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800175c:	f008 ffe0 	bl	800a720 <__errno>
 8001760:	4603      	mov	r3, r0
 8001762:	220c      	movs	r2, #12
 8001764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
 800176a:	e009      	b.n	8001780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001772:	4b07      	ldr	r3, [pc, #28]	; (8001790 <_sbrk+0x64>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	4a05      	ldr	r2, [pc, #20]	; (8001790 <_sbrk+0x64>)
 800177c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800177e:	68fb      	ldr	r3, [r7, #12]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20020000 	.word	0x20020000
 800178c:	00001000 	.word	0x00001000
 8001790:	20000240 	.word	0x20000240
 8001794:	200007e0 	.word	0x200007e0

08001798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <SystemInit+0x20>)
 800179e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017a2:	4a05      	ldr	r2, [pc, #20]	; (80017b8 <SystemInit+0x20>)
 80017a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c2:	463b      	mov	r3, r7
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <MX_TIM6_Init+0x64>)
 80017cc:	4a15      	ldr	r2, [pc, #84]	; (8001824 <MX_TIM6_Init+0x68>)
 80017ce:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 80017d0:	4b13      	ldr	r3, [pc, #76]	; (8001820 <MX_TIM6_Init+0x64>)
 80017d2:	2253      	movs	r2, #83	; 0x53
 80017d4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d6:	4b12      	ldr	r3, [pc, #72]	; (8001820 <MX_TIM6_Init+0x64>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50000;
 80017dc:	4b10      	ldr	r3, [pc, #64]	; (8001820 <MX_TIM6_Init+0x64>)
 80017de:	f24c 3250 	movw	r2, #50000	; 0xc350
 80017e2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e4:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <MX_TIM6_Init+0x64>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017ea:	480d      	ldr	r0, [pc, #52]	; (8001820 <MX_TIM6_Init+0x64>)
 80017ec:	f007 fe70 	bl	80094d0 <HAL_TIM_Base_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80017f6:	f7ff fe87 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fa:	2300      	movs	r3, #0
 80017fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001802:	463b      	mov	r3, r7
 8001804:	4619      	mov	r1, r3
 8001806:	4806      	ldr	r0, [pc, #24]	; (8001820 <MX_TIM6_Init+0x64>)
 8001808:	f008 f8f2 	bl	80099f0 <HAL_TIMEx_MasterConfigSynchronization>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001812:	f7ff fe79 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200006b0 	.word	0x200006b0
 8001824:	40001000 	.word	0x40001000

08001828 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800182e:	463b      	mov	r3, r7
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <MX_TIM7_Init+0x64>)
 8001838:	4a15      	ldr	r2, [pc, #84]	; (8001890 <MX_TIM7_Init+0x68>)
 800183a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800183c:	4b13      	ldr	r3, [pc, #76]	; (800188c <MX_TIM7_Init+0x64>)
 800183e:	2253      	movs	r2, #83	; 0x53
 8001840:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <MX_TIM7_Init+0x64>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50000;
 8001848:	4b10      	ldr	r3, [pc, #64]	; (800188c <MX_TIM7_Init+0x64>)
 800184a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800184e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001850:	4b0e      	ldr	r3, [pc, #56]	; (800188c <MX_TIM7_Init+0x64>)
 8001852:	2200      	movs	r2, #0
 8001854:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001856:	480d      	ldr	r0, [pc, #52]	; (800188c <MX_TIM7_Init+0x64>)
 8001858:	f007 fe3a 	bl	80094d0 <HAL_TIM_Base_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001862:	f7ff fe51 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001866:	2300      	movs	r3, #0
 8001868:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800186e:	463b      	mov	r3, r7
 8001870:	4619      	mov	r1, r3
 8001872:	4806      	ldr	r0, [pc, #24]	; (800188c <MX_TIM7_Init+0x64>)
 8001874:	f008 f8bc 	bl	80099f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800187e:	f7ff fe43 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200006f8 	.word	0x200006f8
 8001890:	40001400 	.word	0x40001400

08001894 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a1c      	ldr	r2, [pc, #112]	; (8001914 <HAL_TIM_Base_MspInit+0x80>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d116      	bne.n	80018d4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <HAL_TIM_Base_MspInit+0x84>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	4a1a      	ldr	r2, [pc, #104]	; (8001918 <HAL_TIM_Base_MspInit+0x84>)
 80018b0:	f043 0310 	orr.w	r3, r3, #16
 80018b4:	6413      	str	r3, [r2, #64]	; 0x40
 80018b6:	4b18      	ldr	r3, [pc, #96]	; (8001918 <HAL_TIM_Base_MspInit+0x84>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	f003 0310 	and.w	r3, r3, #16
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2100      	movs	r1, #0
 80018c6:	2036      	movs	r0, #54	; 0x36
 80018c8:	f005 ff4f 	bl	800776a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018cc:	2036      	movs	r0, #54	; 0x36
 80018ce:	f005 ff68 	bl	80077a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80018d2:	e01a      	b.n	800190a <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM7)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a10      	ldr	r2, [pc, #64]	; (800191c <HAL_TIM_Base_MspInit+0x88>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d115      	bne.n	800190a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <HAL_TIM_Base_MspInit+0x84>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	4a0c      	ldr	r2, [pc, #48]	; (8001918 <HAL_TIM_Base_MspInit+0x84>)
 80018e8:	f043 0320 	orr.w	r3, r3, #32
 80018ec:	6413      	str	r3, [r2, #64]	; 0x40
 80018ee:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <HAL_TIM_Base_MspInit+0x84>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f003 0320 	and.w	r3, r3, #32
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2100      	movs	r1, #0
 80018fe:	2037      	movs	r0, #55	; 0x37
 8001900:	f005 ff33 	bl	800776a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001904:	2037      	movs	r0, #55	; 0x37
 8001906:	f005 ff4c 	bl	80077a2 <HAL_NVIC_EnableIRQ>
}
 800190a:	bf00      	nop
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40001000 	.word	0x40001000
 8001918:	40023800 	.word	0x40023800
 800191c:	40001400 	.word	0x40001400

08001920 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM6)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a18      	ldr	r2, [pc, #96]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d10e      	bne.n	8001950 <HAL_TIM_PeriodElapsedCallback+0x30>
    {
        if((htim->Instance->DIER & TIM_IT_UPDATE) == TIM_IT_UPDATE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b01      	cmp	r3, #1
 800193e:	d107      	bne.n	8001950 <HAL_TIM_PeriodElapsedCallback+0x30>
        {
            htim->Instance->SR &= ~TIM_IT_UPDATE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	691a      	ldr	r2, [r3, #16]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0201 	bic.w	r2, r2, #1
 800194e:	611a      	str	r2, [r3, #16]
        }
    }
    if(htim->Instance == TIM7)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a0f      	ldr	r2, [pc, #60]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d113      	bne.n	8001982 <HAL_TIM_PeriodElapsedCallback+0x62>
    {
        if((htim->Instance->DIER & TIM_IT_UPDATE) == TIM_IT_UPDATE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b01      	cmp	r3, #1
 8001966:	d10c      	bne.n	8001982 <HAL_TIM_PeriodElapsedCallback+0x62>
        {
            htim->Instance->SR &= ~TIM_IT_UPDATE;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	691a      	ldr	r2, [r3, #16]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0201 	bic.w	r2, r2, #1
 8001976:	611a      	str	r2, [r3, #16]
            glo_50ms++;
 8001978:	4b07      	ldr	r3, [pc, #28]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	3301      	adds	r3, #1
 800197e:	4a06      	ldr	r2, [pc, #24]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001980:	6013      	str	r3, [r2, #0]
        }
    }
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40001000 	.word	0x40001000
 8001994:	40001400 	.word	0x40001400
 8001998:	20000244 	.word	0x20000244

0800199c <GetMicro>:

uint64_t GetMicro(void)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
	uint16_t cnt;
	cnt=TIM7->CNT;
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <GetMicro+0x30>)
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	80fb      	strh	r3, [r7, #6]
	return glo_50ms*50000+cnt;
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <GetMicro+0x34>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f24c 3250 	movw	r2, #50000	; 0xc350
 80019b0:	fb02 f203 	mul.w	r2, r2, r3
 80019b4:	88fb      	ldrh	r3, [r7, #6]
 80019b6:	4413      	add	r3, r2
 80019b8:	461a      	mov	r2, r3
 80019ba:	f04f 0300 	mov.w	r3, #0
}
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	40001400 	.word	0x40001400
 80019d0:	20000244 	.word	0x20000244

080019d4 <GetMillis>:

uint32_t GetMillis(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
	uint16_t cnt;
	cnt=TIM7->CNT;
 80019da:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <GetMillis+0x30>)
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	80fb      	strh	r3, [r7, #6]
	return glo_50ms*50+cnt/1000;
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <GetMillis+0x34>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2232      	movs	r2, #50	; 0x32
 80019e6:	fb02 f303 	mul.w	r3, r2, r3
 80019ea:	88fa      	ldrh	r2, [r7, #6]
 80019ec:	4907      	ldr	r1, [pc, #28]	; (8001a0c <GetMillis+0x38>)
 80019ee:	fba1 1202 	umull	r1, r2, r1, r2
 80019f2:	0992      	lsrs	r2, r2, #6
 80019f4:	b292      	uxth	r2, r2
 80019f6:	4413      	add	r3, r2
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	40001400 	.word	0x40001400
 8001a08:	20000244 	.word	0x20000244
 8001a0c:	10624dd3 	.word	0x10624dd3

08001a10 <DelayMs>:

void DelayMs(uint32_t _ms)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	uint32_t _start_ms = GetMillis();
 8001a18:	f7ff ffdc 	bl	80019d4 <GetMillis>
 8001a1c:	60f8      	str	r0, [r7, #12]
	while(GetMillis() - _start_ms <= _ms);
 8001a1e:	bf00      	nop
 8001a20:	f7ff ffd8 	bl	80019d4 <GetMillis>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d2f7      	bcs.n	8001a20 <DelayMs+0x10>
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <DelayUs>:

void DelayUs(uint64_t _us)
{
 8001a3a:	b5b0      	push	{r4, r5, r7, lr}
 8001a3c:	b084      	sub	sp, #16
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	e9c7 0100 	strd	r0, r1, [r7]
	uint64_t _start_us = GetMicro();
 8001a44:	f7ff ffaa 	bl	800199c <GetMicro>
 8001a48:	e9c7 0102 	strd	r0, r1, [r7, #8]
	while(GetMicro() - _start_us <= _us);
 8001a4c:	bf00      	nop
 8001a4e:	f7ff ffa5 	bl	800199c <GetMicro>
 8001a52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a56:	1a84      	subs	r4, r0, r2
 8001a58:	eb61 0503 	sbc.w	r5, r1, r3
 8001a5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a60:	42ab      	cmp	r3, r5
 8001a62:	bf08      	it	eq
 8001a64:	42a2      	cmpeq	r2, r4
 8001a66:	d2f2      	bcs.n	8001a4e <DelayUs+0x14>

}
 8001a68:	bf00      	nop
 8001a6a:	bf00      	nop
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001a74 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <MX_USART1_UART_Init+0x4c>)
 8001a7a:	4a12      	ldr	r2, [pc, #72]	; (8001ac4 <MX_USART1_UART_Init+0x50>)
 8001a7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <MX_USART1_UART_Init+0x4c>)
 8001a80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <MX_USART1_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <MX_USART1_UART_Init+0x4c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a92:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <MX_USART1_UART_Init+0x4c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <MX_USART1_UART_Init+0x4c>)
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9e:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <MX_USART1_UART_Init+0x4c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <MX_USART1_UART_Init+0x4c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aaa:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <MX_USART1_UART_Init+0x4c>)
 8001aac:	f008 f830 	bl	8009b10 <HAL_UART_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ab6:	f7ff fd27 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000784 	.word	0x20000784
 8001ac4:	40011000 	.word	0x40011000

08001ac8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001acc:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <MX_USART3_UART_Init+0x4c>)
 8001ace:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <MX_USART3_UART_Init+0x50>)
 8001ad0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ad2:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <MX_USART3_UART_Init+0x4c>)
 8001ad4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ad8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <MX_USART3_UART_Init+0x4c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <MX_USART3_UART_Init+0x4c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <MX_USART3_UART_Init+0x4c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001aec:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <MX_USART3_UART_Init+0x4c>)
 8001aee:	220c      	movs	r2, #12
 8001af0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001af2:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <MX_USART3_UART_Init+0x4c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <MX_USART3_UART_Init+0x4c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001afe:	4805      	ldr	r0, [pc, #20]	; (8001b14 <MX_USART3_UART_Init+0x4c>)
 8001b00:	f008 f806 	bl	8009b10 <HAL_UART_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b0a:	f7ff fcfd 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000740 	.word	0x20000740
 8001b18:	40004800 	.word	0x40004800

08001b1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08c      	sub	sp, #48	; 0x30
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 031c 	add.w	r3, r7, #28
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a3b      	ldr	r2, [pc, #236]	; (8001c28 <HAL_UART_MspInit+0x10c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d135      	bne.n	8001baa <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61bb      	str	r3, [r7, #24]
 8001b42:	4b3a      	ldr	r3, [pc, #232]	; (8001c2c <HAL_UART_MspInit+0x110>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	4a39      	ldr	r2, [pc, #228]	; (8001c2c <HAL_UART_MspInit+0x110>)
 8001b48:	f043 0310 	orr.w	r3, r3, #16
 8001b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4e:	4b37      	ldr	r3, [pc, #220]	; (8001c2c <HAL_UART_MspInit+0x110>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	f003 0310 	and.w	r3, r3, #16
 8001b56:	61bb      	str	r3, [r7, #24]
 8001b58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	4b33      	ldr	r3, [pc, #204]	; (8001c2c <HAL_UART_MspInit+0x110>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a32      	ldr	r2, [pc, #200]	; (8001c2c <HAL_UART_MspInit+0x110>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b30      	ldr	r3, [pc, #192]	; (8001c2c <HAL_UART_MspInit+0x110>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b76:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b84:	2303      	movs	r3, #3
 8001b86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b88:	2307      	movs	r3, #7
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8c:	f107 031c 	add.w	r3, r7, #28
 8001b90:	4619      	mov	r1, r3
 8001b92:	4827      	ldr	r0, [pc, #156]	; (8001c30 <HAL_UART_MspInit+0x114>)
 8001b94:	f005 feb2 	bl	80078fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	2025      	movs	r0, #37	; 0x25
 8001b9e:	f005 fde4 	bl	800776a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ba2:	2025      	movs	r0, #37	; 0x25
 8001ba4:	f005 fdfd 	bl	80077a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ba8:	e039      	b.n	8001c1e <HAL_UART_MspInit+0x102>
  else if(uartHandle->Instance==USART3)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a21      	ldr	r2, [pc, #132]	; (8001c34 <HAL_UART_MspInit+0x118>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d134      	bne.n	8001c1e <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <HAL_UART_MspInit+0x110>)
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	4a1b      	ldr	r2, [pc, #108]	; (8001c2c <HAL_UART_MspInit+0x110>)
 8001bbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc2:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc4:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <HAL_UART_MspInit+0x110>)
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <HAL_UART_MspInit+0x110>)
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd8:	4a14      	ldr	r2, [pc, #80]	; (8001c2c <HAL_UART_MspInit+0x110>)
 8001bda:	f043 0308 	orr.w	r3, r3, #8
 8001bde:	6313      	str	r3, [r2, #48]	; 0x30
 8001be0:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_UART_MspInit+0x110>)
 8001be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bfe:	2307      	movs	r3, #7
 8001c00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c02:	f107 031c 	add.w	r3, r7, #28
 8001c06:	4619      	mov	r1, r3
 8001c08:	480b      	ldr	r0, [pc, #44]	; (8001c38 <HAL_UART_MspInit+0x11c>)
 8001c0a:	f005 fe77 	bl	80078fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2100      	movs	r1, #0
 8001c12:	2027      	movs	r0, #39	; 0x27
 8001c14:	f005 fda9 	bl	800776a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c18:	2027      	movs	r0, #39	; 0x27
 8001c1a:	f005 fdc2 	bl	80077a2 <HAL_NVIC_EnableIRQ>
}
 8001c1e:	bf00      	nop
 8001c20:	3730      	adds	r7, #48	; 0x30
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40011000 	.word	0x40011000
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40020000 	.word	0x40020000
 8001c34:	40004800 	.word	0x40004800
 8001c38:	40020c00 	.word	0x40020c00

08001c3c <_write>:
}

/* USER CODE BEGIN 1 */
/*重新定义__write函数*/
int _write(int fd, char *ptr, int len)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 0xFFFF);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c50:	68b9      	ldr	r1, [r7, #8]
 8001c52:	4804      	ldr	r0, [pc, #16]	; (8001c64 <_write+0x28>)
 8001c54:	f007 ffa9 	bl	8009baa <HAL_UART_Transmit>
    return len;
 8001c58:	687b      	ldr	r3, [r7, #4]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000784 	.word	0x20000784

08001c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ca0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c6c:	480d      	ldr	r0, [pc, #52]	; (8001ca4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c6e:	490e      	ldr	r1, [pc, #56]	; (8001ca8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c70:	4a0e      	ldr	r2, [pc, #56]	; (8001cac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c74:	e002      	b.n	8001c7c <LoopCopyDataInit>

08001c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c7a:	3304      	adds	r3, #4

08001c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c80:	d3f9      	bcc.n	8001c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c82:	4a0b      	ldr	r2, [pc, #44]	; (8001cb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c84:	4c0b      	ldr	r4, [pc, #44]	; (8001cb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c88:	e001      	b.n	8001c8e <LoopFillZerobss>

08001c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c8c:	3204      	adds	r2, #4

08001c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c90:	d3fb      	bcc.n	8001c8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c92:	f7ff fd81 	bl	8001798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c96:	f008 fd49 	bl	800a72c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c9a:	f7ff fa89 	bl	80011b0 <main>
  bx  lr    
 8001c9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ca0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca8:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8001cac:	0800f69c 	.word	0x0800f69c
  ldr r2, =_sbss
 8001cb0:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8001cb4:	200007dc 	.word	0x200007dc

08001cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cb8:	e7fe      	b.n	8001cb8 <ADC_IRQHandler>

08001cba <CheckValidRectRoi>:
 *   0------------------------- >15
 *   check Rectangle definition conforms to the (0,15,15) coordinate system
 *   with a minimum of 4x4 size
 */
static VL53L1_Error CheckValidRectRoi(VL53L1_UserRoi_t ROI)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b085      	sub	sp, #20
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Negative check are not necessary because value is unsigned */
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001cc6:	793b      	ldrb	r3, [r7, #4]
 8001cc8:	2b0f      	cmp	r3, #15
 8001cca:	d808      	bhi.n	8001cde <CheckValidRectRoi+0x24>
 8001ccc:	797b      	ldrb	r3, [r7, #5]
 8001cce:	2b0f      	cmp	r3, #15
 8001cd0:	d805      	bhi.n	8001cde <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001cd2:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001cd4:	2b0f      	cmp	r3, #15
 8001cd6:	d802      	bhi.n	8001cde <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	2b0f      	cmp	r3, #15
 8001cdc:	d901      	bls.n	8001ce2 <CheckValidRectRoi+0x28>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8001cde:	23fc      	movs	r3, #252	; 0xfc
 8001ce0:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 8001ce2:	793a      	ldrb	r2, [r7, #4]
 8001ce4:	79bb      	ldrb	r3, [r7, #6]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d803      	bhi.n	8001cf2 <CheckValidRectRoi+0x38>
 8001cea:	797a      	ldrb	r2, [r7, #5]
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d201      	bcs.n	8001cf6 <CheckValidRectRoi+0x3c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8001cf2:	23fc      	movs	r3, #252	; 0xfc
 8001cf4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8001cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b084      	sub	sp, #16
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 8001d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d105      	bne.n	8001d26 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f001 f878 	bl	8002e12 <VL53L1_data_init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 8001d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d107      	bne.n	8001d3e <VL53L1_DataInit+0x38>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2208      	movs	r2, #8
 8001d3a:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
				VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	}

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001d3e:	2300      	movs	r3, #0
 8001d40:	73bb      	strb	r3, [r7, #14]
 8001d42:	e012      	b.n	8001d6a <VL53L1_DataInit+0x64>
		if (Status == VL53L1_ERROR_NONE)
 8001d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d112      	bne.n	8001d72 <VL53L1_DataInit+0x6c>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8001d4c:	7bbb      	ldrb	r3, [r7, #14]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	2201      	movs	r2, #1
 8001d52:	4619      	mov	r1, r3
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 fb17 	bl	8002388 <VL53L1_SetLimitCheckEnable>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001d64:	7bbb      	ldrb	r3, [r7, #14]
 8001d66:	3301      	adds	r3, #1
 8001d68:	73bb      	strb	r3, [r7, #14]
 8001d6a:	7bbb      	ldrb	r3, [r7, #14]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d9e9      	bls.n	8001d44 <VL53L1_DataInit+0x3e>
 8001d70:	e000      	b.n	8001d74 <VL53L1_DataInit+0x6e>
		else
			break;
 8001d72:	bf00      	nop

	}

	/* Limit default values */
	if (Status == VL53L1_ERROR_NONE) {
 8001d74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d107      	bne.n	8001d8c <VL53L1_DataInit+0x86>
		Status = VL53L1_SetLimitCheckValue(Dev,
 8001d7c:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8001d80:	2100      	movs	r1, #0
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 fb61 	bl	800244a <VL53L1_SetLimitCheckValue>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	73fb      	strb	r3, [r7, #15]
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L1_ERROR_NONE) {
 8001d8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d107      	bne.n	8001da4 <VL53L1_DataInit+0x9e>
		Status = VL53L1_SetLimitCheckValue(Dev,
 8001d94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d98:	2101      	movs	r1, #1
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 fb55 	bl	800244a <VL53L1_SetLimitCheckValue>
 8001da0:	4603      	mov	r3, r0
 8001da2:	73fb      	strb	r3, [r7, #15]
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001dc4:	2320      	movs	r3, #32
 8001dc6:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	7bba      	ldrb	r2, [r7, #14]
 8001dcc:	709a      	strb	r2, [r3, #2]

	VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
			VL53L1_DISTANCEMODE_LONG);

	VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2203      	movs	r2, #3
 8001dda:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
			VL53L1_DISTANCEMODE_LONG);

	VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2203      	movs	r2, #3
 8001de2:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
			VL53L1_DISTANCEMODE_LONG);

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 8001de6:	2108      	movs	r1, #8
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f8ec 	bl	8001fc6 <VL53L1_SetPresetMode>
 8001dee:	4603      	mov	r3, r0
 8001df0:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */
	LOG_FUNCTION_END(Status);
	return Status;
 8001df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b084      	sub	sp, #16
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 8001e0a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f005 f9d9 	bl	80071c6 <VL53L1_poll_for_boot_completion>
 8001e14:	4603      	mov	r3, r0
 8001e16:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8001e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b087      	sub	sp, #28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	603a      	str	r2, [r7, #0]
 8001e2e:	71fb      	strb	r3, [r7, #7]
 8001e30:	460b      	mov	r3, r1
 8001e32:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8001e38:	4a2c      	ldr	r2, [pc, #176]	; (8001eec <ComputeDevicePresetMode+0xc8>)
 8001e3a:	f107 0310 	add.w	r3, r7, #16
 8001e3e:	6812      	ldr	r2, [r2, #0]
 8001e40:	4611      	mov	r1, r2
 8001e42:	8019      	strh	r1, [r3, #0]
 8001e44:	3302      	adds	r3, #2
 8001e46:	0c12      	lsrs	r2, r2, #16
 8001e48:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 8001e4a:	4a29      	ldr	r2, [pc, #164]	; (8001ef0 <ComputeDevicePresetMode+0xcc>)
 8001e4c:	f107 030c 	add.w	r3, r7, #12
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	4611      	mov	r1, r2
 8001e54:	8019      	strh	r1, [r3, #0]
 8001e56:	3302      	adds	r3, #2
 8001e58:	0c12      	lsrs	r2, r2, #16
 8001e5a:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8001e5c:	4a25      	ldr	r2, [pc, #148]	; (8001ef4 <ComputeDevicePresetMode+0xd0>)
 8001e5e:	f107 0308 	add.w	r3, r7, #8
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	4611      	mov	r1, r2
 8001e66:	8019      	strh	r1, [r3, #0]
 8001e68:	3302      	adds	r3, #2
 8001e6a:	0c12      	lsrs	r2, r2, #16
 8001e6c:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8001e74:	79bb      	ldrb	r3, [r7, #6]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d002      	beq.n	8001e80 <ComputeDevicePresetMode+0x5c>
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d003      	beq.n	8001e86 <ComputeDevicePresetMode+0x62>
 8001e7e:	e005      	b.n	8001e8c <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	75bb      	strb	r3, [r7, #22]
		break;
 8001e84:	e004      	b.n	8001e90 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8001e86:	2301      	movs	r3, #1
 8001e88:	75bb      	strb	r3, [r7, #22]
		break;
 8001e8a:	e001      	b.n	8001e90 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d017      	beq.n	8001ec6 <ComputeDevicePresetMode+0xa2>
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	dc1e      	bgt.n	8001ed8 <ComputeDevicePresetMode+0xb4>
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d00a      	beq.n	8001eb4 <ComputeDevicePresetMode+0x90>
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d11a      	bne.n	8001ed8 <ComputeDevicePresetMode+0xb4>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8001ea2:	7dbb      	ldrb	r3, [r7, #22]
 8001ea4:	f107 0218 	add.w	r2, r7, #24
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	701a      	strb	r2, [r3, #0]
		break;
 8001eb2:	e013      	b.n	8001edc <ComputeDevicePresetMode+0xb8>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8001eb4:	7dbb      	ldrb	r3, [r7, #22]
 8001eb6:	f107 0218 	add.w	r2, r7, #24
 8001eba:	4413      	add	r3, r2
 8001ebc:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	701a      	strb	r2, [r3, #0]
		break;
 8001ec4:	e00a      	b.n	8001edc <ComputeDevicePresetMode+0xb8>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8001ec6:	7dbb      	ldrb	r3, [r7, #22]
 8001ec8:	f107 0218 	add.w	r2, r7, #24
 8001ecc:	4413      	add	r3, r2
 8001ece:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	701a      	strb	r2, [r3, #0]
		break;
 8001ed6:	e001      	b.n	8001edc <ComputeDevicePresetMode+0xb8>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8001ed8:	23f8      	movs	r3, #248	; 0xf8
 8001eda:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 8001edc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	371c      	adds	r7, #28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	0800f1b4 	.word	0x0800f1b4
 8001ef0:	0800f1b8 	.word	0x0800f1b8
 8001ef4:	0800f1bc 	.word	0x0800f1bc

08001ef8 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8001ef8:	b5b0      	push	{r4, r5, r7, lr}
 8001efa:	b08e      	sub	sp, #56	; 0x38
 8001efc:	af04      	add	r7, sp, #16
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	460b      	mov	r3, r1
 8001f04:	72fb      	strb	r3, [r7, #11]
 8001f06:	4613      	mov	r3, r2
 8001f08:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t mm_config_timeout_us;
	uint32_t lld_range_config_timeout_us;

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8001f10:	7afb      	ldrb	r3, [r7, #11]
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d002      	beq.n	8001f1c <SetPresetMode+0x24>
 8001f16:	7afb      	ldrb	r3, [r7, #11]
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d103      	bne.n	8001f24 <SetPresetMode+0x2c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8001f1c:	2340      	movs	r3, #64	; 0x40
 8001f1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001f22:	e002      	b.n	8001f2a <SetPresetMode+0x32>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001f24:	2320      	movs	r3, #32
 8001f26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 8001f2a:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8001f2e:	7ab9      	ldrb	r1, [r7, #10]
 8001f30:	7afb      	ldrb	r3, [r7, #11]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff ff76 	bl	8001e24 <ComputeDevicePresetMode>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 8001f3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d112      	bne.n	8001f6c <SetPresetMode+0x74>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8001f46:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8001f4a:	f107 001c 	add.w	r0, r7, #28
 8001f4e:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	9301      	str	r3, [sp, #4]
 8001f58:	f107 0318 	add.w	r3, r7, #24
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	4603      	mov	r3, r0
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f001 fac1 	bl	80034e8 <VL53L1_get_preset_mode_timing_cfg>
 8001f66:	4603      	mov	r3, r0
 8001f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8001f6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d112      	bne.n	8001f9a <SetPresetMode+0xa2>
		Status = VL53L1_set_preset_mode(
 8001f74:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8001f78:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8001f7a:	69fd      	ldr	r5, [r7, #28]
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	9102      	str	r1, [sp, #8]
 8001f84:	9201      	str	r2, [sp, #4]
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	462b      	mov	r3, r5
 8001f8a:	4622      	mov	r2, r4
 8001f8c:	4601      	mov	r1, r0
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f001 fb54 	bl	800363c <VL53L1_set_preset_mode>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8001f9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d103      	bne.n	8001faa <SetPresetMode+0xb2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001fa8:	709a      	strb	r2, [r3, #2]

	if (Status == VL53L1_ERROR_NONE)
 8001faa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d103      	bne.n	8001fba <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	7afa      	ldrb	r2, [r7, #11]
 8001fb6:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 8001fba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3728      	adds	r7, #40	; 0x28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bdb0      	pop	{r4, r5, r7, pc}

08001fc6 <VL53L1_SetPresetMode>:

VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b084      	sub	sp, #16
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	460b      	mov	r3, r1
 8001fd0:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	Status = SetPresetMode(Dev,
 8001fda:	7bba      	ldrb	r2, [r7, #14]
 8001fdc:	78f9      	ldrb	r1, [r7, #3]
 8001fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff ff88 	bl	8001ef8 <SetPresetMode>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8001fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d11f      	bne.n	8002034 <VL53L1_SetPresetMode+0x6e>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	7bba      	ldrb	r2, [r7, #14]
 8001ff8:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
				DistanceMode);

		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	7bba      	ldrb	r2, [r7, #14]
 8002000:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
				DistanceMode);

		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8002004:	78fb      	ldrb	r3, [r7, #3]
 8002006:	2b04      	cmp	r3, #4
 8002008:	d005      	beq.n	8002016 <VL53L1_SetPresetMode+0x50>
 800200a:	78fb      	ldrb	r3, [r7, #3]
 800200c:	2b03      	cmp	r3, #3
 800200e:	d002      	beq.n	8002016 <VL53L1_SetPresetMode+0x50>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	2b08      	cmp	r3, #8
 8002014:	d107      	bne.n	8002026 <VL53L1_SetPresetMode+0x60>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8002016:	f24a 0128 	movw	r1, #41000	; 0xa028
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f8a2 	bl	8002164 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8002020:	4603      	mov	r3, r0
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	e006      	b.n	8002034 <VL53L1_SetPresetMode+0x6e>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8002026:	f248 2135 	movw	r1, #33333	; 0x8235
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f89a 	bl	8002164 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8002030:	4603      	mov	r3, r0
 8002032:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8002034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d106      	bne.n	800204a <VL53L1_SetPresetMode+0x84>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 800203c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f965 	bl	8002310 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8002046:	4603      	mov	r3, r0
 8002048:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800204a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b088      	sub	sp, #32
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	460b      	mov	r3, r1
 8002060:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002062:	2300      	movs	r3, #0
 8002064:	77fb      	strb	r3, [r7, #31]
	uint32_t PhaseCalTimeoutUs;
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800206c:	777b      	strb	r3, [r7, #29]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d008      	beq.n	8002086 <VL53L1_SetDistanceMode+0x30>
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d005      	beq.n	8002086 <VL53L1_SetDistanceMode+0x30>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	2b03      	cmp	r3, #3
 800207e:	d002      	beq.n	8002086 <VL53L1_SetDistanceMode+0x30>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 8002080:	f06f 0303 	mvn.w	r3, #3
 8002084:	e069      	b.n	800215a <VL53L1_SetDistanceMode+0x104>

	/* The internal distance mode is limited to Short, Medium or
	 * long only
	*/
	if (Status == VL53L1_ERROR_NONE) {
 8002086:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10a      	bne.n	80020a4 <VL53L1_SetDistanceMode+0x4e>
		if ((DistanceMode == VL53L1_DISTANCEMODE_SHORT) ||
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d002      	beq.n	800209a <VL53L1_SetDistanceMode+0x44>
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d102      	bne.n	80020a0 <VL53L1_SetDistanceMode+0x4a>
			(DistanceMode == VL53L1_DISTANCEMODE_MEDIUM))
			InternalDistanceMode = DistanceMode;
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	77bb      	strb	r3, [r7, #30]
 800209e:	e001      	b.n	80020a4 <VL53L1_SetDistanceMode+0x4e>
		else /* (DistanceMode == VL53L1_DISTANCEMODE_LONG) */
			InternalDistanceMode = VL53L1_DISTANCEMODE_LONG;
 80020a0:	2303      	movs	r3, #3
 80020a2:	77bb      	strb	r3, [r7, #30]
	}

	if (Status == VL53L1_ERROR_NONE)
 80020a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d107      	bne.n	80020bc <VL53L1_SetDistanceMode+0x66>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 80020ac:	f107 0308 	add.w	r3, r7, #8
 80020b0:	4619      	mov	r1, r3
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f001 f9c2 	bl	800343c <VL53L1_get_user_zone>
 80020b8:	4603      	mov	r3, r0
 80020ba:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 80020c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10a      	bne.n	80020e0 <VL53L1_SetDistanceMode+0x8a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	f107 0210 	add.w	r2, r7, #16
 80020d2:	f107 010c 	add.w	r1, r7, #12
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f001 f8eb 	bl	80032b2 <VL53L1_get_timeouts_us>
 80020dc:	4603      	mov	r3, r0
 80020de:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 80020e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d107      	bne.n	80020f8 <VL53L1_SetDistanceMode+0xa2>
		Status = SetPresetMode(Dev,
 80020e8:	7fba      	ldrb	r2, [r7, #30]
 80020ea:	7f79      	ldrb	r1, [r7, #29]
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff ff02 	bl	8001ef8 <SetPresetMode>
 80020f4:	4603      	mov	r3, r0
 80020f6:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				InternalDistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 80020f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10b      	bne.n	8002118 <VL53L1_SetDistanceMode+0xc2>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	7fba      	ldrb	r2, [r7, #30]
 8002104:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
				InternalDistanceMode);
		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	7fba      	ldrb	r2, [r7, #30]
 800210c:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
				InternalDistanceMode);
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	78fa      	ldrb	r2, [r7, #3]
 8002114:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8002118:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10e      	bne.n	800213e <VL53L1_SetDistanceMode+0xe8>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8002120:	68f9      	ldr	r1, [r7, #12]
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f001 f88b 	bl	8003242 <VL53L1_set_timeouts_us>
 800212c:	4603      	mov	r3, r0
 800212e:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 8002130:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d102      	bne.n	800213e <VL53L1_SetDistanceMode+0xe8>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 800213e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d107      	bne.n	8002156 <VL53L1_SetDistanceMode+0x100>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 8002146:	f107 0308 	add.w	r3, r7, #8
 800214a:	4619      	mov	r1, r3
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f001 f952 	bl	80033f6 <VL53L1_set_user_zone>
 8002152:	4603      	mov	r3, r0
 8002154:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 8002156:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3720      	adds	r7, #32
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08c      	sub	sp, #48	; 0x30
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800216e:	2300      	movs	r3, #0
 8002170:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t MmTimeoutUs;
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs;
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8002174:	4b64      	ldr	r3, [pc, #400]	; (8002308 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a4>)
 8002176:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	4a64      	ldr	r2, [pc, #400]	; (800230c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d902      	bls.n	8002186 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x22>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002180:	23fc      	movs	r3, #252	; 0xfc
 8002182:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 8002186:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800218a:	2b00      	cmp	r3, #0
 800218c:	d109      	bne.n	80021a2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x3e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800218e:	f107 031a 	add.w	r3, r7, #26
 8002192:	461a      	mov	r2, r3
 8002194:	2105      	movs	r1, #5
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 fa3b 	bl	8002612 <VL53L1_GetSequenceStepEnable>
 800219c:	4603      	mov	r3, r0
 800219e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80021a2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d109      	bne.n	80021be <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x5a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80021aa:	f107 0319 	add.w	r3, r7, #25
 80021ae:	461a      	mov	r2, r3
 80021b0:	2106      	movs	r1, #6
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 fa2d 	bl	8002612 <VL53L1_GetSequenceStepEnable>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 80021be:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10b      	bne.n	80021de <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7a>
		Status = VL53L1_get_timeouts_us(Dev,
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	f107 0210 	add.w	r2, r7, #16
 80021ce:	f107 010c 	add.w	r1, r7, #12
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f001 f86d 	bl	80032b2 <VL53L1_get_timeouts_us>
 80021d8:	4603      	mov	r3, r0
 80021da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 80021de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f040 8081 	bne.w	80022ea <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x186>
		PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 80021ee:	76fb      	strb	r3, [r7, #27]

		TimingGuard = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 80021f4:	2301      	movs	r3, #1
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 80021f8:	7efb      	ldrb	r3, [r7, #27]
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d026      	beq.n	800224c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 80021fe:	2b08      	cmp	r3, #8
 8002200:	dc43      	bgt.n	800228a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x126>
 8002202:	2b03      	cmp	r3, #3
 8002204:	d00f      	beq.n	8002226 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc2>
 8002206:	2b04      	cmp	r3, #4
 8002208:	d13f      	bne.n	800228a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x126>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800220a:	7ebb      	ldrb	r3, [r7, #26]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d002      	beq.n	8002216 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xb2>
 8002210:	7e7b      	ldrb	r3, [r7, #25]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d103      	bne.n	800221e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xba>
				TimingGuard = 5000;
 8002216:	f241 3388 	movw	r3, #5000	; 0x1388
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 800221c:	e038      	b.n	8002290 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				TimingGuard = 1000;
 800221e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002222:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8002224:	e034      	b.n	8002290 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800222c:	7ebb      	ldrb	r3, [r7, #26]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d002      	beq.n	8002238 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd4>
 8002232:	7e7b      	ldrb	r3, [r7, #25]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d103      	bne.n	8002240 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xdc>
				TimingGuard = 26600;
 8002238:	f246 73e8 	movw	r3, #26600	; 0x67e8
 800223c:	62bb      	str	r3, [r7, #40]	; 0x28
 800223e:	e002      	b.n	8002246 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe2>
			else
				TimingGuard = 21600;
 8002240:	f245 4360 	movw	r3, #21600	; 0x5460
 8002244:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 8002246:	2302      	movs	r3, #2
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800224a:	e021      	b.n	8002290 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8002252:	23f5      	movs	r3, #245	; 0xf5
 8002254:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 8002256:	f107 0308 	add.w	r3, r7, #8
 800225a:	461a      	mov	r2, r3
 800225c:	f248 0136 	movw	r1, #32822	; 0x8036
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f002 f897 	bl	8004394 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	dd07      	ble.n	800227c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x118>
				vhv += vhv_loops *
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	22f5      	movs	r2, #245	; 0xf5
 8002270:	fb02 f303 	mul.w	r3, r2, r3
 8002274:	461a      	mov	r2, r3
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	4413      	add	r3, r2
 800227a:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8002282:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 8002284:	2302      	movs	r3, #2
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8002288:	e002      	b.n	8002290 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800228a:	23f8      	movs	r3, #248	; 0xf8
 800228c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002294:	429a      	cmp	r2, r3
 8002296:	d803      	bhi.n	80022a0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13c>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8002298:	23fc      	movs	r3, #252	; 0xfc
 800229a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800229e:	e003      	b.n	80022a8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x144>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a4:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 80022a6:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 80022a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d11c      	bne.n	80022ea <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x186>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	69fa      	ldr	r2, [r7, #28]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d203      	bcs.n	80022c0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x15c>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 80022b8:	23fc      	movs	r3, #252	; 0xfc
 80022ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80022be:	e00d      	b.n	80022dc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x178>
			else {
				TimingBudget /= divisor;
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c8:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 80022ca:	68f9      	ldr	r1, [r7, #12]
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 ffb6 	bl	8003242 <VL53L1_set_timeouts_us>
 80022d6:	4603      	mov	r3, r0
 80022d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 80022dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d102      	bne.n	80022ea <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x186>
				VL53L1DevDataSet(Dev,
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 80022ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d103      	bne.n	80022fa <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x196>
		VL53L1DevDataSet(Dev,
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80022fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3730      	adds	r7, #48	; 0x30
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	00086470 	.word	0x00086470
 800230c:	00989680 	.word	0x00989680

08002310 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800231a:	2300      	movs	r3, #0
 800231c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 800231e:	6839      	ldr	r1, [r7, #0]
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 ff65 	bl	80031f0 <VL53L1_set_inter_measurement_period_ms>
 8002326:	4603      	mov	r3, r0
 8002328:	73fb      	strb	r3, [r7, #15]
			InterMeasurementPeriodMilliSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800232a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b086      	sub	sp, #24
 800233a:	af00      	add	r7, sp, #0
 800233c:	60f8      	str	r0, [r7, #12]
 800233e:	460b      	mov	r3, r1
 8002340:	607a      	str	r2, [r7, #4]
 8002342:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002344:	2300      	movs	r3, #0
 8002346:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8002348:	897b      	ldrh	r3, [r7, #10]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d002      	beq.n	8002354 <SetLimitValue+0x1e>
 800234e:	2b01      	cmp	r3, #1
 8002350:	d009      	beq.n	8002366 <SetLimitValue+0x30>
 8002352:	e011      	b.n	8002378 <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	0b9b      	lsrs	r3, r3, #14
 8002358:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 800235a:	8abb      	ldrh	r3, [r7, #20]
 800235c:	4619      	mov	r1, r3
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f001 faf8 	bl	8003954 <VL53L1_set_lite_sigma_threshold>
		break;
 8002364:	e00a      	b.n	800237c <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	0a5b      	lsrs	r3, r3, #9
 800236a:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 800236c:	8abb      	ldrh	r3, [r7, #20]
 800236e:	4619      	mov	r1, r3
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f001 fb1b 	bl	80039ac <VL53L1_set_lite_min_count_rate>
		break;
 8002376:	e001      	b.n	800237c <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002378:	23fc      	movs	r3, #252	; 0xfc
 800237a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800237c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	807b      	strh	r3, [r7, #2]
 8002394:	4613      	mov	r3, r2
 8002396:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002398:	2300      	movs	r3, #0
 800239a:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80023a0:	887b      	ldrh	r3, [r7, #2]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d902      	bls.n	80023ac <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80023a6:	23fc      	movs	r3, #252	; 0xfc
 80023a8:	73fb      	strb	r3, [r7, #15]
 80023aa:	e014      	b.n	80023d6 <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 80023ac:	787b      	ldrb	r3, [r7, #1]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d102      	bne.n	80023b8 <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	e006      	b.n	80023c6 <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80023b8:	887b      	ldrh	r3, [r7, #2]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	33e0      	adds	r3, #224	; 0xe0
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 80023c6:	887b      	ldrh	r3, [r7, #2]
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	4619      	mov	r1, r3
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff ffb2 	bl	8002336 <SetLimitValue>
 80023d2:	4603      	mov	r3, r0
 80023d4:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 80023d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10c      	bne.n	80023f8 <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80023de:	787b      	ldrb	r3, [r7, #1]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	bf14      	ite	ne
 80023e4:	2301      	movne	r3, #1
 80023e6:	2300      	moveq	r3, #0
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	887b      	ldrh	r3, [r7, #2]
 80023ec:	4611      	mov	r1, r2
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	460a      	mov	r2, r1
 80023f4:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 80023f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8002404:	b480      	push	{r7}
 8002406:	b087      	sub	sp, #28
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	460b      	mov	r3, r1
 800240e:	607a      	str	r2, [r7, #4]
 8002410:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002412:	2300      	movs	r3, #0
 8002414:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8002416:	897b      	ldrh	r3, [r7, #10]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d905      	bls.n	8002428 <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800241c:	23fc      	movs	r3, #252	; 0xfc
 800241e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	701a      	strb	r2, [r3, #0]
 8002426:	e008      	b.n	800243a <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002428:	897b      	ldrh	r3, [r7, #10]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	4413      	add	r3, r2
 800242e:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8002432:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	7dba      	ldrb	r2, [r7, #22]
 8002438:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800243a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800243e:	4618      	mov	r0, r3
 8002440:	371c      	adds	r7, #28
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <VL53L1_SetLimitCheckValue>:

VL53L1_Error VL53L1_SetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b086      	sub	sp, #24
 800244e:	af00      	add	r7, sp, #0
 8002450:	60f8      	str	r0, [r7, #12]
 8002452:	460b      	mov	r3, r1
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002458:	2300      	movs	r3, #0
 800245a:	75fb      	strb	r3, [r7, #23]
	uint8_t LimitChecksEnable;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800245c:	897b      	ldrh	r3, [r7, #10]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d902      	bls.n	8002468 <VL53L1_SetLimitCheckValue+0x1e>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002462:	23fc      	movs	r3, #252	; 0xfc
 8002464:	75fb      	strb	r3, [r7, #23]
 8002466:	e023      	b.n	80024b0 <VL53L1_SetLimitCheckValue+0x66>
	} else {

		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002468:	897b      	ldrh	r3, [r7, #10]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	4413      	add	r3, r2
 800246e:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8002472:	75bb      	strb	r3, [r7, #22]
				LimitCheckId,
				LimitChecksEnable);

		if (LimitChecksEnable == 0) {
 8002474:	7dbb      	ldrb	r3, [r7, #22]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d107      	bne.n	800248a <VL53L1_SetLimitCheckValue+0x40>
			/* disabled write only internal value */
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800247a:	897b      	ldrh	r3, [r7, #10]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	33e0      	adds	r3, #224	; 0xe0
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	e012      	b.n	80024b0 <VL53L1_SetLimitCheckValue+0x66>
				LimitCheckId, LimitCheckValue);
		} else {

			Status = SetLimitValue(Dev, LimitCheckId,
 800248a:	897b      	ldrh	r3, [r7, #10]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	4619      	mov	r1, r3
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f7ff ff50 	bl	8002336 <SetLimitValue>
 8002496:	4603      	mov	r3, r0
 8002498:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue);

			if (Status == VL53L1_ERROR_NONE) {
 800249a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d106      	bne.n	80024b0 <VL53L1_SetLimitCheckValue+0x66>
				VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80024a2:	897b      	ldrh	r3, [r7, #10]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	33e0      	adds	r3, #224	; 0xe0
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	609a      	str	r2, [r3, #8]
			}
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80024b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <VL53L1_GetLimitCheckValue>:

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	460b      	mov	r3, r1
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	77fb      	strb	r3, [r7, #31]
	FixPoint1616_t TempFix1616;
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80024ce:	897b      	ldrh	r3, [r7, #10]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d002      	beq.n	80024da <VL53L1_GetLimitCheckValue+0x1e>
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d00c      	beq.n	80024f2 <VL53L1_GetLimitCheckValue+0x36>
 80024d8:	e017      	b.n	800250a <VL53L1_GetLimitCheckValue+0x4e>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 80024da:	f107 0314 	add.w	r3, r7, #20
 80024de:	4619      	mov	r1, r3
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f001 fa21 	bl	8003928 <VL53L1_get_lite_sigma_threshold>
 80024e6:	4603      	mov	r3, r0
 80024e8:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 80024ea:	8abb      	ldrh	r3, [r7, #20]
 80024ec:	039b      	lsls	r3, r3, #14
 80024ee:	61bb      	str	r3, [r7, #24]
		break;
 80024f0:	e00d      	b.n	800250e <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 80024f2:	f107 0316 	add.w	r3, r7, #22
 80024f6:	4619      	mov	r1, r3
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f001 fa41 	bl	8003980 <VL53L1_get_lite_min_count_rate>
 80024fe:	4603      	mov	r3, r0
 8002500:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 8002502:	8afb      	ldrh	r3, [r7, #22]
 8002504:	025b      	lsls	r3, r3, #9
 8002506:	61bb      	str	r3, [r7, #24]
		break;
 8002508:	e001      	b.n	800250e <VL53L1_GetLimitCheckValue+0x52>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800250a:	23fc      	movs	r3, #252	; 0xfc
 800250c:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 800250e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d123      	bne.n	800255e <VL53L1_GetLimitCheckValue+0xa2>

		if (TempFix1616 == 0) {
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d110      	bne.n	800253e <VL53L1_GetLimitCheckValue+0x82>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 800251c:	897b      	ldrh	r3, [r7, #10]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	33e0      	adds	r3, #224	; 0xe0
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002530:	897b      	ldrh	r3, [r7, #10]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4413      	add	r3, r2
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
 800253c:	e00f      	b.n	800255e <VL53L1_GetLimitCheckValue+0xa2>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002544:	897b      	ldrh	r3, [r7, #10]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	33e0      	adds	r3, #224	; 0xe0
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002552:	897b      	ldrh	r3, [r7, #10]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	4413      	add	r3, r2
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 800255e:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8002562:	4618      	mov	r0, r3
 8002564:	3720      	adds	r7, #32
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <VL53L1_SetUserROI>:

/* Group ROI Functions */

VL53L1_Error VL53L1_SetUserROI(VL53L1_DEV Dev,
		VL53L1_UserRoi_t *pRoi)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b084      	sub	sp, #16
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002574:	2300      	movs	r3, #0
 8002576:	73fb      	strb	r3, [r7, #15]
	VL53L1_user_zone_t user_zone;

	Status = CheckValidRectRoi(*pRoi);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	2300      	movs	r3, #0
 800257e:	4613      	mov	r3, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff fb9a 	bl	8001cba <CheckValidRectRoi>
 8002586:	4603      	mov	r3, r0
 8002588:	73fb      	strb	r3, [r7, #15]
	if (Status != VL53L1_ERROR_NONE)
 800258a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <VL53L1_SetUserROI+0x2e>
		return VL53L1_ERROR_INVALID_PARAMS;
 8002592:	f06f 0303 	mvn.w	r3, #3
 8002596:	e038      	b.n	800260a <VL53L1_SetUserROI+0xa0>

	user_zone.x_centre = (pRoi->BotRightX + pRoi->TopLeftX  + 1) / 2;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	789b      	ldrb	r3, [r3, #2]
 800259c:	461a      	mov	r2, r3
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	4413      	add	r3, r2
 80025a4:	3301      	adds	r3, #1
 80025a6:	0fda      	lsrs	r2, r3, #31
 80025a8:	4413      	add	r3, r2
 80025aa:	105b      	asrs	r3, r3, #1
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	723b      	strb	r3, [r7, #8]
	user_zone.y_centre = (pRoi->TopLeftY  + pRoi->BotRightY + 1) / 2;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	785b      	ldrb	r3, [r3, #1]
 80025b4:	461a      	mov	r2, r3
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	78db      	ldrb	r3, [r3, #3]
 80025ba:	4413      	add	r3, r2
 80025bc:	3301      	adds	r3, #1
 80025be:	0fda      	lsrs	r2, r3, #31
 80025c0:	4413      	add	r3, r2
 80025c2:	105b      	asrs	r3, r3, #1
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	727b      	strb	r3, [r7, #9]
	user_zone.width =    (pRoi->BotRightX - pRoi->TopLeftX);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	789a      	ldrb	r2, [r3, #2]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	72bb      	strb	r3, [r7, #10]
	user_zone.height =   (pRoi->TopLeftY  - pRoi->BotRightY);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	785a      	ldrb	r2, [r3, #1]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	78db      	ldrb	r3, [r3, #3]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	72fb      	strb	r3, [r7, #11]
	if ((user_zone.width < 3) || (user_zone.height < 3))
 80025e4:	7abb      	ldrb	r3, [r7, #10]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d902      	bls.n	80025f0 <VL53L1_SetUserROI+0x86>
 80025ea:	7afb      	ldrb	r3, [r7, #11]
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d802      	bhi.n	80025f6 <VL53L1_SetUserROI+0x8c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80025f0:	23fc      	movs	r3, #252	; 0xfc
 80025f2:	73fb      	strb	r3, [r7, #15]
 80025f4:	e007      	b.n	8002606 <VL53L1_SetUserROI+0x9c>
	else
		Status =  VL53L1_set_user_zone(Dev, &user_zone);
 80025f6:	f107 0308 	add.w	r3, r7, #8
 80025fa:	4619      	mov	r1, r3
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 fefa 	bl	80033f6 <VL53L1_set_user_zone>
 8002602:	4603      	mov	r3, r0
 8002604:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002606:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b086      	sub	sp, #24
 8002616:	af00      	add	r7, sp, #0
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	460b      	mov	r3, r1
 800261c:	607a      	str	r2, [r7, #4]
 800261e:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002620:	2300      	movs	r3, #0
 8002622:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8002624:	7afb      	ldrb	r3, [r7, #11]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	4619      	mov	r1, r3
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 feac 	bl	8003388 <VL53L1_get_sequence_config_bit>
 8002630:	4603      	mov	r3, r0
 8002632:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 8002634:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002648:	2300      	movs	r3, #0
 800264a:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;
	VL53L1_State CurrPalState;

	LOG_FUNCTION_START("");

	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 8002652:	73bb      	strb	r3, [r7, #14]
	switch (CurrPalState) {
 8002654:	7bbb      	ldrb	r3, [r7, #14]
 8002656:	2b63      	cmp	r3, #99	; 0x63
 8002658:	dc12      	bgt.n	8002680 <VL53L1_StartMeasurement+0x40>
 800265a:	2b62      	cmp	r3, #98	; 0x62
 800265c:	da0d      	bge.n	800267a <VL53L1_StartMeasurement+0x3a>
 800265e:	2b05      	cmp	r3, #5
 8002660:	dc0e      	bgt.n	8002680 <VL53L1_StartMeasurement+0x40>
 8002662:	2b04      	cmp	r3, #4
 8002664:	da09      	bge.n	800267a <VL53L1_StartMeasurement+0x3a>
 8002666:	2b02      	cmp	r3, #2
 8002668:	dc02      	bgt.n	8002670 <VL53L1_StartMeasurement+0x30>
 800266a:	2b00      	cmp	r3, #0
 800266c:	da05      	bge.n	800267a <VL53L1_StartMeasurement+0x3a>
 800266e:	e007      	b.n	8002680 <VL53L1_StartMeasurement+0x40>
 8002670:	2b03      	cmp	r3, #3
 8002672:	d105      	bne.n	8002680 <VL53L1_StartMeasurement+0x40>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 8002674:	2300      	movs	r3, #0
 8002676:	73fb      	strb	r3, [r7, #15]
		break;
 8002678:	e004      	b.n	8002684 <VL53L1_StartMeasurement+0x44>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 800267a:	23f2      	movs	r3, #242	; 0xf2
 800267c:	73fb      	strb	r3, [r7, #15]
		break;
 800267e:	e001      	b.n	8002684 <VL53L1_StartMeasurement+0x44>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 8002680:	23fd      	movs	r3, #253	; 0xfd
 8002682:	73fb      	strb	r3, [r7, #15]
	}

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	789b      	ldrb	r3, [r3, #2]
 8002688:	737b      	strb	r3, [r7, #13]

	if (Status == VL53L1_ERROR_NONE)
 800268a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d107      	bne.n	80026a2 <VL53L1_StartMeasurement+0x62>
		Status = VL53L1_init_and_start_range(
 8002692:	7b7b      	ldrb	r3, [r7, #13]
 8002694:	2206      	movs	r2, #6
 8002696:	4619      	mov	r1, r3
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f001 f9bd 	bl	8003a18 <VL53L1_init_and_start_range>
 800269e:	4603      	mov	r3, r0
 80026a0:	73fb      	strb	r3, [r7, #15]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 80026a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d103      	bne.n	80026b2 <VL53L1_StartMeasurement+0x72>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2204      	movs	r2, #4
 80026ae:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 80026b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <ChangePresetMode>:
	LOG_FUNCTION_END(Status);
	return Status;
}

static VL53L1_Error ChangePresetMode(VL53L1_DEV Dev)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b08a      	sub	sp, #40	; 0x28
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80026c6:	2300      	movs	r3, #0
 80026c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t DeviceMeasurementMode;
	uint32_t inter_measurement_period_ms;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_user_zone(Dev, &user_zone);
 80026cc:	f107 0318 	add.w	r3, r7, #24
 80026d0:	4619      	mov	r1, r3
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 feb2 	bl	800343c <VL53L1_get_user_zone>
 80026d8:	4603      	mov	r3, r0
 80026da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	/*  Initialize variables fix ticket EwokP #475395 */
	PresetMode = VL53L1DevDataGet(Dev,
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 80026e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			CurrentParameters.PresetMode);
	NewDistanceMode = VL53L1DevDataGet(Dev,
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 337f 	ldrb.w	r3, [r3, #895]	; 0x37f
 80026ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			CurrentParameters.NewDistanceMode);
	/*  End of Initialize variables fix ticket EwokP #475395 */
	if (Status == VL53L1_ERROR_NONE)
 80026f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10b      	bne.n	8002712 <ChangePresetMode+0x54>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80026fa:	f107 0314 	add.w	r3, r7, #20
 80026fe:	f107 0210 	add.w	r2, r7, #16
 8002702:	f107 010c 	add.w	r1, r7, #12
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 fdd3 	bl	80032b2 <VL53L1_get_timeouts_us>
 800270c:	4603      	mov	r3, r0
 800270e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 8002712:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002716:	2b00      	cmp	r3, #0
 8002718:	d105      	bne.n	8002726 <ChangePresetMode+0x68>
		Status = VL53L1_stop_range(Dev);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f001 fba6 	bl	8003e6c <VL53L1_stop_range>
 8002720:	4603      	mov	r3, r0
 8002722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53L1_ERROR_NONE)
 8002726:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800272a:	2b00      	cmp	r3, #0
 800272c:	d107      	bne.n	800273e <ChangePresetMode+0x80>
		Status = VL53L1_WaitUs(Dev, 500);
 800272e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f004 fe3a 	bl	80073ac <VL53L1_WaitUs>
 8002738:	4603      	mov	r3, r0
 800273a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53L1_ERROR_NONE) {
 800273e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10d      	bne.n	8002762 <ChangePresetMode+0xa4>
		inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	623b      	str	r3, [r7, #32]
					LLData.inter_measurement_period_ms);

		Status = SetPresetMode(Dev,
 800274c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8002750:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7ff fbce 	bl	8001ef8 <SetPresetMode>
 800275c:	4603      	mov	r3, r0
 800275e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				PresetMode,
				NewDistanceMode,
				inter_measurement_period_ms);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8002762:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10f      	bne.n	800278a <ChangePresetMode+0xcc>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 800276a:	68f9      	ldr	r1, [r7, #12]
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 fd66 	bl	8003242 <VL53L1_set_timeouts_us>
 8002776:	4603      	mov	r3, r0
 8002778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 800277c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002780:	2b00      	cmp	r3, #0
 8002782:	d102      	bne.n	800278a <ChangePresetMode+0xcc>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 800278a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800278e:	2b00      	cmp	r3, #0
 8002790:	d108      	bne.n	80027a4 <ChangePresetMode+0xe6>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 8002792:	f107 0318 	add.w	r3, r7, #24
 8002796:	4619      	mov	r1, r3
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 fe2c 	bl	80033f6 <VL53L1_set_user_zone>
 800279e:	4603      	mov	r3, r0
 80027a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53L1_ERROR_NONE) {
 80027a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10b      	bne.n	80027c4 <ChangePresetMode+0x106>
		DeviceMeasurementMode = VL53L1DevDataGet(Dev,
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	789b      	ldrb	r3, [r3, #2]
 80027b0:	77fb      	strb	r3, [r7, #31]
				LLData.measurement_mode);

		Status = VL53L1_init_and_start_range(
 80027b2:	7ffb      	ldrb	r3, [r7, #31]
 80027b4:	2206      	movs	r2, #6
 80027b6:	4619      	mov	r1, r3
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f001 f92d 	bl	8003a18 <VL53L1_init_and_start_range>
 80027be:	4603      	mov	r3, r0
 80027c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);
	}

	if (Status == VL53L1_ERROR_NONE)
 80027c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d104      	bne.n	80027d6 <ChangePresetMode+0x118>
		VL53L1DevDataSet(Dev,
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80027d2:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
			CurrentParameters.InternalDistanceMode,
			NewDistanceMode);

	LOG_FUNCTION_END(Status);
	return Status;
 80027d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3728      	adds	r7, #40	; 0x28
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <VL53L1_ClearInterruptAndStartMeasurement>:


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b084      	sub	sp, #16
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80027ea:	2300      	movs	r3, #0
 80027ec:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes InternalDistanceMode;
	VL53L1_DistanceModes NewDistanceMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	789b      	ldrb	r3, [r3, #2]
 80027f2:	73bb      	strb	r3, [r7, #14]
	InternalDistanceMode = VL53L1DevDataGet(Dev,
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 80027fa:	737b      	strb	r3, [r7, #13]
			CurrentParameters.InternalDistanceMode);
	NewDistanceMode = VL53L1DevDataGet(Dev,
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 337f 	ldrb.w	r3, [r3, #895]	; 0x37f
 8002802:	733b      	strb	r3, [r7, #12]
			CurrentParameters.NewDistanceMode);

	if (NewDistanceMode != InternalDistanceMode)
 8002804:	7b3a      	ldrb	r2, [r7, #12]
 8002806:	7b7b      	ldrb	r3, [r7, #13]
 8002808:	429a      	cmp	r2, r3
 800280a:	d005      	beq.n	8002818 <VL53L1_ClearInterruptAndStartMeasurement+0x36>
		Status = ChangePresetMode(Dev);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ff56 	bl	80026be <ChangePresetMode>
 8002812:	4603      	mov	r3, r0
 8002814:	73fb      	strb	r3, [r7, #15]
 8002816:	e006      	b.n	8002826 <VL53L1_ClearInterruptAndStartMeasurement+0x44>
	else
		Status = VL53L1_clear_interrupt_and_enable_next_range(
 8002818:	7bbb      	ldrb	r3, [r7, #14]
 800281a:	4619      	mov	r1, r3
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f001 fc84 	bl	800412a <VL53L1_clear_interrupt_and_enable_next_range>
 8002822:	4603      	mov	r3, r0
 8002824:	73fb      	strb	r3, [r7, #15]
						Dev,
						DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8002826:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <VL53L1_WaitMeasurementDataReady>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_WaitMeasurementDataReady(VL53L1_DEV Dev)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b084      	sub	sp, #16
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800283a:	2300      	movs	r3, #0
 800283c:	73fb      	strb	r3, [r7, #15]

	/* Note that the timeout is given by:
	* VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS defined in def.h
	*/

	Status = VL53L1_poll_for_range_completion(Dev,
 800283e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f004 fceb 	bl	800721e <VL53L1_poll_for_range_completion>
 8002848:	4603      	mov	r3, r0
 800284a:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800284c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8002858:	b480      	push	{r7}
 800285a:	b08d      	sub	sp, #52	; 0x34
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	603a      	str	r2, [r7, #0]
 8002862:	71fb      	strb	r3, [r7, #7]
 8002864:	460b      	mov	r3, r1
 8002866:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 8002868:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800286c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t SRAS = 30;
 800286e:	231e      	movs	r3, #30
 8002870:	847b      	strh	r3, [r7, #34]	; 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 8002872:	4b33      	ldr	r3, [pc, #204]	; (8002940 <ComputeRQL+0xe8>)
 8002874:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 8002876:	4b33      	ldr	r3, [pc, #204]	; (8002944 <ComputeRQL+0xec>)
 8002878:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 800287a:	f641 139a 	movw	r3, #6554	; 0x199a
 800287e:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d103      	bne.n	800288e <ComputeRQL+0x36>
		returnvalue = 0;
 8002886:	2300      	movs	r3, #0
 8002888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800288c:	e04f      	b.n	800292e <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 800288e:	79bb      	ldrb	r3, [r7, #6]
 8002890:	2b07      	cmp	r3, #7
 8002892:	d103      	bne.n	800289c <ComputeRQL+0x44>
		returnvalue = 50;
 8002894:	2332      	movs	r3, #50	; 0x32
 8002896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800289a:	e048      	b.n	800292e <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80028a2:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80028a6:	429a      	cmp	r2, r3
 80028a8:	dd03      	ble.n	80028b2 <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 80028aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80028ac:	041b      	lsls	r3, r3, #16
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b0:	e007      	b.n	80028c2 <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80028b8:	461a      	mov	r2, r3
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	fb02 f303 	mul.w	r3, r2, r3
 80028c0:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 80028c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d020      	beq.n	800290a <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80028cc:	461a      	mov	r2, r3
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	fb02 f303 	mul.w	r3, r2, r3
 80028d4:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 80028d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d8:	085b      	lsrs	r3, r3, #1
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4413      	add	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e8:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	041b      	lsls	r3, r3, #16
 80028ee:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d804      	bhi.n	8002902 <ComputeRQL+0xaa>
				SRQL = GI - partial;
 80028f8:	69fa      	ldr	r2, [r7, #28]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002900:	e006      	b.n	8002910 <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 8002902:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8002906:	62bb      	str	r3, [r7, #40]	; 0x28
 8002908:	e002      	b.n	8002910 <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 800290a:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 800290e:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 8002910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002912:	0c1b      	lsrs	r3, r3, #16
 8002914:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	2b32      	cmp	r3, #50	; 0x32
 800291a:	d905      	bls.n	8002928 <ComputeRQL+0xd0>
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	2b64      	cmp	r3, #100	; 0x64
 8002920:	bf28      	it	cs
 8002922:	2364      	movcs	r3, #100	; 0x64
 8002924:	b2db      	uxtb	r3, r3
 8002926:	e000      	b.n	800292a <ComputeRQL+0xd2>
 8002928:	2332      	movs	r3, #50	; 0x32
 800292a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 800292e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002932:	4618      	mov	r0, r3
 8002934:	3734      	adds	r7, #52	; 0x34
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	0075b333 	.word	0x0075b333
 8002944:	0030cccd 	.word	0x0030cccd

08002948 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	3b04      	subs	r3, #4
 8002956:	2b0f      	cmp	r3, #15
 8002958:	d83d      	bhi.n	80029d6 <ConvertStatusLite+0x8e>
 800295a:	a201      	add	r2, pc, #4	; (adr r2, 8002960 <ConvertStatusLite+0x18>)
 800295c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002960:	080029b3 	.word	0x080029b3
 8002964:	080029ad 	.word	0x080029ad
 8002968:	080029b9 	.word	0x080029b9
 800296c:	080029bf 	.word	0x080029bf
 8002970:	080029cb 	.word	0x080029cb
 8002974:	080029d1 	.word	0x080029d1
 8002978:	080029d7 	.word	0x080029d7
 800297c:	080029d7 	.word	0x080029d7
 8002980:	080029c5 	.word	0x080029c5
 8002984:	080029d7 	.word	0x080029d7
 8002988:	080029d7 	.word	0x080029d7
 800298c:	080029d7 	.word	0x080029d7
 8002990:	080029d7 	.word	0x080029d7
 8002994:	080029d7 	.word	0x080029d7
 8002998:	080029a1 	.word	0x080029a1
 800299c:	080029a7 	.word	0x080029a7
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 80029a0:	230a      	movs	r3, #10
 80029a2:	73fb      	strb	r3, [r7, #15]
		break;
 80029a4:	e019      	b.n	80029da <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 80029a6:	2306      	movs	r3, #6
 80029a8:	73fb      	strb	r3, [r7, #15]
		break;
 80029aa:	e016      	b.n	80029da <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 80029ac:	2304      	movs	r3, #4
 80029ae:	73fb      	strb	r3, [r7, #15]
		break;
 80029b0:	e013      	b.n	80029da <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 80029b2:	2302      	movs	r3, #2
 80029b4:	73fb      	strb	r3, [r7, #15]
		break;
 80029b6:	e010      	b.n	80029da <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 80029b8:	2301      	movs	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
		break;
 80029bc:	e00d      	b.n	80029da <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 80029be:	2307      	movs	r3, #7
 80029c0:	73fb      	strb	r3, [r7, #15]
		break;
 80029c2:	e00a      	b.n	80029da <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 80029c4:	2309      	movs	r3, #9
 80029c6:	73fb      	strb	r3, [r7, #15]
		break;
 80029c8:	e007      	b.n	80029da <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 80029ca:	2303      	movs	r3, #3
 80029cc:	73fb      	strb	r3, [r7, #15]
		break;
 80029ce:	e004      	b.n	80029da <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 80029d0:	2300      	movs	r3, #0
 80029d2:	73fb      	strb	r3, [r7, #15]
		break;
 80029d4:	e001      	b.n	80029da <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 80029d6:	23ff      	movs	r3, #255	; 0xff
 80029d8:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 80029da:	7bfb      	ldrb	r3, [r7, #15]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08c      	sub	sp, #48	; 0x30
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	607b      	str	r3, [r7, #4]
 80029f2:	460b      	mov	r3, r1
 80029f4:	72fb      	strb	r3, [r7, #11]
 80029f6:	4613      	mov	r3, r2
 80029f8:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a06:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a0e:	f003 031f 	and.w	r3, r3, #31
 8002a12:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8002a16:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8002a1a:	7afb      	ldrb	r3, [r7, #11]
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff ff1a 	bl	8002858 <ComputeRQL>
 8002a24:	4603      	mov	r3, r0
 8002a26:	461a      	mov	r2, r3
 8002a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2a:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a30:	025b      	lsls	r3, r3, #9
 8002a32:	62bb      	str	r3, [r7, #40]	; 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8002a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a38:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002a3e:	025b      	lsls	r3, r3, #9
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8002a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a46:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 8002a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4e:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002a54:	025b      	lsls	r3, r3, #9
 8002a56:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8002a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5a:	6a3a      	ldr	r2, [r7, #32]
 8002a5c:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8002a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a66:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 8002a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 8002a6e:	7abb      	ldrb	r3, [r7, #10]
 8002a70:	2b11      	cmp	r3, #17
 8002a72:	d009      	beq.n	8002a88 <SetSimpleData+0xa0>
 8002a74:	2b11      	cmp	r3, #17
 8002a76:	dc0f      	bgt.n	8002a98 <SetSimpleData+0xb0>
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	dc02      	bgt.n	8002a82 <SetSimpleData+0x9a>
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	dc03      	bgt.n	8002a88 <SetSimpleData+0xa0>
 8002a80:	e00a      	b.n	8002a98 <SetSimpleData+0xb0>
 8002a82:	2b0d      	cmp	r3, #13
 8002a84:	d004      	beq.n	8002a90 <SetSimpleData+0xa8>
 8002a86:	e007      	b.n	8002a98 <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8002a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8a:	2205      	movs	r2, #5
 8002a8c:	76da      	strb	r2, [r3, #27]
		break;
 8002a8e:	e006      	b.n	8002a9e <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8002a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a92:	220d      	movs	r2, #13
 8002a94:	76da      	strb	r2, [r3, #27]
		break;
 8002a96:	e002      	b.n	8002a9e <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8002a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8002a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa0:	7edb      	ldrb	r3, [r3, #27]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d108      	bne.n	8002ab8 <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 8002aa6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff ff4c 	bl	8002948 <ConvertStatusLite>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8002ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab6:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002abc:	025b      	lsls	r3, r3, #9
 8002abe:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a3a      	ldr	r2, [r7, #32]
 8002ac4:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002acc:	025b      	lsls	r3, r3, #9
 8002ace:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a3a      	ldr	r2, [r7, #32]
 8002ad4:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 8002ad8:	f107 0314 	add.w	r3, r7, #20
 8002adc:	461a      	mov	r2, r3
 8002ade:	2100      	movs	r1, #0
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f7ff fceb 	bl	80024bc <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 8002ae6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002aea:	2b06      	cmp	r3, #6
 8002aec:	bf0c      	ite	eq
 8002aee:	2301      	moveq	r3, #1
 8002af0:	2300      	movne	r3, #0
 8002af2:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 8002af4:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 8002af6:	f107 0319 	add.w	r3, r7, #25
 8002afa:	461a      	mov	r2, r3
 8002afc:	2100      	movs	r1, #0
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f7ff fc80 	bl	8002404 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8002b04:	7e7b      	ldrb	r3, [r7, #25]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d104      	bne.n	8002b14 <SetSimpleData+0x12c>
 8002b0a:	7ffb      	ldrb	r3, [r7, #31]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d101      	bne.n	8002b14 <SetSimpleData+0x12c>
 8002b10:	2301      	movs	r3, #1
 8002b12:	e000      	b.n	8002b16 <SetSimpleData+0x12e>
 8002b14:	2300      	movs	r3, #0
 8002b16:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	7fba      	ldrb	r2, [r7, #30]
 8002b1c:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 8002b20:	f107 0314 	add.w	r3, r7, #20
 8002b24:	461a      	mov	r2, r3
 8002b26:	2101      	movs	r1, #1
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f7ff fcc7 	bl	80024bc <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 8002b2e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	bf0c      	ite	eq
 8002b36:	2301      	moveq	r3, #1
 8002b38:	2300      	movne	r3, #0
 8002b3a:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8002b3c:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 8002b3e:	f107 0319 	add.w	r3, r7, #25
 8002b42:	461a      	mov	r2, r3
 8002b44:	2101      	movs	r1, #1
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f7ff fc5c 	bl	8002404 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8002b4c:	7e7b      	ldrb	r3, [r7, #25]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d104      	bne.n	8002b5c <SetSimpleData+0x174>
 8002b52:	7f7b      	ldrb	r3, [r7, #29]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <SetSimpleData+0x174>
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e000      	b.n	8002b5e <SetSimpleData+0x176>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	7fba      	ldrb	r2, [r7, #30]
 8002b64:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 8002b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6a:	8b1b      	ldrh	r3, [r3, #24]
 8002b6c:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8002b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b70:	7edb      	ldrb	r3, [r3, #27]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d110      	bne.n	8002b98 <SetSimpleData+0x1b0>
 8002b76:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	da0c      	bge.n	8002b98 <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8002b7e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002b82:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <SetSimpleData+0x1bc>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	da03      	bge.n	8002b92 <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 8002b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8c:	220e      	movs	r2, #14
 8002b8e:	76da      	strb	r2, [r3, #27]
 8002b90:	e002      	b.n	8002b98 <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8002b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b94:	2200      	movs	r2, #0
 8002b96:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 8002b98:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3730      	adds	r7, #48	; 0x30
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	20000010 	.word	0x20000010

08002ba8 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b0a8      	sub	sp, #160	; 0xa0
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	VL53L1_range_results_t       results;
	VL53L1_range_results_t       *presults = &results;
 8002bb8:	f107 0308 	add.w	r3, r7, #8
 8002bbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 8002bc0:	221c      	movs	r2, #28
 8002bc2:	21ff      	movs	r1, #255	; 0xff
 8002bc4:	6838      	ldr	r0, [r7, #0]
 8002bc6:	f007 fde3 	bl	800a790 <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 8002bca:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002bce:	2102      	movs	r1, #2
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f001 fa2c 	bl	800402e <VL53L1_get_device_results>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 8002bdc:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d117      	bne.n	8002c14 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 8002be4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002be8:	789a      	ldrb	r2, [r3, #2]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 8002bee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		Status = SetSimpleData(Dev, 1,
 8002bf8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bfc:	78da      	ldrb	r2, [r3, #3]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c06:	2101      	movs	r1, #1
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff feed 	bl	80029e8 <SetSimpleData>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002c14:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3798      	adds	r7, #152	; 0x98
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <VL53L1_SetCalibrationData>:
	return Status;
}

VL53L1_Error VL53L1_SetCalibrationData(VL53L1_DEV Dev,
		VL53L1_CalibrationData_t *pCalibrationData)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b09e      	sub	sp, #120	; 0x78
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	VL53L1_calibration_data_t            cal_data;
	uint32_t x;

	LOG_FUNCTION_START("");

	cal_data.struct_version = pCalibrationData->struct_version -
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	3b10      	subs	r3, #16
 8002c36:	60bb      	str	r3, [r7, #8]


	/* memcpy(DEST, SRC, N)  */
	memcpy(
		&(cal_data.add_off_cal_data),
		&(pCalibrationData->add_off_cal_data),
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	f103 0120 	add.w	r1, r3, #32
	memcpy(
 8002c3e:	f107 0308 	add.w	r3, r7, #8
 8002c42:	331c      	adds	r3, #28
 8002c44:	2208      	movs	r2, #8
 8002c46:	4618      	mov	r0, r3
 8002c48:	f007 fd94 	bl	800a774 <memcpy>
		sizeof(VL53L1_additional_offset_cal_data_t));

	/* memcpy (DEST, SRC, N) */
	memcpy(
		&(cal_data.optical_centre),
		&(pCalibrationData->optical_centre),
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	3328      	adds	r3, #40	; 0x28
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	b29b      	uxth	r3, r3
	memcpy(
 8002c54:	85bb      	strh	r3, [r7, #44]	; 0x2c
		sizeof(VL53L1_optical_centre_t));

	/* memcpy (DEST, SRC, N) */
	memcpy(
		&(cal_data.gain_cal),
		&(pCalibrationData->gain_cal),
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	332a      	adds	r3, #42	; 0x2a
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	b29b      	uxth	r3, r3
	memcpy(
 8002c5e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		sizeof(VL53L1_gain_calibration_data_t));

	/* memcpy (DEST, SRC, N) */
	memcpy(
		&(cal_data.cal_peak_rate_map),
		&(pCalibrationData->cal_peak_rate_map),
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	f103 012c 	add.w	r1, r3, #44	; 0x2c
	memcpy(
 8002c66:	f107 0308 	add.w	r3, r7, #8
 8002c6a:	3328      	adds	r3, #40	; 0x28
 8002c6c:	223a      	movs	r2, #58	; 0x3a
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f007 fd80 	bl	800a774 <memcpy>
		sizeof(VL53L1_cal_peak_rate_map_t));

	pC = &pCalibrationData->customer;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	3304      	adds	r3, #4
 8002c78:	673b      	str	r3, [r7, #112]	; 0x70
	x = pC->algo__crosstalk_compensation_plane_offset_kcps;
 8002c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	66fb      	str	r3, [r7, #108]	; 0x6c
	cal_data.customer.algo__crosstalk_compensation_plane_offset_kcps =
		(uint16_t)(x&0x0000FFFF);
 8002c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c82:	b29b      	uxth	r3, r3
	cal_data.customer.algo__crosstalk_compensation_plane_offset_kcps =
 8002c84:	82fb      	strh	r3, [r7, #22]

	cal_data.customer.global_config__spad_enables_ref_0 =
		pC->global_config__spad_enables_ref_0;
 8002c86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c88:	781b      	ldrb	r3, [r3, #0]
	cal_data.customer.global_config__spad_enables_ref_0 =
 8002c8a:	733b      	strb	r3, [r7, #12]
	cal_data.customer.global_config__spad_enables_ref_1 =
		pC->global_config__spad_enables_ref_1;
 8002c8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c8e:	785b      	ldrb	r3, [r3, #1]
	cal_data.customer.global_config__spad_enables_ref_1 =
 8002c90:	737b      	strb	r3, [r7, #13]
	cal_data.customer.global_config__spad_enables_ref_2 =
		pC->global_config__spad_enables_ref_2;
 8002c92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c94:	789b      	ldrb	r3, [r3, #2]
	cal_data.customer.global_config__spad_enables_ref_2 =
 8002c96:	73bb      	strb	r3, [r7, #14]
	cal_data.customer.global_config__spad_enables_ref_3 =
		pC->global_config__spad_enables_ref_3;
 8002c98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c9a:	78db      	ldrb	r3, [r3, #3]
	cal_data.customer.global_config__spad_enables_ref_3 =
 8002c9c:	73fb      	strb	r3, [r7, #15]
	cal_data.customer.global_config__spad_enables_ref_4 =
		pC->global_config__spad_enables_ref_4;
 8002c9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ca0:	791b      	ldrb	r3, [r3, #4]
	cal_data.customer.global_config__spad_enables_ref_4 =
 8002ca2:	743b      	strb	r3, [r7, #16]
	cal_data.customer.global_config__spad_enables_ref_5 =
		pC->global_config__spad_enables_ref_5;
 8002ca4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ca6:	795b      	ldrb	r3, [r3, #5]
	cal_data.customer.global_config__spad_enables_ref_5 =
 8002ca8:	747b      	strb	r3, [r7, #17]
	cal_data.customer.global_config__ref_en_start_select =
		pC->global_config__ref_en_start_select;
 8002caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cac:	799b      	ldrb	r3, [r3, #6]
	cal_data.customer.global_config__ref_en_start_select =
 8002cae:	74bb      	strb	r3, [r7, #18]
	cal_data.customer.ref_spad_man__num_requested_ref_spads =
		pC->ref_spad_man__num_requested_ref_spads;
 8002cb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cb2:	79db      	ldrb	r3, [r3, #7]
	cal_data.customer.ref_spad_man__num_requested_ref_spads =
 8002cb4:	74fb      	strb	r3, [r7, #19]
	cal_data.customer.ref_spad_man__ref_location =
		pC->ref_spad_man__ref_location;
 8002cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cb8:	7a1b      	ldrb	r3, [r3, #8]
	cal_data.customer.ref_spad_man__ref_location =
 8002cba:	753b      	strb	r3, [r7, #20]
	cal_data.customer.algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8002cbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cbe:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
	cal_data.customer.algo__crosstalk_compensation_x_plane_gradient_kcps =
 8002cc2:	833b      	strh	r3, [r7, #24]
	cal_data.customer.algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8002cc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cc6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	cal_data.customer.algo__crosstalk_compensation_y_plane_gradient_kcps =
 8002cca:	837b      	strh	r3, [r7, #26]
	cal_data.customer.ref_spad_char__total_rate_target_mcps =
		pC->ref_spad_char__total_rate_target_mcps;
 8002ccc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cce:	8a9b      	ldrh	r3, [r3, #20]
	cal_data.customer.ref_spad_char__total_rate_target_mcps =
 8002cd0:	83bb      	strh	r3, [r7, #28]
	cal_data.customer.algo__part_to_part_range_offset_mm =
		pC->algo__part_to_part_range_offset_mm;
 8002cd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cd4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
	cal_data.customer.algo__part_to_part_range_offset_mm =
 8002cd8:	83fb      	strh	r3, [r7, #30]
	cal_data.customer.mm_config__inner_offset_mm =
		pC->mm_config__inner_offset_mm;
 8002cda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cdc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
	cal_data.customer.mm_config__inner_offset_mm =
 8002ce0:	843b      	strh	r3, [r7, #32]
	cal_data.customer.mm_config__outer_offset_mm =
		pC->mm_config__outer_offset_mm;
 8002ce2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ce4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
	cal_data.customer.mm_config__outer_offset_mm =
 8002ce8:	847b      	strh	r3, [r7, #34]	; 0x22

	Status = VL53L1_set_part_to_part_data(Dev, &cal_data);
 8002cea:	f107 0308 	add.w	r3, r7, #8
 8002cee:	4619      	mov	r1, r3
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f9ab 	bl	800304c <VL53L1_set_part_to_part_data>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	LOG_FUNCTION_END(Status);
	return Status;
 8002cfc:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77

}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3778      	adds	r7, #120	; 0x78
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <VL53L1_GetCalibrationData>:

VL53L1_Error VL53L1_GetCalibrationData(VL53L1_DEV Dev,
		VL53L1_CalibrationData_t  *pCalibrationData)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b09e      	sub	sp, #120	; 0x78
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002d12:	2300      	movs	r3, #0
 8002d14:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	VL53L1_customer_nvm_managed_t       *pC2;

	LOG_FUNCTION_START("");

	/* struct_version is filled inside get part to part function */
	Status = VL53L1_get_part_to_part_data(Dev, &cal_data);
 8002d18:	f107 0308 	add.w	r3, r7, #8
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fa0e 	bl	8003140 <VL53L1_get_part_to_part_data>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	pCalibrationData->struct_version = cal_data.struct_version +
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f103 0210 	add.w	r2, r3, #16
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	601a      	str	r2, [r3, #0]
			VL53L1_ADDITIONAL_CALIBRATION_DATA_STRUCT_VERSION;


	/* memcpy(DEST, SRC, N)  */
	memcpy(
		&(pCalibrationData->add_off_cal_data),
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	f103 0020 	add.w	r0, r3, #32
	memcpy(
 8002d3a:	f107 0308 	add.w	r3, r7, #8
 8002d3e:	331c      	adds	r3, #28
 8002d40:	2208      	movs	r2, #8
 8002d42:	4619      	mov	r1, r3
 8002d44:	f007 fd16 	bl	800a774 <memcpy>
		&(cal_data.add_off_cal_data),
		sizeof(VL53L1_additional_offset_cal_data_t));

	/* memcpy (DEST, SRC, N) */
	memcpy(
		&(pCalibrationData->optical_centre),
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	3328      	adds	r3, #40	; 0x28
 8002d4c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
	memcpy(
 8002d4e:	801a      	strh	r2, [r3, #0]
		&(cal_data.optical_centre),
		sizeof(VL53L1_optical_centre_t));

	/* memcpy (DEST, SRC, N) */
	memcpy(
		&(pCalibrationData->gain_cal),
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	332a      	adds	r3, #42	; 0x2a
 8002d54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
	memcpy(
 8002d56:	801a      	strh	r2, [r3, #0]
		&(cal_data.gain_cal),
		sizeof(VL53L1_gain_calibration_data_t));

	/* memcpy (DEST, SRC, N) */
	memcpy(
		&(pCalibrationData->cal_peak_rate_map),
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	f103 002c 	add.w	r0, r3, #44	; 0x2c
	memcpy(
 8002d5e:	f107 0308 	add.w	r3, r7, #8
 8002d62:	3328      	adds	r3, #40	; 0x28
 8002d64:	223a      	movs	r2, #58	; 0x3a
 8002d66:	4619      	mov	r1, r3
 8002d68:	f007 fd04 	bl	800a774 <memcpy>
		&(cal_data.cal_peak_rate_map),
		sizeof(VL53L1_cal_peak_rate_map_t));


	pC = &pCalibrationData->customer;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	3304      	adds	r3, #4
 8002d70:	673b      	str	r3, [r7, #112]	; 0x70
	pC2 = &cal_data.customer;
 8002d72:	f107 0308 	add.w	r3, r7, #8
 8002d76:	3304      	adds	r3, #4
 8002d78:	66fb      	str	r3, [r7, #108]	; 0x6c
	pC->global_config__spad_enables_ref_0 =
		pC2->global_config__spad_enables_ref_0;
 8002d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d7c:	781a      	ldrb	r2, [r3, #0]
	pC->global_config__spad_enables_ref_0 =
 8002d7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d80:	701a      	strb	r2, [r3, #0]
	pC->global_config__spad_enables_ref_1 =
		pC2->global_config__spad_enables_ref_1;
 8002d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d84:	785a      	ldrb	r2, [r3, #1]
	pC->global_config__spad_enables_ref_1 =
 8002d86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d88:	705a      	strb	r2, [r3, #1]
	pC->global_config__spad_enables_ref_2 =
		pC2->global_config__spad_enables_ref_2;
 8002d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d8c:	789a      	ldrb	r2, [r3, #2]
	pC->global_config__spad_enables_ref_2 =
 8002d8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d90:	709a      	strb	r2, [r3, #2]
	pC->global_config__spad_enables_ref_3 =
		pC2->global_config__spad_enables_ref_3;
 8002d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d94:	78da      	ldrb	r2, [r3, #3]
	pC->global_config__spad_enables_ref_3 =
 8002d96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d98:	70da      	strb	r2, [r3, #3]
	pC->global_config__spad_enables_ref_4 =
		pC2->global_config__spad_enables_ref_4;
 8002d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d9c:	791a      	ldrb	r2, [r3, #4]
	pC->global_config__spad_enables_ref_4 =
 8002d9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002da0:	711a      	strb	r2, [r3, #4]
	pC->global_config__spad_enables_ref_5 =
		pC2->global_config__spad_enables_ref_5;
 8002da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da4:	795a      	ldrb	r2, [r3, #5]
	pC->global_config__spad_enables_ref_5 =
 8002da6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002da8:	715a      	strb	r2, [r3, #5]
	pC->global_config__ref_en_start_select =
		pC2->global_config__ref_en_start_select;
 8002daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dac:	799a      	ldrb	r2, [r3, #6]
	pC->global_config__ref_en_start_select =
 8002dae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002db0:	719a      	strb	r2, [r3, #6]
	pC->ref_spad_man__num_requested_ref_spads =
		pC2->ref_spad_man__num_requested_ref_spads;
 8002db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db4:	79da      	ldrb	r2, [r3, #7]
	pC->ref_spad_man__num_requested_ref_spads =
 8002db6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002db8:	71da      	strb	r2, [r3, #7]
	pC->ref_spad_man__ref_location =
		pC2->ref_spad_man__ref_location;
 8002dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dbc:	7a1a      	ldrb	r2, [r3, #8]
	pC->ref_spad_man__ref_location =
 8002dbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dc0:	721a      	strb	r2, [r3, #8]
	pC->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC2->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8002dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pC->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8002dc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dca:	821a      	strh	r2, [r3, #16]
	pC->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC2->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8002dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dce:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pC->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8002dd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dd4:	825a      	strh	r2, [r3, #18]
	pC->ref_spad_char__total_rate_target_mcps =
		pC2->ref_spad_char__total_rate_target_mcps;
 8002dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd8:	8a1a      	ldrh	r2, [r3, #16]
	pC->ref_spad_char__total_rate_target_mcps =
 8002dda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ddc:	829a      	strh	r2, [r3, #20]
	pC->algo__part_to_part_range_offset_mm =
		pC2->algo__part_to_part_range_offset_mm;
 8002dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002de0:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
	pC->algo__part_to_part_range_offset_mm =
 8002de4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002de6:	82da      	strh	r2, [r3, #22]
	pC->mm_config__inner_offset_mm =
		pC2->mm_config__inner_offset_mm;
 8002de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dea:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
	pC->mm_config__inner_offset_mm =
 8002dee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002df0:	831a      	strh	r2, [r3, #24]
	pC->mm_config__outer_offset_mm =
		pC2->mm_config__outer_offset_mm;
 8002df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df4:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
	pC->mm_config__outer_offset_mm =
 8002df8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dfa:	835a      	strh	r2, [r3, #26]

	pC->algo__crosstalk_compensation_plane_offset_kcps =
		(uint32_t)(
			pC2->algo__crosstalk_compensation_plane_offset_kcps);
 8002dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dfe:	895b      	ldrh	r3, [r3, #10]
		(uint32_t)(
 8002e00:	461a      	mov	r2, r3
	pC->algo__crosstalk_compensation_plane_offset_kcps =
 8002e02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e04:	60da      	str	r2, [r3, #12]
	LOG_FUNCTION_END(Status);
	return Status;
 8002e06:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3778      	adds	r7, #120	; 0x78
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8002e12:	b5b0      	push	{r4, r5, r7, lr}
 8002e14:	b088      	sub	sp, #32
 8002e16:	af04      	add	r7, sp, #16
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 8002e26:	2162      	movs	r1, #98	; 0x62
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f002 f9b1 	bl	8005190 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2200      	movs	r2, #0
 8002e32:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2201      	movs	r2, #1
 8002e38:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2201      	movs	r2, #1
 8002e44:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e52:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002e5a:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8002e62:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2264      	movs	r2, #100	; 0x64
 8002e68:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002e70:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	f240 72db 	movw	r2, #2011	; 0x7db
 8002e80:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f002 f967 	bl	8005158 <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8002e8a:	78fb      	ldrb	r3, [r7, #3]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d008      	beq.n	8002ea2 <VL53L1_data_init+0x90>
 8002e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d104      	bne.n	8002ea2 <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f857 	bl	8002f4c <VL53L1_read_p2p_data>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f001 fc97 	bl	80047dc <VL53L1_init_refspadchar_config_struct>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f001 fcb3 	bl	8004824 <VL53L1_init_ssc_config_struct>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	f103 0242 	add.w	r2, r3, #66	; 0x42
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	f001 fcc8 	bl	8004866 <VL53L1_init_xtalk_config_struct>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f001 fd22 	bl	800492a <VL53L1_init_offset_cal_config_struct>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	33a4      	adds	r3, #164	; 0xa4
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f001 fd42 	bl	8004978 <VL53L1_init_tuning_parm_storage_struct>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 8002ef8:	2120      	movs	r1, #32
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 fd6c 	bl	80039d8 <VL53L1_set_vhv_loopbound>
 8002f00:	4603      	mov	r3, r0
 8002f02:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 8002f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d116      	bne.n	8002f3a <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	7858      	ldrb	r0, [r3, #1]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	8b1c      	ldrh	r4, [r3, #24]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	689d      	ldr	r5, [r3, #8]
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	6912      	ldr	r2, [r2, #16]
 8002f20:	68b9      	ldr	r1, [r7, #8]
 8002f22:	6949      	ldr	r1, [r1, #20]
 8002f24:	9102      	str	r1, [sp, #8]
 8002f26:	9201      	str	r2, [sp, #4]
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	462b      	mov	r3, r5
 8002f2c:	4622      	mov	r2, r4
 8002f2e:	4601      	mov	r1, r0
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 fb83 	bl	800363c <VL53L1_set_preset_mode>
 8002f36:	4603      	mov	r3, r0
 8002f38:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f002 fe9f 	bl	8005c7e <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8002f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bdb0      	pop	{r4, r5, r7, pc}

08002f4c <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8002f54:	2300      	movs	r3, #0
 8002f56:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8002f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d108      	bne.n	8002f76 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f003 f8db 	bl	8006128 <VL53L1_get_static_nvm_managed>
 8002f72:	4603      	mov	r3, r0
 8002f74:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 8002f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d107      	bne.n	8002f8e <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	3342      	adds	r3, #66	; 0x42
 8002f82:	4619      	mov	r1, r3
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f003 fa0d 	bl	80063a4 <VL53L1_get_customer_nvm_managed>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 8002f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d115      	bne.n	8002fc2 <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f004 f8e6 	bl	8007170 <VL53L1_get_nvm_copy_data>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 8002fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d108      	bne.n	8002fc2 <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f503 72fd 	add.w	r2, r3, #506	; 0x1fa
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	33f0      	adds	r3, #240	; 0xf0
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	f002 fa4a 	bl	8005456 <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 8002fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d109      	bne.n	8002fde <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	21de      	movs	r1, #222	; 0xde
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f004 f9b6 	bl	8007346 <VL53L1_RdWord>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8002fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe8:	d204      	bcs.n	8002ff4 <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 8002ff0:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 8002ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d107      	bne.n	800300c <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	339e      	adds	r3, #158	; 0x9e
 8003000:	4619      	mov	r1, r3
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fa3c 	bl	8003480 <VL53L1_get_mode_mitigation_roi>
 8003008:	4603      	mov	r3, r0
 800300a:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d114      	bne.n	8003040 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10f      	bne.n	8003040 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 8003040:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <VL53L1_set_part_to_part_data>:


VL53L1_Error VL53L1_set_part_to_part_data(
	VL53L1_DEV                            Dev,
	VL53L1_calibration_data_t            *pcal_data)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
	/**
	 * Uses memcpy to copy input data to pdev->customer
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003056:	2300      	movs	r3, #0
 8003058:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	60fb      	str	r3, [r7, #12]

	uint32_t tempu32;

	LOG_FUNCTION_START("");

	if (pcal_data->struct_version !=
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a36      	ldr	r2, [pc, #216]	; (800313c <VL53L1_set_part_to_part_data+0xf0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d001      	beq.n	800306c <VL53L1_set_part_to_part_data+0x20>
		VL53L1_LL_CALIBRATION_DATA_STRUCT_VERSION) {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8003068:	23fc      	movs	r3, #252	; 0xfc
 800306a:	75fb      	strb	r3, [r7, #23]
	}

	if (status == VL53L1_ERROR_NONE) {
 800306c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d15d      	bne.n	8003130 <VL53L1_set_part_to_part_data+0xe4>

		/* memcpy(DEST, SRC, N)  */
		memcpy(
			&(pdev->customer),
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f103 0042 	add.w	r0, r3, #66	; 0x42
			&(pcal_data->customer),
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	3304      	adds	r3, #4
		memcpy(
 800307e:	2218      	movs	r2, #24
 8003080:	4619      	mov	r1, r3
 8003082:	f007 fb77 	bl	800a774 <memcpy>
			sizeof(VL53L1_customer_nvm_managed_t));

		/* memcpy(DEST, SRC, N)  */
		memcpy(
			&(pdev->add_off_cal_data),
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f103 0094 	add.w	r0, r3, #148	; 0x94
			&(pcal_data->add_off_cal_data),
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	331c      	adds	r3, #28
		memcpy(
 8003090:	2208      	movs	r2, #8
 8003092:	4619      	mov	r1, r3
 8003094:	f007 fb6e 	bl	800a774 <memcpy>
			sizeof(VL53L1_additional_offset_cal_data_t));

		/* memcpy(DEST, SRC, N)  */
		memcpy(
			&(pdev->gain_cal),
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	339c      	adds	r3, #156	; 0x9c
			&(pcal_data->gain_cal),
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	3226      	adds	r2, #38	; 0x26
 80030a0:	8812      	ldrh	r2, [r2, #0]
 80030a2:	b292      	uxth	r2, r2
		memcpy(
 80030a4:	801a      	strh	r2, [r3, #0]
			sizeof(VL53L1_gain_calibration_data_t));

		/* memcpy(DEST, SRC, N)  */
		memcpy(
			&(pdev->cal_peak_rate_map),
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f103 005a 	add.w	r0, r3, #90	; 0x5a
			&(pcal_data->cal_peak_rate_map),
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	3328      	adds	r3, #40	; 0x28
		memcpy(
 80030b0:	223a      	movs	r2, #58	; 0x3a
 80030b2:	4619      	mov	r1, r3
 80030b4:	f007 fb5e 	bl	800a774 <memcpy>
		/*
		 *  Update internal xtalk data structures
		 */

		pdev->xtalk_cfg.algo__crosstalk_compensation_plane_offset_kcps =
			pdev->customer.algo__crosstalk_compensation_plane_offset_kcps;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80030be:	461a      	mov	r2, r3
		pdev->xtalk_cfg.algo__crosstalk_compensation_plane_offset_kcps =
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		pdev->xtalk_cfg.algo__crosstalk_compensation_x_plane_gradient_kcps =
			pdev->customer.algo__crosstalk_compensation_x_plane_gradient_kcps;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	; 0x4e
		pdev->xtalk_cfg.algo__crosstalk_compensation_x_plane_gradient_kcps =
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
		pdev->xtalk_cfg.algo__crosstalk_compensation_y_plane_gradient_kcps =
			pdev->customer.algo__crosstalk_compensation_y_plane_gradient_kcps;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
		pdev->xtalk_cfg.algo__crosstalk_compensation_y_plane_gradient_kcps =
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132

		/* Assess and update customer packet xtalk parameters */

		if (pdev->xtalk_cfg.global_crosstalk_compensation_enable == 0x00) {
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10c      	bne.n	8003102 <VL53L1_set_part_to_part_data+0xb6>
			pdev->customer.algo__crosstalk_compensation_plane_offset_kcps =
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				0x00;
			pdev->customer.algo__crosstalk_compensation_x_plane_gradient_kcps =
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
				0x00;
			pdev->customer.algo__crosstalk_compensation_y_plane_gradient_kcps =
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8003100:	e016      	b.n	8003130 <VL53L1_set_part_to_part_data+0xe4>
				0x00;
		} else {
			tempu32 = VL53L1_calc_crosstalk_plane_offset_with_margin(
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	; 0x13e
 800310e:	4619      	mov	r1, r3
 8003110:	4610      	mov	r0, r2
 8003112:	f002 fc65 	bl	80059e0 <VL53L1_calc_crosstalk_plane_offset_with_margin>
 8003116:	6138      	str	r0, [r7, #16]
				pdev->xtalk_cfg.algo__crosstalk_compensation_plane_offset_kcps,
				pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps);
			if (tempu32 > 0xFFFF) {	/* clip to 16 bits */
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311e:	d302      	bcc.n	8003126 <VL53L1_set_part_to_part_data+0xda>
				tempu32 = 0xFFFF;
 8003120:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003124:	613b      	str	r3, [r7, #16]
			}
			pdev->customer.algo__crosstalk_compensation_plane_offset_kcps =
				(uint16_t)tempu32;
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	b29a      	uxth	r2, r3
			pdev->customer.algo__crosstalk_compensation_plane_offset_kcps =
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8003130:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	ecab0102 	.word	0xecab0102

08003140 <VL53L1_get_part_to_part_data>:


VL53L1_Error VL53L1_get_part_to_part_data(
	VL53L1_DEV                      Dev,
	VL53L1_calibration_data_t      *pcal_data)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
	/**
	 * Uses memcpy to copy pdev->customer to output data
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800314a:	2300      	movs	r3, #0
 800314c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pcal_data->struct_version =
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	4a25      	ldr	r2, [pc, #148]	; (80031ec <VL53L1_get_part_to_part_data+0xac>)
 8003156:	601a      	str	r2, [r3, #0]
			VL53L1_LL_CALIBRATION_DATA_STRUCT_VERSION;

	/* memcpy(DEST, SRC, N)  */
	memcpy(
		&(pcal_data->customer),
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	1d18      	adds	r0, r3, #4
		&(pdev->customer),
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	3342      	adds	r3, #66	; 0x42
	memcpy(
 8003160:	2218      	movs	r2, #24
 8003162:	4619      	mov	r1, r3
 8003164:	f007 fb06 	bl	800a774 <memcpy>
		sizeof(VL53L1_customer_nvm_managed_t));

	/* Overwrite Struct with xtalk config parameters */
	/* - customer struct versions are not golden copy */

	if (pdev->xtalk_cfg.algo__crosstalk_compensation_plane_offset_kcps > 0xFFFF) {
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800316e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003172:	d304      	bcc.n	800317e <VL53L1_get_part_to_part_data+0x3e>
		pcal_data->customer.algo__crosstalk_compensation_plane_offset_kcps =
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800317a:	81da      	strh	r2, [r3, #14]
 800317c:	e005      	b.n	800318a <VL53L1_get_part_to_part_data+0x4a>
			0xFFFF;
	} else {
		pcal_data->customer.algo__crosstalk_compensation_plane_offset_kcps =
			(uint16_t)pdev->xtalk_cfg.algo__crosstalk_compensation_plane_offset_kcps;
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8003184:	b29a      	uxth	r2, r3
		pcal_data->customer.algo__crosstalk_compensation_plane_offset_kcps =
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	81da      	strh	r2, [r3, #14]
	}
	pcal_data->customer.algo__crosstalk_compensation_x_plane_gradient_kcps =
		pdev->xtalk_cfg.algo__crosstalk_compensation_x_plane_gradient_kcps;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	f9b3 2130 	ldrsh.w	r2, [r3, #304]	; 0x130
	pcal_data->customer.algo__crosstalk_compensation_x_plane_gradient_kcps =
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	821a      	strh	r2, [r3, #16]
	pcal_data->customer.algo__crosstalk_compensation_y_plane_gradient_kcps =
		pdev->xtalk_cfg.algo__crosstalk_compensation_y_plane_gradient_kcps;
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f9b3 2132 	ldrsh.w	r2, [r3, #306]	; 0x132
	pcal_data->customer.algo__crosstalk_compensation_y_plane_gradient_kcps =
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	825a      	strh	r2, [r3, #18]

	/* memcpy(DEST, SRC, N)  */
	memcpy(
		&(pcal_data->add_off_cal_data),
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	f103 001c 	add.w	r0, r3, #28
		&(pdev->add_off_cal_data),
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	3394      	adds	r3, #148	; 0x94
	memcpy(
 80031a8:	2208      	movs	r2, #8
 80031aa:	4619      	mov	r1, r3
 80031ac:	f007 fae2 	bl	800a774 <memcpy>
		sizeof(VL53L1_additional_offset_cal_data_t));

	/* memcpy(DEST, SRC, N)  */
	memcpy(
		&(pcal_data->optical_centre),
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	3324      	adds	r3, #36	; 0x24
		&(pdev->optical_centre),
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	32a2      	adds	r2, #162	; 0xa2
 80031b8:	8812      	ldrh	r2, [r2, #0]
 80031ba:	b292      	uxth	r2, r2
	memcpy(
 80031bc:	801a      	strh	r2, [r3, #0]
		sizeof(VL53L1_optical_centre_t));

	/* memcpy(DEST, SRC, N)  */
	memcpy(
		&(pcal_data->gain_cal),
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	3326      	adds	r3, #38	; 0x26
		&(pdev->gain_cal),
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	329c      	adds	r2, #156	; 0x9c
 80031c6:	8812      	ldrh	r2, [r2, #0]
 80031c8:	b292      	uxth	r2, r2
	memcpy(
 80031ca:	801a      	strh	r2, [r3, #0]
		sizeof(VL53L1_gain_calibration_data_t));

	/* memcpy(DEST, SRC, N)  */
	memcpy(
		&(pcal_data->cal_peak_rate_map),
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	f103 0028 	add.w	r0, r3, #40	; 0x28
		&(pdev->cal_peak_rate_map),
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	335a      	adds	r3, #90	; 0x5a
	memcpy(
 80031d6:	223a      	movs	r2, #58	; 0x3a
 80031d8:	4619      	mov	r1, r3
 80031da:	f007 facb 	bl	800a774 <memcpy>
		sizeof(VL53L1_cal_peak_rate_map_t));

	LOG_FUNCTION_END(status);

	return status;
 80031de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	ecab0102 	.word	0xecab0102

080031f0 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80031fa:	2300      	movs	r3, #0
 80031fc:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800320c:	23f1      	movs	r3, #241	; 0xf1
 800320e:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 8003210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10c      	bne.n	8003232 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 8003224:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 8003232:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b088      	sub	sp, #32
 8003246:	af02      	add	r7, sp, #8
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003250:	2300      	movs	r3, #0
 8003252:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8003262:	23f1      	movs	r3, #241	; 0xf1
 8003264:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 8003266:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d11b      	bne.n	80032a6 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f8b3 115e 	ldrh.w	r1, [r3, #350]	; 0x15e
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
 8003292:	9201      	str	r2, [sp, #4]
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	460b      	mov	r3, r1
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	68b8      	ldr	r0, [r7, #8]
 800329e:	f002 fc20 	bl	8005ae2 <VL53L1_calc_timeout_register_values>
 80032a2:	4603      	mov	r3, r0
 80032a4:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 80032a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b088      	sub	sp, #32
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	607a      	str	r2, [r7, #4]
 80032be:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80032c0:	2300      	movs	r3, #0
 80032c2:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 80032cc:	2300      	movs	r3, #0
 80032ce:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80032da:	23f1      	movs	r3, #241	; 0xf1
 80032dc:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 80032de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d14a      	bne.n	800337c <VL53L1_get_timeouts_us+0xca>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
 80032f2:	4619      	mov	r1, r3
 80032f4:	4610      	mov	r0, r2
 80032f6:	f002 fa74 	bl	80057e2 <VL53L1_calc_macro_period_us>
 80032fa:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
			VL53L1_calc_timeout_us(
 8003302:	6979      	ldr	r1, [r7, #20]
 8003304:	4618      	mov	r0, r3
 8003306:	f002 fb2c 	bl	8005962 <VL53L1_calc_timeout_us>
 800330a:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
		timeout_encoded =
 8003316:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8003318:	8a7b      	ldrh	r3, [r7, #18]
 800331a:	021b      	lsls	r3, r3, #8
 800331c:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 8003324:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8003326:	4413      	add	r3, r2
 8003328:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800332a:	8a7b      	ldrh	r3, [r7, #18]
 800332c:	6979      	ldr	r1, [r7, #20]
 800332e:	4618      	mov	r0, r3
 8003330:	f002 fb7c 	bl	8005a2c <VL53L1_calc_decoded_timeout_us>
 8003334:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
		timeout_encoded =
 8003340:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8003342:	8a7b      	ldrh	r3, [r7, #18]
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800334e:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8003350:	4413      	add	r3, r2
 8003352:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8003354:	8a7b      	ldrh	r3, [r7, #18]
 8003356:	6979      	ldr	r1, [r7, #20]
 8003358:	4618      	mov	r0, r3
 800335a:	f002 fb67 	bl	8005a2c <VL53L1_calc_decoded_timeout_us>
 800335e:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 800337c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3720      	adds	r7, #32
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	460b      	mov	r3, r1
 8003392:	607a      	str	r2, [r7, #4]
 8003394:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003396:	2300      	movs	r3, #0
 8003398:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 800339e:	2301      	movs	r3, #1
 80033a0:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 80033a2:	7afb      	ldrb	r3, [r7, #11]
 80033a4:	2b07      	cmp	r3, #7
 80033a6:	d81c      	bhi.n	80033e2 <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 80033a8:	7afb      	ldrb	r3, [r7, #11]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d004      	beq.n	80033b8 <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 80033ae:	7afb      	ldrb	r3, [r7, #11]
 80033b0:	2201      	movs	r2, #1
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
		*pvalue =
 80033be:	7dbb      	ldrb	r3, [r7, #22]
 80033c0:	4013      	ands	r3, r2
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 80033c8:	7afb      	ldrb	r3, [r7, #11]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00b      	beq.n	80033e6 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	461a      	mov	r2, r3
 80033d4:	7afb      	ldrb	r3, [r7, #11]
 80033d6:	fa42 f303 	asr.w	r3, r2, r3
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	701a      	strb	r2, [r3, #0]
 80033e0:	e001      	b.n	80033e6 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 80033e2:	23fc      	movs	r3, #252	; 0xfc
 80033e4:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 80033e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	371c      	adds	r7, #28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b084      	sub	sp, #16
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003400:	2300      	movs	r3, #0
 8003402:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	7858      	ldrb	r0, [r3, #1]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	7819      	ldrb	r1, [r3, #0]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	f203 13c3 	addw	r3, r3, #451	; 0x1c3
 8003416:	461a      	mov	r2, r3
 8003418:	f002 fbdc 	bl	8005bd4 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	7898      	ldrb	r0, [r3, #2]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	78d9      	ldrb	r1, [r3, #3]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800342a:	461a      	mov	r2, r3
 800342c:	f002 fc11 	bl	8005c52 <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 8003430:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003446:	2300      	movs	r3, #0
 8003448:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f893 01c3 	ldrb.w	r0, [r3, #451]	; 0x1c3
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	3301      	adds	r3, #1
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	4619      	mov	r1, r3
 800345c:	f002 fd80 	bl	8005f60 <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	1c99      	adds	r1, r3, #2
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	3303      	adds	r3, #3
 800346e:	461a      	mov	r2, r3
 8003470:	f002 fbd7 	bl	8005c22 <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 8003474:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800348a:	2300      	movs	r3, #0
 800348c:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8003496:	2300      	movs	r3, #0
 8003498:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 800349a:	2300      	movs	r3, #0
 800349c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
 80034a4:	f107 020e 	add.w	r2, r7, #14
 80034a8:	f107 010d 	add.w	r1, r7, #13
 80034ac:	4618      	mov	r0, r3
 80034ae:	f002 fd57 	bl	8005f60 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 80034b2:	7bba      	ldrb	r2, [r7, #14]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 80034b8:	7b7a      	ldrb	r2, [r7, #13]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f893 322b 	ldrb.w	r3, [r3, #555]	; 0x22b
 80034c4:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	091b      	lsrs	r3, r3, #4
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 80034dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	607a      	str	r2, [r7, #4]
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	460b      	mov	r3, r1
 80034f6:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80034f8:	2300      	movs	r3, #0
 80034fa:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8003500:	7afb      	ldrb	r3, [r7, #11]
 8003502:	3b01      	subs	r3, #1
 8003504:	2b25      	cmp	r3, #37	; 0x25
 8003506:	f200 808e 	bhi.w	8003626 <VL53L1_get_preset_mode_timing_cfg+0x13e>
 800350a:	a201      	add	r2, pc, #4	; (adr r2, 8003510 <VL53L1_get_preset_mode_timing_cfg+0x28>)
 800350c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003510:	080035a9 	.word	0x080035a9
 8003514:	080035a9 	.word	0x080035a9
 8003518:	080035a9 	.word	0x080035a9
 800351c:	080035a9 	.word	0x080035a9
 8003520:	080035a9 	.word	0x080035a9
 8003524:	080035d3 	.word	0x080035d3
 8003528:	080035d3 	.word	0x080035d3
 800352c:	080035d3 	.word	0x080035d3
 8003530:	08003627 	.word	0x08003627
 8003534:	08003627 	.word	0x08003627
 8003538:	08003627 	.word	0x08003627
 800353c:	08003627 	.word	0x08003627
 8003540:	08003627 	.word	0x08003627
 8003544:	08003627 	.word	0x08003627
 8003548:	08003627 	.word	0x08003627
 800354c:	08003627 	.word	0x08003627
 8003550:	080035a9 	.word	0x080035a9
 8003554:	080035d3 	.word	0x080035d3
 8003558:	08003627 	.word	0x08003627
 800355c:	08003627 	.word	0x08003627
 8003560:	08003627 	.word	0x08003627
 8003564:	08003627 	.word	0x08003627
 8003568:	08003627 	.word	0x08003627
 800356c:	08003627 	.word	0x08003627
 8003570:	08003627 	.word	0x08003627
 8003574:	08003627 	.word	0x08003627
 8003578:	08003627 	.word	0x08003627
 800357c:	08003627 	.word	0x08003627
 8003580:	08003627 	.word	0x08003627
 8003584:	08003627 	.word	0x08003627
 8003588:	08003627 	.word	0x08003627
 800358c:	08003627 	.word	0x08003627
 8003590:	08003627 	.word	0x08003627
 8003594:	08003627 	.word	0x08003627
 8003598:	08003627 	.word	0x08003627
 800359c:	080035fd 	.word	0x080035fd
 80035a0:	080035fd 	.word	0x080035fd
 80035a4:	080035fd 	.word	0x080035fd
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
		*pmm_config_timeout_us =
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
		*prange_config_timeout_us =
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	601a      	str	r2, [r3, #0]
	break;
 80035d0:	e02c      	b.n	800362c <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
		*pmm_config_timeout_us =
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
		*prange_config_timeout_us =
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	601a      	str	r2, [r3, #0]
	break;
 80035fa:	e017      	b.n	800362c <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
		*pmm_config_timeout_us =
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
		*prange_config_timeout_us =
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	601a      	str	r2, [r3, #0]
	break;
 8003624:	e002      	b.n	800362c <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8003626:	23fc      	movs	r3, #252	; 0xfc
 8003628:	75fb      	strb	r3, [r7, #23]
		break;
 800362a:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800362c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003630:	4618      	mov	r0, r3
 8003632:	371c      	adds	r7, #28
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b092      	sub	sp, #72	; 0x48
 8003640:	af04      	add	r7, sp, #16
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	607b      	str	r3, [r7, #4]
 8003646:	460b      	mov	r3, r1
 8003648:	72fb      	strb	r3, [r7, #11]
 800364a:	4613      	mov	r3, r2
 800364c:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800364e:	2300      	movs	r3, #0
 8003650:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	633b      	str	r3, [r7, #48]	; 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8003658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800365e:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8003660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003662:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003666:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8003668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8003670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003672:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8003676:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8003678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800367e:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8003680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003682:	33a4      	adds	r3, #164	; 0xa4
 8003684:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 8003686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003688:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800368c:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	7afa      	ldrb	r2, [r7, #11]
 8003692:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8003694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003696:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003698:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 800369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800369e:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80036a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036a4:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 80036a6:	2103      	movs	r1, #3
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f001 fd71 	bl	8005190 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 80036ae:	7afb      	ldrb	r3, [r7, #11]
 80036b0:	3b01      	subs	r3, #1
 80036b2:	2b25      	cmp	r3, #37	; 0x25
 80036b4:	f200 810c 	bhi.w	80038d0 <VL53L1_set_preset_mode+0x294>
 80036b8:	a201      	add	r2, pc, #4	; (adr r2, 80036c0 <VL53L1_set_preset_mode+0x84>)
 80036ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036be:	bf00      	nop
 80036c0:	08003759 	.word	0x08003759
 80036c4:	08003775 	.word	0x08003775
 80036c8:	08003791 	.word	0x08003791
 80036cc:	080037ad 	.word	0x080037ad
 80036d0:	080037c9 	.word	0x080037c9
 80036d4:	080037e5 	.word	0x080037e5
 80036d8:	08003801 	.word	0x08003801
 80036dc:	0800381d 	.word	0x0800381d
 80036e0:	080038d1 	.word	0x080038d1
 80036e4:	080038d1 	.word	0x080038d1
 80036e8:	080038d1 	.word	0x080038d1
 80036ec:	080038d1 	.word	0x080038d1
 80036f0:	080038d1 	.word	0x080038d1
 80036f4:	080038d1 	.word	0x080038d1
 80036f8:	080038d1 	.word	0x080038d1
 80036fc:	080038d1 	.word	0x080038d1
 8003700:	08003839 	.word	0x08003839
 8003704:	08003855 	.word	0x08003855
 8003708:	080038d1 	.word	0x080038d1
 800370c:	080038d1 	.word	0x080038d1
 8003710:	080038d1 	.word	0x080038d1
 8003714:	080038d1 	.word	0x080038d1
 8003718:	080038d1 	.word	0x080038d1
 800371c:	080038d1 	.word	0x080038d1
 8003720:	080038d1 	.word	0x080038d1
 8003724:	080038d1 	.word	0x080038d1
 8003728:	080038d1 	.word	0x080038d1
 800372c:	080038d1 	.word	0x080038d1
 8003730:	080038d1 	.word	0x080038d1
 8003734:	080038d1 	.word	0x080038d1
 8003738:	080038d1 	.word	0x080038d1
 800373c:	080038d1 	.word	0x080038d1
 8003740:	080038d1 	.word	0x080038d1
 8003744:	080038d1 	.word	0x080038d1
 8003748:	080038d1 	.word	0x080038d1
 800374c:	08003871 	.word	0x08003871
 8003750:	08003891 	.word	0x08003891
 8003754:	080038b1 	.word	0x080038b1

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	9301      	str	r3, [sp, #4]
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003764:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003766:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003768:	f001 f994 	bl	8004a94 <VL53L1_preset_mode_standard_ranging>
 800376c:	4603      	mov	r3, r0
 800376e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8003772:	e0b1      	b.n	80038d8 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	9301      	str	r3, [sp, #4]
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003782:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003784:	f001 faa4 	bl	8004cd0 <VL53L1_preset_mode_standard_ranging_short_range>
 8003788:	4603      	mov	r3, r0
 800378a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800378e:	e0a3      	b.n	80038d8 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	9301      	str	r3, [sp, #4]
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800379c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800379e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80037a0:	f001 fad7 	bl	8004d52 <VL53L1_preset_mode_standard_ranging_long_range>
 80037a4:	4603      	mov	r3, r0
 80037a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80037aa:	e095      	b.n	80038d8 <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	9301      	str	r3, [sp, #4]
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80037bc:	f001 fb0a 	bl	8004dd4 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80037c6:	e087      	b.n	80038d8 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	9301      	str	r3, [sp, #4]
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80037d8:	f001 fb21 	bl	8004e1e <VL53L1_preset_mode_standard_ranging_mm2_cal>
 80037dc:	4603      	mov	r3, r0
 80037de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80037e2:	e079      	b.n	80038d8 <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	9301      	str	r3, [sp, #4]
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80037f4:	f001 fb38 	bl	8004e68 <VL53L1_preset_mode_timed_ranging>
 80037f8:	4603      	mov	r3, r0
 80037fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80037fe:	e06b      	b.n	80038d8 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	9301      	str	r3, [sp, #4]
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800380c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800380e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003810:	f001 fb64 	bl	8004edc <VL53L1_preset_mode_timed_ranging_short_range>
 8003814:	4603      	mov	r3, r0
 8003816:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800381a:	e05d      	b.n	80038d8 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	9301      	str	r3, [sp, #4]
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800382a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800382c:	f001 fb90 	bl	8004f50 <VL53L1_preset_mode_timed_ranging_long_range>
 8003830:	4603      	mov	r3, r0
 8003832:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8003836:	e04f      	b.n	80038d8 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	9301      	str	r3, [sp, #4]
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003844:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003846:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003848:	f001 fc64 	bl	8005114 <VL53L1_preset_mode_olt>
 800384c:	4603      	mov	r3, r0
 800384e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8003852:	e041      	b.n	80038d8 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	9301      	str	r3, [sp, #4]
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003860:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003862:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003864:	f001 fc20 	bl	80050a8 <VL53L1_preset_mode_singleshot_ranging>
 8003868:	4603      	mov	r3, r0
 800386a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800386e:	e033      	b.n	80038d8 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	9302      	str	r3, [sp, #8]
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	9301      	str	r3, [sp, #4]
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003882:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003884:	f001 fbc4 	bl	8005010 <VL53L1_preset_mode_low_power_auto_short_ranging>
 8003888:	4603      	mov	r3, r0
 800388a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800388e:	e023      	b.n	80038d8 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	9302      	str	r3, [sp, #8]
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	9301      	str	r3, [sp, #4]
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80038a4:	f001 fb8e 	bl	8004fc4 <VL53L1_preset_mode_low_power_auto_ranging>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 80038ae:	e013      	b.n	80038d8 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	9302      	str	r3, [sp, #8]
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	9301      	str	r3, [sp, #4]
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80038c4:	f001 fbca 	bl	800505c <VL53L1_preset_mode_low_power_auto_long_ranging>
 80038c8:	4603      	mov	r3, r0
 80038ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 80038ce:	e003      	b.n	80038d8 <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 80038d0:	23fc      	movs	r3, #252	; 0xfc
 80038d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 80038d6:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 80038d8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d105      	bne.n	80038ec <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 80038e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e2:	893a      	ldrh	r2, [r7, #8]
 80038e4:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 80038e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e8:	893a      	ldrh	r2, [r7, #8]
 80038ea:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 80038ec:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d108      	bne.n	8003906 <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 80038f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038f8:	6879      	ldr	r1, [r7, #4]
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f7ff fca1 	bl	8003242 <VL53L1_set_timeouts_us>
 8003900:	4603      	mov	r3, r0
 8003902:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 8003906:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800390a:	2b00      	cmp	r3, #0
 800390c:	d106      	bne.n	800391c <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 800390e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f7ff fc6d 	bl	80031f0 <VL53L1_set_inter_measurement_period_ms>
 8003916:	4603      	mov	r3, r0
 8003918:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 800391c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8003920:	4618      	mov	r0, r3
 8003922:	3738      	adds	r7, #56	; 0x38
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003932:	2300      	movs	r3, #0
 8003934:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	; 0x1a6
	*plite_sigma =
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8003944:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8003948:	4618      	mov	r0, r3
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	460b      	mov	r3, r1
 800395e:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003960:	2300      	movs	r3, #0
 8003962:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	887a      	ldrh	r2, [r7, #2]
 800396c:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 8003970:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8003974:	4618      	mov	r0, r3
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800398a:	2300      	movs	r3, #0
 800398c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	; 0x1a8
	*plite_mincountrate =
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800399c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80039b8:	2300      	movs	r3, #0
 80039ba:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	887a      	ldrh	r2, [r7, #2]
 80039c4:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 80039c8:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80039e4:	2300      	movs	r3, #0
 80039e6:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	78fb      	ldrb	r3, [r7, #3]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	4413      	add	r3, r2
 8003a00:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 8003a08:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b0d0      	sub	sp, #320	; 0x140
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	1d3b      	adds	r3, r7, #4
 8003a20:	6018      	str	r0, [r3, #0]
 8003a22:	4608      	mov	r0, r1
 8003a24:	4611      	mov	r1, r2
 8003a26:	1cfb      	adds	r3, r7, #3
 8003a28:	4602      	mov	r2, r0
 8003a2a:	701a      	strb	r2, [r3, #0]
 8003a2c:	1cbb      	adds	r3, r7, #2
 8003a2e:	460a      	mov	r2, r1
 8003a30:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003a32:	2300      	movs	r3, #0
 8003a34:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003a38:	1d3b      	adds	r3, r7, #4
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8003a40:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003a44:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8003a48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8003a4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003a50:	3342      	adds	r3, #66	; 0x42
 8003a52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8003a56:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003a5a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8003a5e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8003a62:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003a66:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003a6a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8003a6e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003a72:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8003a76:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8003a7a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003a7e:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8003a82:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8003a86:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003a8a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8003a8e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8003a92:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003a96:	332c      	adds	r3, #44	; 0x2c
 8003a98:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8003a9c:	f107 030c 	add.w	r3, r7, #12
 8003aa0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint16_t i                          = 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	uint16_t i2c_index                  = 0;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 8003abc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003ac0:	1cfa      	adds	r2, r7, #3
 8003ac2:	7812      	ldrb	r2, [r2, #0]
 8003ac4:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 8003ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aca:	791b      	ldrb	r3, [r3, #4]
 8003acc:	b25b      	sxtb	r3, r3
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8003ad4:	1cfb      	adds	r3, r7, #3
 8003ad6:	f993 3000 	ldrsb.w	r3, [r3]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	b25b      	sxtb	r3, r3
 8003ade:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8003ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ae4:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8003ae6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003aea:	f8b3 2142 	ldrh.w	r2, [r3, #322]	; 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8003aee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003af2:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 8003af6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003afa:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8003afe:	2bff      	cmp	r3, #255	; 0xff
 8003b00:	d104      	bne.n	8003b0c <VL53L1_init_and_start_range+0xf4>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8003b02:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8003b0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003b10:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d133      	bne.n	8003b80 <VL53L1_init_and_start_range+0x168>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8003b18:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003b1c:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d12d      	bne.n	8003b80 <VL53L1_init_and_start_range+0x168>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8003b24:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003b28:	f893 2186 	ldrb.w	r2, [r3, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 8003b2c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003b30:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8003b34:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003b38:	2220      	movs	r2, #32
 8003b3a:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 8003b3e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003b42:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8003b46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10c      	bne.n	8003b68 <VL53L1_init_and_start_range+0x150>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 8003b4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003b52:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 8003b5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003b62:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003b66:	e004      	b.n	8003b72 <VL53L1_init_and_start_range+0x15a>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 8003b68:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 8003b72:	1cbb      	adds	r3, r7, #2
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d802      	bhi.n	8003b80 <VL53L1_init_and_start_range+0x168>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8003b7a:	1cbb      	adds	r3, r7, #2
 8003b7c:	2205      	movs	r2, #5
 8003b7e:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8003b80:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003b84:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d110      	bne.n	8003bae <VL53L1_init_and_start_range+0x196>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8003b8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003b90:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d10a      	bne.n	8003bae <VL53L1_init_and_start_range+0x196>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8003b98:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003b9c:	f893 22e7 	ldrb.w	r2, [r3, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 8003ba0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003ba4:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8003ba8:	1cbb      	adds	r3, r7, #2
 8003baa:	2206      	movs	r2, #6
 8003bac:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 8003bae:	1cbb      	adds	r3, r7, #2
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	2b05      	cmp	r3, #5
 8003bb6:	d827      	bhi.n	8003c08 <VL53L1_init_and_start_range+0x1f0>
 8003bb8:	a201      	add	r2, pc, #4	; (adr r2, 8003bc0 <VL53L1_init_and_start_range+0x1a8>)
 8003bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbe:	bf00      	nop
 8003bc0:	08003c01 	.word	0x08003c01
 8003bc4:	08003bf9 	.word	0x08003bf9
 8003bc8:	08003bf1 	.word	0x08003bf1
 8003bcc:	08003be9 	.word	0x08003be9
 8003bd0:	08003be1 	.word	0x08003be1
 8003bd4:	08003bd9 	.word	0x08003bd9
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8003bde:	e017      	b.n	8003c10 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8003be0:	230d      	movs	r3, #13
 8003be2:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8003be6:	e013      	b.n	8003c10 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 8003be8:	2324      	movs	r3, #36	; 0x24
 8003bea:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8003bee:	e00f      	b.n	8003c10 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8003bf0:	2344      	movs	r3, #68	; 0x44
 8003bf2:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8003bf6:	e00b      	b.n	8003c10 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 8003bf8:	235a      	movs	r3, #90	; 0x5a
 8003bfa:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8003bfe:	e007      	b.n	8003c10 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8003c00:	2371      	movs	r3, #113	; 0x71
 8003c02:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8003c06:	e003      	b.n	8003c10 <VL53L1_init_and_start_range+0x1f8>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 8003c08:	2383      	movs	r3, #131	; 0x83
 8003c0a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8003c0e:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 8003c10:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8003c14:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 8003c18:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 8003c1c:	f107 030c 	add.w	r3, r7, #12
 8003c20:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 8003c24:	2300      	movs	r3, #0
 8003c26:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 8003c2a:	e00b      	b.n	8003c44 <VL53L1_init_and_start_range+0x22c>
		*pbuffer++ = 0;
 8003c2c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8003c36:	2200      	movs	r2, #0
 8003c38:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 8003c3a:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8003c3e:	3301      	adds	r3, #1
 8003c40:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 8003c44:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 8003c48:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d3ed      	bcc.n	8003c2c <VL53L1_init_and_start_range+0x214>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8003c50:	1cbb      	adds	r3, r7, #2
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b05      	cmp	r3, #5
 8003c56:	d917      	bls.n	8003c88 <VL53L1_init_and_start_range+0x270>
 8003c58:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d113      	bne.n	8003c88 <VL53L1_init_and_start_range+0x270>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8003c60:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8003c64:	f1c3 0301 	rsb	r3, r3, #1
 8003c68:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8003c6c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 8003c70:	f107 020c 	add.w	r2, r7, #12
 8003c74:	4413      	add	r3, r2
 8003c76:	461a      	mov	r2, r3
 8003c78:	210b      	movs	r1, #11
 8003c7a:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8003c7e:	f002 f99e 	bl	8005fbe <VL53L1_i2c_encode_static_nvm_managed>
 8003c82:	4603      	mov	r3, r0
 8003c84:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8003c88:	1cbb      	adds	r3, r7, #2
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d917      	bls.n	8003cc0 <VL53L1_init_and_start_range+0x2a8>
 8003c90:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d113      	bne.n	8003cc0 <VL53L1_init_and_start_range+0x2a8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8003c98:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8003c9c:	f1c3 030d 	rsb	r3, r3, #13
 8003ca0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8003ca4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 8003ca8:	f107 020c 	add.w	r2, r7, #12
 8003cac:	4413      	add	r3, r2
 8003cae:	461a      	mov	r2, r3
 8003cb0:	2117      	movs	r1, #23
 8003cb2:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8003cb6:	f002 fa5e 	bl	8006176 <VL53L1_i2c_encode_customer_nvm_managed>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8003cc0:	1cbb      	adds	r3, r7, #2
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b03      	cmp	r3, #3
 8003cc6:	d917      	bls.n	8003cf8 <VL53L1_init_and_start_range+0x2e0>
 8003cc8:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d113      	bne.n	8003cf8 <VL53L1_init_and_start_range+0x2e0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8003cd0:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8003cd4:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8003cd8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8003cdc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 8003ce0:	f107 020c 	add.w	r2, r7, #12
 8003ce4:	4413      	add	r3, r2
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	2120      	movs	r1, #32
 8003cea:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8003cee:	f002 fb80 	bl	80063f2 <VL53L1_i2c_encode_static_config>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8003cf8:	1cbb      	adds	r3, r7, #2
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d917      	bls.n	8003d30 <VL53L1_init_and_start_range+0x318>
 8003d00:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d113      	bne.n	8003d30 <VL53L1_init_and_start_range+0x318>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8003d08:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8003d0c:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 8003d10:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8003d14:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 8003d18:	f107 020c 	add.w	r2, r7, #12
 8003d1c:	4413      	add	r3, r2
 8003d1e:	461a      	mov	r2, r3
 8003d20:	2116      	movs	r1, #22
 8003d22:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8003d26:	f002 fc47 	bl	80065b8 <VL53L1_i2c_encode_general_config>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8003d30:	1cbb      	adds	r3, r7, #2
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d917      	bls.n	8003d68 <VL53L1_init_and_start_range+0x350>
 8003d38:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d113      	bne.n	8003d68 <VL53L1_init_and_start_range+0x350>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8003d40:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8003d44:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8003d48:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8003d4c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 8003d50:	f107 020c 	add.w	r2, r7, #12
 8003d54:	4413      	add	r3, r2
 8003d56:	461a      	mov	r2, r3
 8003d58:	2117      	movs	r1, #23
 8003d5a:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8003d5e:	f002 fcaf 	bl	80066c0 <VL53L1_i2c_encode_timing_config>
 8003d62:	4603      	mov	r3, r0
 8003d64:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8003d68:	1cbb      	adds	r3, r7, #2
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d036      	beq.n	8003dde <VL53L1_init_and_start_range+0x3c6>
 8003d70:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d132      	bne.n	8003dde <VL53L1_init_and_start_range+0x3c6>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8003d78:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8003d7c:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 8003d80:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 8003d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d88:	791b      	ldrb	r3, [r3, #4]
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d017      	beq.n	8003dc2 <VL53L1_init_and_start_range+0x3aa>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 8003d92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003d96:	789b      	ldrb	r3, [r3, #2]
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003da2:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 8003da4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003da8:	789b      	ldrb	r3, [r3, #2]
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003db4:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 8003db6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003dba:	789a      	ldrb	r2, [r3, #2]
 8003dbc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003dc0:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8003dc2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 8003dc6:	f107 020c 	add.w	r2, r7, #12
 8003dca:	4413      	add	r3, r2
 8003dcc:	461a      	mov	r2, r3
 8003dce:	2112      	movs	r1, #18
 8003dd0:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8003dd4:	f002 fcf6 	bl	80067c4 <VL53L1_i2c_encode_dynamic_config>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 8003dde:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d113      	bne.n	8003e0e <VL53L1_init_and_start_range+0x3f6>

		i2c_buffer_offset_bytes = \
 8003de6:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8003dea:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 8003dee:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8003df2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 8003df6:	f107 020c 	add.w	r2, r7, #12
 8003dfa:	4413      	add	r3, r2
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	2105      	movs	r1, #5
 8003e00:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8003e04:	f002 fd63 	bl	80068ce <VL53L1_i2c_encode_system_control>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 8003e0e:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10c      	bne.n	8003e30 <VL53L1_init_and_start_range+0x418>
		status =
			VL53L1_WriteMulti(
 8003e16:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8003e1a:	f107 020c 	add.w	r2, r7, #12
 8003e1e:	f8b7 1134 	ldrh.w	r1, [r7, #308]	; 0x134
 8003e22:	1d38      	adds	r0, r7, #4
 8003e24:	6800      	ldr	r0, [r0, #0]
 8003e26:	f003 fa27 	bl	8007278 <VL53L1_WriteMulti>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 8003e30:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d106      	bne.n	8003e46 <VL53L1_init_and_start_range+0x42e>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 8003e38:	1d3b      	adds	r3, r7, #4
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	f001 f9d2 	bl	80051e4 <VL53L1_update_ll_driver_rd_state>
 8003e40:	4603      	mov	r3, r0
 8003e42:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	if (status == VL53L1_ERROR_NONE)
 8003e46:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <VL53L1_init_and_start_range+0x444>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 8003e4e:	1d3b      	adds	r3, r7, #4
 8003e50:	6818      	ldr	r0, [r3, #0]
 8003e52:	f001 fa9a 	bl	800538a <VL53L1_update_ll_driver_cfg_state>
 8003e56:	4603      	mov	r3, r0
 8003e58:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	LOG_FUNCTION_END(status);

	return status;
 8003e5c:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop

08003e6c <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
	/*
	 * Stops any in process range using the ABORT command
	 * Also clears all of the measurement mode bits
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003e74:	2300      	movs	r3, #0
 8003e76:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev =
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	/* Merge ABORT mode with mode_start */

	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8003e82:	b25b      	sxtb	r3, r3
 8003e84:	f003 030f 	and.w	r3, r3, #15
 8003e88:	b25b      	sxtb	r3, r3
 8003e8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e8e:	b25b      	sxtb	r3, r3
 8003e90:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f002 fd4f 	bl	8006944 <VL53L1_set_system_control>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	73fb      	strb	r3, [r7, #15]
				Dev,
				&pdev->sys_ctrl);

	/* Abort bit is auto clear so clear register group structure to match */
	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc

	/* reset zone dynamic info */
	VL53L1_init_ll_driver_state(
 8003ebc:	2103      	movs	r1, #3
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f001 f966 	bl	8005190 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* reset low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d102      	bne.n	8003ed4 <VL53L1_stop_range+0x68>
		VL53L1_low_power_auto_data_stop_range(Dev);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f001 ff09 	bl	8005ce6 <VL53L1_low_power_auto_data_stop_range>

	return status;
 8003ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b0c8      	sub	sp, #288	; 0x120
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	1d3b      	adds	r3, r7, #4
 8003ee8:	6018      	str	r0, [r3, #0]
 8003eea:	460a      	mov	r2, r1
 8003eec:	1cfb      	adds	r3, r7, #3
 8003eee:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003ef6:	1d3b      	adds	r3, r7, #4
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 8003efe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003f02:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 8003f06:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 8003f0a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003f0e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003f12:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8003f16:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003f1a:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8003f1e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 8003f22:	2388      	movs	r3, #136	; 0x88
 8003f24:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 8003f34:	1cfb      	adds	r3, r7, #3
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d008      	beq.n	8003f4e <VL53L1_get_measurement_results+0x6e>
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d10d      	bne.n	8003f5c <VL53L1_get_measurement_results+0x7c>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8003f40:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8003f44:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 8003f48:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8003f4c:	e00a      	b.n	8003f64 <VL53L1_get_measurement_results+0x84>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 8003f4e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8003f52:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 8003f56:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8003f5a:	e003      	b.n	8003f64 <VL53L1_get_measurement_results+0x84>
	default:
		i2c_buffer_size_bytes =
 8003f5c:	232c      	movs	r3, #44	; 0x2c
 8003f5e:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8003f62:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8003f64:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10c      	bne.n	8003f86 <VL53L1_get_measurement_results+0xa6>
		status =
			VL53L1_ReadMulti(
 8003f6c:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8003f70:	f107 0208 	add.w	r2, r7, #8
 8003f74:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 8003f78:	1d38      	adds	r0, r7, #4
 8003f7a:	6800      	ldr	r0, [r0, #0]
 8003f7c:	f003 f99f 	bl	80072be <VL53L1_ReadMulti>
 8003f80:	4603      	mov	r3, r0
 8003f82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8003f86:	1cfb      	adds	r3, r7, #3
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d917      	bls.n	8003fbe <VL53L1_get_measurement_results+0xde>
 8003f8e:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d113      	bne.n	8003fbe <VL53L1_get_measurement_results+0xde>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8003f96:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8003f9a:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 8003f9e:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8003fa2:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 8003fa6:	f107 0208 	add.w	r2, r7, #8
 8003faa:	4413      	add	r3, r2
 8003fac:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	2038      	movs	r0, #56	; 0x38
 8003fb4:	f002 fe44 	bl	8006c40 <VL53L1_i2c_decode_debug_results>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8003fbe:	1cfb      	adds	r3, r7, #3
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d017      	beq.n	8003ff6 <VL53L1_get_measurement_results+0x116>
 8003fc6:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d113      	bne.n	8003ff6 <VL53L1_get_measurement_results+0x116>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8003fce:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8003fd2:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8003fd6:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8003fda:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 8003fde:	f107 0208 	add.w	r2, r7, #8
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8003fe8:	4619      	mov	r1, r3
 8003fea:	2021      	movs	r0, #33	; 0x21
 8003fec:	f002 fdc7 	bl	8006b7e <VL53L1_i2c_decode_core_results>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 8003ff6:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d110      	bne.n	8004020 <VL53L1_get_measurement_results+0x140>

		i2c_buffer_offset_bytes = 0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8004004:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 8004008:	f107 0208 	add.w	r2, r7, #8
 800400c:	4413      	add	r3, r2
 800400e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004012:	4619      	mov	r1, r3
 8004014:	202c      	movs	r0, #44	; 0x2c
 8004016:	f002 fcbc 	bl	8006992 <VL53L1_i2c_decode_system_results>
 800401a:	4603      	mov	r3, r0
 800401c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8004020:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 8004024:	4618      	mov	r0, r3
 8004026:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b088      	sub	sp, #32
 8004032:	af00      	add	r7, sp, #0
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	460b      	mov	r3, r1
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800403c:	2300      	movs	r3, #0
 800403e:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800404a:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8004050:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d106      	bne.n	8004066 <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 8004058:	7afb      	ldrb	r3, [r7, #11]
 800405a:	4619      	mov	r1, r3
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f7ff ff3f 	bl	8003ee0 <VL53L1_get_measurement_results>
 8004062:	4603      	mov	r3, r0
 8004064:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 8004066:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10c      	bne.n	8004088 <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 8004074:	4618      	mov	r0, r3
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	f503 71e7 	add.w	r1, r3, #462	; 0x1ce
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	f503 7222 	add.w	r2, r3, #648	; 0x288
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f000 f86c 	bl	8004160 <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800408e:	2b01      	cmp	r3, #1
 8004090:	d12d      	bne.n	80040ee <VL53L1_get_device_results+0xc0>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 8004092:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10e      	bne.n	80040b8 <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d109      	bne.n	80040b8 <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f001 fe78 	bl	8005d9a <VL53L1_low_power_auto_setup_manual_calibration>
 80040aa:	4603      	mov	r3, r0
 80040ac:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 80040b6:	e00c      	b.n	80040d2 <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 80040b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d108      	bne.n	80040d2 <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d103      	bne.n	80040d2 <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	2202      	movs	r2, #2
 80040ce:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
		}

		/* perform DSS calculation. This can be performed every range */
		if ((pdev->low_power_auto_data.low_power_auto_range_count != 0xFF) &&
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 80040d8:	2bff      	cmp	r3, #255	; 0xff
 80040da:	d008      	beq.n	80040ee <VL53L1_get_device_results+0xc0>
 80040dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d104      	bne.n	80040ee <VL53L1_get_device_results+0xc0>
			(status == VL53L1_ERROR_NONE)) {
			status = VL53L1_low_power_auto_update_DSS(
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f001 fe9d 	bl	8005e24 <VL53L1_low_power_auto_update_DSS>
 80040ea:	4603      	mov	r3, r0
 80040ec:	77fb      	strb	r3, [r7, #31]
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 8004102:	2284      	movs	r2, #132	; 0x84
 8004104:	6939      	ldr	r1, [r7, #16]
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f006 fb34 	bl	800a774 <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 800410c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d104      	bne.n	800411e <VL53L1_get_device_results+0xf0>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f001 f8ed 	bl	80052f4 <VL53L1_check_ll_driver_rd_state>
 800411a:	4603      	mov	r3, r0
 800411c:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800411e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3720      	adds	r7, #32
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	460b      	mov	r3, r1
 8004134:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004136:	2300      	movs	r3, #0
 8004138:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800413a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d107      	bne.n	8004152 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 8004142:	78fb      	ldrb	r3, [r7, #3]
 8004144:	2203      	movs	r2, #3
 8004146:	4619      	mov	r1, r3
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7ff fc65 	bl	8003a18 <VL53L1_init_and_start_range>
 800414e:	4603      	mov	r3, r0
 8004150:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8004152:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
	...

08004160 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8004160:	b480      	push	{r7}
 8004162:	b089      	sub	sp, #36	; 0x24
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 800416e:	2300      	movs	r3, #0
 8004170:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 8004172:	2300      	movs	r3, #0
 8004174:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	78da      	ldrb	r2, [r3, #3]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	3304      	adds	r3, #4
 8004186:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 8004188:	2300      	movs	r3, #0
 800418a:	77fb      	strb	r3, [r7, #31]
 800418c:	e0d0      	b.n	8004330 <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	7ffa      	ldrb	r2, [r7, #31]
 8004192:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	2200      	movs	r2, #0
 8004198:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	78db      	ldrb	r3, [r3, #3]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10a      	bne.n	80041b8 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	785b      	ldrb	r3, [r3, #1]
 80041a6:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 80041aa:	2b09      	cmp	r3, #9
 80041ac:	d104      	bne.n	80041b8 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	2213      	movs	r2, #19
 80041b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041b6:	e007      	b.n	80041c8 <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	785b      	ldrb	r3, [r3, #1]
 80041bc:	f003 031f 	and.w	r3, r3, #31
 80041c0:	b2da      	uxtb	r2, r3
			pdata->range_status =
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		}

		switch (i) {
 80041c8:	7ffb      	ldrb	r3, [r7, #31]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d05d      	beq.n	800428e <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 80041d2:	e0a7      	b.n	8004324 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	789b      	ldrb	r3, [r3, #2]
 80041d8:	2b07      	cmp	r3, #7
 80041da:	d104      	bne.n	80041e6 <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	821a      	strh	r2, [r3, #16]
 80041e4:	e00c      	b.n	8004200 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	789b      	ldrb	r3, [r3, #2]
 80041ea:	2b08      	cmp	r3, #8
 80041ec:	d104      	bne.n	80041f8 <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	821a      	strh	r2, [r3, #16]
 80041f6:	e003      	b.n	8004200 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	85da      	strh	r2, [r3, #46]	; 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	895b      	ldrh	r3, [r3, #10]
 800421c:	015b      	lsls	r3, r3, #5
 800421e:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004226:	d302      	bcc.n	800422e <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 8004228:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800422c:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	b29a      	uxth	r2, r3
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 8004242:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	fb02 f303 	mul.w	r3, r2, r3
 800424c:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004254:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	2b00      	cmp	r3, #0
 800425a:	da01      	bge.n	8004260 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 800425c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8004260:	12db      	asrs	r3, r3, #11
 8004262:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	b21a      	sxth	r2, r3
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	621a      	str	r2, [r3, #32]

			break;
 800428c:	e04a      	b.n	8004324 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042a4:	85da      	strh	r2, [r3, #46]	; 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	8bdb      	ldrh	r3, [r3, #30]
 80042b2:	015b      	lsls	r3, r3, #5
 80042b4:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042bc:	d302      	bcc.n	80042c4 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 80042be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042c2:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm =
 80042d8:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	fb02 f303 	mul.w	r3, r2, r3
 80042e2:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042ea:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	da01      	bge.n	80042f6 <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 80042f2:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80042f6:	12db      	asrs	r3, r3, #11
 80042f8:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	b21a      	sxth	r2, r3
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	621a      	str	r2, [r3, #32]

			break;
 8004322:	bf00      	nop
		}

		pdata++;
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	3340      	adds	r3, #64	; 0x40
 8004328:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 800432a:	7ffb      	ldrb	r3, [r7, #31]
 800432c:	3301      	adds	r3, #1
 800432e:	77fb      	strb	r3, [r7, #31]
 8004330:	7ffb      	ldrb	r3, [r7, #31]
 8004332:	2b01      	cmp	r3, #1
 8004334:	f67f af2b 	bls.w	800418e <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2200      	movs	r2, #0
 800433c:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	785b      	ldrb	r3, [r3, #1]
 8004342:	f003 031f 	and.w	r3, r3, #31
 8004346:	2b11      	cmp	r3, #17
 8004348:	bf8c      	ite	hi
 800434a:	2201      	movhi	r2, #1
 800434c:	2200      	movls	r2, #0
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	2a00      	cmp	r2, #0
 8004352:	d116      	bne.n	8004382 <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
 8004354:	2201      	movs	r2, #1
 8004356:	409a      	lsls	r2, r3
 8004358:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <VL53L1_copy_sys_and_core_results_to_range_results+0x230>)
 800435a:	4013      	ands	r3, r2
 800435c:	2b00      	cmp	r3, #0
 800435e:	bf14      	ite	ne
 8004360:	2301      	movne	r3, #1
 8004362:	2300      	moveq	r3, #0
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00b      	beq.n	8004382 <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	785b      	ldrb	r3, [r3, #1]
 800436e:	f003 031f 	and.w	r3, r3, #31
 8004372:	b2da      	uxtb	r2, r3
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	break;
 8004380:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8004382:	bf00      	nop
 8004384:	3724      	adds	r7, #36	; 0x24
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	0002200e 	.word	0x0002200e

08004394 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	460b      	mov	r3, r1
 800439e:	607a      	str	r2, [r7, #4]
 80043a0:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80043a2:	2300      	movs	r3, #0
 80043a4:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 80043aa:	897b      	ldrh	r3, [r7, #10]
 80043ac:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80043b0:	2b38      	cmp	r3, #56	; 0x38
 80043b2:	f200 8204 	bhi.w	80047be <VL53L1_get_tuning_parm+0x42a>
 80043b6:	a201      	add	r2, pc, #4	; (adr r2, 80043bc <VL53L1_get_tuning_parm+0x28>)
 80043b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043bc:	080044a1 	.word	0x080044a1
 80043c0:	080044af 	.word	0x080044af
 80043c4:	080044bd 	.word	0x080044bd
 80043c8:	080044cb 	.word	0x080044cb
 80043cc:	080044d9 	.word	0x080044d9
 80043d0:	080044e7 	.word	0x080044e7
 80043d4:	080044f5 	.word	0x080044f5
 80043d8:	08004503 	.word	0x08004503
 80043dc:	08004511 	.word	0x08004511
 80043e0:	0800451f 	.word	0x0800451f
 80043e4:	0800452d 	.word	0x0800452d
 80043e8:	0800453b 	.word	0x0800453b
 80043ec:	08004549 	.word	0x08004549
 80043f0:	08004557 	.word	0x08004557
 80043f4:	08004565 	.word	0x08004565
 80043f8:	08004573 	.word	0x08004573
 80043fc:	08004581 	.word	0x08004581
 8004400:	0800458f 	.word	0x0800458f
 8004404:	0800459d 	.word	0x0800459d
 8004408:	080045ab 	.word	0x080045ab
 800440c:	080045b9 	.word	0x080045b9
 8004410:	080045c7 	.word	0x080045c7
 8004414:	080045d5 	.word	0x080045d5
 8004418:	080045e3 	.word	0x080045e3
 800441c:	080045f1 	.word	0x080045f1
 8004420:	080045ff 	.word	0x080045ff
 8004424:	0800460d 	.word	0x0800460d
 8004428:	0800461b 	.word	0x0800461b
 800442c:	08004629 	.word	0x08004629
 8004430:	08004637 	.word	0x08004637
 8004434:	08004645 	.word	0x08004645
 8004438:	08004653 	.word	0x08004653
 800443c:	08004661 	.word	0x08004661
 8004440:	0800466f 	.word	0x0800466f
 8004444:	0800467d 	.word	0x0800467d
 8004448:	0800468b 	.word	0x0800468b
 800444c:	08004699 	.word	0x08004699
 8004450:	080046a7 	.word	0x080046a7
 8004454:	080046b5 	.word	0x080046b5
 8004458:	080046c3 	.word	0x080046c3
 800445c:	080046d1 	.word	0x080046d1
 8004460:	080046df 	.word	0x080046df
 8004464:	080046ed 	.word	0x080046ed
 8004468:	080046fb 	.word	0x080046fb
 800446c:	08004709 	.word	0x08004709
 8004470:	08004717 	.word	0x08004717
 8004474:	08004725 	.word	0x08004725
 8004478:	08004733 	.word	0x08004733
 800447c:	08004741 	.word	0x08004741
 8004480:	0800474f 	.word	0x0800474f
 8004484:	0800475d 	.word	0x0800475d
 8004488:	0800476b 	.word	0x0800476b
 800448c:	08004779 	.word	0x08004779
 8004490:	08004787 	.word	0x08004787
 8004494:	08004795 	.word	0x08004795
 8004498:	080047a3 	.word	0x080047a3
 800449c:	080047b1 	.word	0x080047b1

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 80044a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	601a      	str	r2, [r3, #0]
	break;
 80044ac:	e18e      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 80044b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	601a      	str	r2, [r3, #0]
	break;
 80044ba:	e187      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80044c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	601a      	str	r2, [r3, #0]
	break;
 80044c8:	e180      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80044d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	601a      	str	r2, [r3, #0]
	break;
 80044d6:	e179      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80044de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	601a      	str	r2, [r3, #0]
	break;
 80044e4:	e172      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 80044ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	601a      	str	r2, [r3, #0]
	break;
 80044f2:	e16b      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80044fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	601a      	str	r2, [r3, #0]
	break;
 8004500:	e164      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8004508:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	601a      	str	r2, [r3, #0]
	break;
 800450e:	e15d      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 8004516:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	601a      	str	r2, [r3, #0]
	break;
 800451c:	e156      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8004524:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	601a      	str	r2, [r3, #0]
	break;
 800452a:	e14f      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8004532:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	601a      	str	r2, [r3, #0]
	break;
 8004538:	e148      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8004540:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	601a      	str	r2, [r3, #0]
	break;
 8004546:	e141      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800454e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	601a      	str	r2, [r3, #0]
	break;
 8004554:	e13a      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800455c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	601a      	str	r2, [r3, #0]
	break;
 8004562:	e133      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 800456a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	601a      	str	r2, [r3, #0]
	break;
 8004570:	e12c      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8004578:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	601a      	str	r2, [r3, #0]
	break;
 800457e:	e125      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8004586:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	601a      	str	r2, [r3, #0]
	break;
 800458c:	e11e      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8004594:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	601a      	str	r2, [r3, #0]
	break;
 800459a:	e117      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 80045a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	601a      	str	r2, [r3, #0]
	break;
 80045a8:	e110      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 80045b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	601a      	str	r2, [r3, #0]
	break;
 80045b6:	e109      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80045be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	601a      	str	r2, [r3, #0]
	break;
 80045c4:	e102      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	; 0x13e
 80045cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	601a      	str	r2, [r3, #0]
	break;
 80045d2:	e0fb      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80045da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	601a      	str	r2, [r3, #0]
	break;
 80045e0:	e0f4      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 80045e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	601a      	str	r2, [r3, #0]
	break;
 80045ee:	e0ed      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80045f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	601a      	str	r2, [r3, #0]
	break;
 80045fc:	e0e6      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8004604:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	601a      	str	r2, [r3, #0]
	break;
 800460a:	e0df      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8004612:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	601a      	str	r2, [r3, #0]
	break;
 8004618:	e0d8      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8004620:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	601a      	str	r2, [r3, #0]
	break;
 8004626:	e0d1      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800462e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	601a      	str	r2, [r3, #0]
	break;
 8004634:	e0ca      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800463c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	601a      	str	r2, [r3, #0]
	break;
 8004642:	e0c3      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800464a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	601a      	str	r2, [r3, #0]
	break;
 8004650:	e0bc      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8004658:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	601a      	str	r2, [r3, #0]
	break;
 800465e:	e0b5      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004666:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	601a      	str	r2, [r3, #0]
	break;
 800466c:	e0ae      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8004674:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	601a      	str	r2, [r3, #0]
	break;
 800467a:	e0a7      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 8004682:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	601a      	str	r2, [r3, #0]
	break;
 8004688:	e0a0      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 8004690:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	601a      	str	r2, [r3, #0]
	break;
 8004696:	e099      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800469e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	601a      	str	r2, [r3, #0]
	break;
 80046a4:	e092      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80046ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	601a      	str	r2, [r3, #0]
	break;
 80046b2:	e08b      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80046ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	601a      	str	r2, [r3, #0]
	break;
 80046c0:	e084      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80046c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	601a      	str	r2, [r3, #0]
	break;
 80046ce:	e07d      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 80046d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	601a      	str	r2, [r3, #0]
	break;
 80046dc:	e076      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 80046e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	601a      	str	r2, [r3, #0]
	break;
 80046ea:	e06f      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 80046f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	601a      	str	r2, [r3, #0]
	break;
 80046f8:	e068      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 8004700:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	601a      	str	r2, [r3, #0]
	break;
 8004706:	e061      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800470e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	601a      	str	r2, [r3, #0]
	break;
 8004714:	e05a      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 800471c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	601a      	str	r2, [r3, #0]
	break;
 8004722:	e053      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 800472a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	601a      	str	r2, [r3, #0]
	break;
 8004730:	e04c      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8004738:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	601a      	str	r2, [r3, #0]
	break;
 800473e:	e045      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004746:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	601a      	str	r2, [r3, #0]
	break;
 800474c:	e03e      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004754:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	601a      	str	r2, [r3, #0]
	break;
 800475a:	e037      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004762:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	601a      	str	r2, [r3, #0]
	break;
 8004768:	e030      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004770:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	601a      	str	r2, [r3, #0]
	break;
 8004776:	e029      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800477e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	601a      	str	r2, [r3, #0]
	break;
 8004784:	e022      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800478c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	601a      	str	r2, [r3, #0]
	break;
 8004792:	e01b      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800479a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	601a      	str	r2, [r3, #0]
	break;
 80047a0:	e014      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	601a      	str	r2, [r3, #0]
	break;
 80047ae:	e00d      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80047b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	601a      	str	r2, [r3, #0]
	break;
 80047bc:	e006      	b.n	80047cc <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80047c4:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 80047c6:	23fc      	movs	r3, #252	; 0xfc
 80047c8:	75fb      	strb	r3, [r7, #23]
	break;
 80047ca:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80047cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	371c      	adds	r7, #28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80047e4:	2300      	movs	r3, #0
 80047e6:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2208      	movs	r2, #8
 80047ec:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	220b      	movs	r2, #11
 80047f2:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047fa:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004802:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800480a:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8004812:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8004814:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800482c:	2300      	movs	r3, #0
 800482e:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2212      	movs	r2, #18
 800483a:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	220f      	movs	r2, #15
 8004840:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2202      	movs	r2, #2
 8004846:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800484e:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	220c      	movs	r2, #12
 8004854:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8004856:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800485a:	4618      	mov	r0, r3
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b084      	sub	sp, #16
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
 800486e:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004870:	2300      	movs	r3, #0
 8004872:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	895b      	ldrh	r3, [r3, #10]
 8004878:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	895b      	ldrh	r3, [r3, #10]
 8004896:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2200      	movs	r2, #0
 80048b4:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2240      	movs	r2, #64	; 0x40
 80048ba:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10d      	bne.n	80048e0 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d108      	bne.n	80048e0 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d103      	bne.n	80048e0 <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2200      	movs	r2, #0
 80048dc:	741a      	strb	r2, [r3, #16]
 80048de:	e002      	b.n	80048e6 <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2201      	movs	r2, #1
 80048e4:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 80048e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d114      	bne.n	8004918 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d110      	bne.n	8004918 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6818      	ldr	r0, [r3, #0]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	7d1b      	ldrb	r3, [r3, #20]
 800490a:	f000 ff99 	bl	8005840 <VL53L1_calc_range_ignore_threshold>
 800490e:	4603      	mov	r3, r0
 8004910:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	82da      	strh	r2, [r3, #22]
 8004916:	e002      	b.n	800491e <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	2200      	movs	r2, #0
 800491c:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800491e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800492a:	b480      	push	{r7}
 800492c:	b085      	sub	sp, #20
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004932:	2300      	movs	r3, #0
 8004934:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800493c:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004944:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800494c:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8004954:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2208      	movs	r2, #8
 800495a:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2228      	movs	r2, #40	; 0x28
 8004960:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2209      	movs	r2, #9
 8004966:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8004968:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004980:	2300      	movs	r3, #0
 8004982:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f248 0203 	movw	r2, #32771	; 0x8003
 800498a:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f248 0201 	movw	r2, #32769	; 0x8001
 8004992:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f248 0241 	movw	r2, #32833	; 0x8041
 800499a:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	220e      	movs	r2, #14
 80049a0:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	220a      	movs	r2, #10
 80049a6:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2206      	movs	r2, #6
 80049ac:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	220e      	movs	r2, #14
 80049b2:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	220a      	movs	r2, #10
 80049b8:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2206      	movs	r2, #6
 80049be:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2202      	movs	r2, #2
 80049c4:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2221      	movs	r2, #33	; 0x21
 80049ca:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80049de:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80049e6:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80049ee:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	22c0      	movs	r2, #192	; 0xc0
 80049f4:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	22c0      	movs	r2, #192	; 0xc0
 80049fa:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	22c0      	movs	r2, #192	; 0xc0
 8004a00:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2208      	movs	r2, #8
 8004a06:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2210      	movs	r2, #16
 8004a0c:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2202      	movs	r2, #2
 8004a1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2202      	movs	r2, #2
 8004a2a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004a3c:	84da      	strh	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004a44:	851a      	strh	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f248 0230 	movw	r2, #32816	; 0x8030
 8004a4c:	62da      	str	r2, [r3, #44]	; 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a54:	631a      	str	r2, [r3, #48]	; 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004a5c:	635a      	str	r2, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004a64:	639a      	str	r2, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f24f 6218 	movw	r2, #63000	; 0xf618
 8004a6c:	641a      	str	r2, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8004a74:	645a      	str	r2, [r3, #68]	; 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004a82:	649a      	str	r2, [r3, #72]	; 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8004a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3714      	adds	r7, #20
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
 8004aa0:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004aac:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2211      	movs	r2, #17
 8004aee:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2202      	movs	r2, #2
 8004af4:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2202      	movs	r2, #2
 8004b00:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2208      	movs	r2, #8
 8004b06:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	22ff      	movs	r2, #255	; 0xff
 8004b44:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2200      	movs	r2, #0
 8004b72:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2220      	movs	r2, #32
 8004b78:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	220b      	movs	r2, #11
 8004b7e:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	220d      	movs	r2, #13
 8004b92:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2200      	movs	r2, #0
 8004bac:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 8004bba:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2238      	movs	r2, #56	; 0x38
 8004bc6:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	22ff      	movs	r2, #255	; 0xff
 8004bcc:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	221a      	movs	r2, #26
 8004bde:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2220      	movs	r2, #32
 8004bea:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	22cc      	movs	r2, #204	; 0xcc
 8004bf6:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	220b      	movs	r2, #11
 8004bfc:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2201      	movs	r2, #1
 8004c02:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	22f5      	movs	r2, #245	; 0xf5
 8004c08:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2209      	movs	r2, #9
 8004c0e:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8004c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1a:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2208      	movs	r2, #8
 8004c24:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2278      	movs	r2, #120	; 0x78
 8004c2a:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2200      	movs	r2, #0
 8004c42:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	2200      	movs	r2, #0
 8004c48:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
	pdynamic->system__seed_config =
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	220b      	movs	r2, #11
 8004c5e:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	2209      	movs	r2, #9
 8004c64:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pdynamic->sd_config__first_order_select =
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
	pdynamic->sd_config__quantifier         =
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	22c7      	movs	r2, #199	; 0xc7
 8004c94:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	22ff      	movs	r2, #255	; 0xff
 8004c9a:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	22db      	movs	r2, #219	; 0xdb
 8004ca0:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	2200      	movs	r2, #0
 8004cac:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	2221      	movs	r2, #33	; 0x21
 8004cbe:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8004cc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	371c      	adds	r7, #28
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b088      	sub	sp, #32
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
 8004cdc:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	9301      	str	r3, [sp, #4]
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	68b9      	ldr	r1, [r7, #8]
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f7ff fecf 	bl	8004a94 <VL53L1_preset_mode_standard_ranging>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8004cfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d121      	bne.n	8004d46 <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2207      	movs	r2, #7
 8004d06:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2205      	movs	r2, #5
 8004d0c:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2208      	movs	r2, #8
 8004d22:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2238      	movs	r2, #56	; 0x38
 8004d28:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2207      	movs	r2, #7
 8004d2e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	2205      	movs	r2, #5
 8004d34:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8004d46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b088      	sub	sp, #32
 8004d56:	af02      	add	r7, sp, #8
 8004d58:	60f8      	str	r0, [r7, #12]
 8004d5a:	60b9      	str	r1, [r7, #8]
 8004d5c:	607a      	str	r2, [r7, #4]
 8004d5e:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004d60:	2300      	movs	r3, #0
 8004d62:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	9301      	str	r3, [sp, #4]
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f7ff fe8e 	bl	8004a94 <VL53L1_preset_mode_standard_ranging>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8004d7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d121      	bne.n	8004dc8 <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	220f      	movs	r2, #15
 8004d88:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	220d      	movs	r2, #13
 8004d8e:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2208      	movs	r2, #8
 8004da4:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	22b8      	movs	r2, #184	; 0xb8
 8004daa:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	220f      	movs	r2, #15
 8004db0:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	220d      	movs	r2, #13
 8004db6:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8004dc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004de2:	2300      	movs	r3, #0
 8004de4:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	9301      	str	r3, [sp, #4]
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	68b9      	ldr	r1, [r7, #8]
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f7ff fe4d 	bl	8004a94 <VL53L1_preset_mode_standard_ranging>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8004dfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d105      	bne.n	8004e12 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2202      	movs	r2, #2
 8004e0a:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	223b      	movs	r2, #59	; 0x3b
 8004e10:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8004e12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3718      	adds	r7, #24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b088      	sub	sp, #32
 8004e22:	af02      	add	r7, sp, #8
 8004e24:	60f8      	str	r0, [r7, #12]
 8004e26:	60b9      	str	r1, [r7, #8]
 8004e28:	607a      	str	r2, [r7, #4]
 8004e2a:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	9301      	str	r3, [sp, #4]
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	68b9      	ldr	r1, [r7, #8]
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f7ff fe28 	bl	8004a94 <VL53L1_preset_mode_standard_ranging>
 8004e44:	4603      	mov	r3, r0
 8004e46:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8004e48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d105      	bne.n	8004e5c <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2202      	movs	r2, #2
 8004e54:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	225b      	movs	r2, #91	; 0x5b
 8004e5a:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8004e5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3718      	adds	r7, #24
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b088      	sub	sp, #32
 8004e6c:	af02      	add	r7, sp, #8
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004e76:	2300      	movs	r3, #0
 8004e78:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	9301      	str	r3, [sp, #4]
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	68b9      	ldr	r1, [r7, #8]
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f7ff fe03 	bl	8004a94 <VL53L1_preset_mode_standard_ranging>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8004e92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d11a      	bne.n	8004ed0 <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	22b1      	movs	r2, #177	; 0xb1
 8004eaa:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	22d4      	movs	r2, #212	; 0xd4
 8004eb6:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004ebe:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	2240      	movs	r2, #64	; 0x40
 8004ece:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8004ed0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b088      	sub	sp, #32
 8004ee0:	af02      	add	r7, sp, #8
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
 8004ee8:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004eea:	2300      	movs	r3, #0
 8004eec:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	9301      	str	r3, [sp, #4]
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	68b9      	ldr	r1, [r7, #8]
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f7ff fee7 	bl	8004cd0 <VL53L1_preset_mode_standard_ranging_short_range>
 8004f02:	4603      	mov	r3, r0
 8004f04:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8004f06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d11a      	bne.n	8004f44 <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2200      	movs	r2, #0
 8004f12:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2284      	movs	r2, #132	; 0x84
 8004f1e:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	22b1      	movs	r2, #177	; 0xb1
 8004f2a:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004f32:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	2240      	movs	r2, #64	; 0x40
 8004f42:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8004f44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b088      	sub	sp, #32
 8004f54:	af02      	add	r7, sp, #8
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	9301      	str	r3, [sp, #4]
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	68b9      	ldr	r1, [r7, #8]
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f7ff feee 	bl	8004d52 <VL53L1_preset_mode_standard_ranging_long_range>
 8004f76:	4603      	mov	r3, r0
 8004f78:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8004f7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d11a      	bne.n	8004fb8 <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2200      	movs	r2, #0
 8004f86:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2297      	movs	r2, #151	; 0x97
 8004f92:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	22b1      	movs	r2, #177	; 0xb1
 8004f9e:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004fa6:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004faa:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	2240      	movs	r2, #64	; 0x40
 8004fb6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8004fb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3718      	adds	r7, #24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b088      	sub	sp, #32
 8004fc8:	af02      	add	r7, sp, #8
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	9301      	str	r3, [sp, #4]
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	68b9      	ldr	r1, [r7, #8]
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f7ff ff3f 	bl	8004e68 <VL53L1_preset_mode_timed_ranging>
 8004fea:	4603      	mov	r3, r0
 8004fec:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8004fee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d106      	bne.n	8005004 <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8004ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ff8:	6839      	ldr	r1, [r7, #0]
 8004ffa:	68b8      	ldr	r0, [r7, #8]
 8004ffc:	f000 fead 	bl	8005d5a <VL53L1_config_low_power_auto_mode>
 8005000:	4603      	mov	r3, r0
 8005002:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8005004:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3718      	adds	r7, #24
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af02      	add	r7, sp, #8
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
 800501c:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800501e:	2300      	movs	r3, #0
 8005020:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	9301      	str	r3, [sp, #4]
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f7ff ff53 	bl	8004edc <VL53L1_preset_mode_timed_ranging_short_range>
 8005036:	4603      	mov	r3, r0
 8005038:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800503a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d106      	bne.n	8005050 <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8005042:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005044:	6839      	ldr	r1, [r7, #0]
 8005046:	68b8      	ldr	r0, [r7, #8]
 8005048:	f000 fe87 	bl	8005d5a <VL53L1_config_low_power_auto_mode>
 800504c:	4603      	mov	r3, r0
 800504e:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8005050:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b088      	sub	sp, #32
 8005060:	af02      	add	r7, sp, #8
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800506a:	2300      	movs	r3, #0
 800506c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	9301      	str	r3, [sp, #4]
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	68b9      	ldr	r1, [r7, #8]
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f7ff ff67 	bl	8004f50 <VL53L1_preset_mode_timed_ranging_long_range>
 8005082:	4603      	mov	r3, r0
 8005084:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8005086:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d106      	bne.n	800509c <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800508e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005090:	6839      	ldr	r1, [r7, #0]
 8005092:	68b8      	ldr	r0, [r7, #8]
 8005094:	f000 fe61 	bl	8005d5a <VL53L1_config_low_power_auto_mode>
 8005098:	4603      	mov	r3, r0
 800509a:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800509c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b088      	sub	sp, #32
 80050ac:	af02      	add	r7, sp, #8
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80050b6:	2300      	movs	r3, #0
 80050b8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	9301      	str	r3, [sp, #4]
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	68b9      	ldr	r1, [r7, #8]
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f7ff fce3 	bl	8004a94 <VL53L1_preset_mode_standard_ranging>
 80050ce:	4603      	mov	r3, r0
 80050d0:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80050d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d116      	bne.n	8005108 <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2200      	movs	r2, #0
 80050de:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	22b1      	movs	r2, #177	; 0xb1
 80050ea:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	22d4      	movs	r2, #212	; 0xd4
 80050f6:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	2210      	movs	r2, #16
 8005106:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 8005108:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3718      	adds	r7, #24
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af02      	add	r7, sp, #8
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
 8005120:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005122:	2300      	movs	r3, #0
 8005124:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	9301      	str	r3, [sp, #4]
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	68b9      	ldr	r1, [r7, #8]
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f7ff fcad 	bl	8004a94 <VL53L1_preset_mode_standard_ranging>
 800513a:	4603      	mov	r3, r0
 800513c:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800513e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d102      	bne.n	800514c <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 8005146:	6a3b      	ldr	r3, [r7, #32]
 8005148:	2201      	movs	r2, #1
 800514a:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 800514c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005150:	4618      	mov	r0, r3
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	220a      	movs	r2, #10
 8005178:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 8005182:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005184:	bf00      	nop
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	460b      	mov	r3, r1
 800519a:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	332c      	adds	r3, #44	; 0x2c
 80051a4:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	78fa      	ldrb	r2, [r7, #3]
 80051aa:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	2200      	movs	r2, #0
 80051b0:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2202      	movs	r2, #2
 80051b6:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2200      	movs	r2, #0
 80051bc:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	78fa      	ldrb	r2, [r7, #3]
 80051c2:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2200      	movs	r2, #0
 80051c8:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	2202      	movs	r2, #2
 80051ce:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	2200      	movs	r2, #0
 80051d4:	71da      	strb	r2, [r3, #7]

}
 80051d6:	bf00      	nop
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
	...

080051e4 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b087      	sub	sp, #28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 80051ec:	2300      	movs	r3, #0
 80051ee:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	332c      	adds	r3, #44	; 0x2c
 80051f8:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8005200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10c      	bne.n	8005222 <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2203      	movs	r2, #3
 800520c:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2202      	movs	r2, #2
 8005218:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	71da      	strb	r2, [r3, #7]
 8005220:	e060      	b.n	80052e4 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	795b      	ldrb	r3, [r3, #5]
 8005226:	2bff      	cmp	r3, #255	; 0xff
 8005228:	d103      	bne.n	8005232 <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2280      	movs	r2, #128	; 0x80
 800522e:	715a      	strb	r2, [r3, #5]
 8005230:	e005      	b.n	800523e <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	795b      	ldrb	r3, [r3, #5]
 8005236:	3301      	adds	r3, #1
 8005238:	b2da      	uxtb	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	799b      	ldrb	r3, [r3, #6]
 8005242:	f083 0302 	eor.w	r3, r3, #2
 8005246:	b2da      	uxtb	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	791b      	ldrb	r3, [r3, #4]
 8005250:	3b03      	subs	r3, #3
 8005252:	2b05      	cmp	r3, #5
 8005254:	d839      	bhi.n	80052ca <VL53L1_update_ll_driver_rd_state+0xe6>
 8005256:	a201      	add	r2, pc, #4	; (adr r2, 800525c <VL53L1_update_ll_driver_rd_state+0x78>)
 8005258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525c:	08005275 	.word	0x08005275
 8005260:	080052cb 	.word	0x080052cb
 8005264:	080052cb 	.word	0x080052cb
 8005268:	0800529f 	.word	0x0800529f
 800526c:	080052ad 	.word	0x080052ad
 8005270:	080052b5 	.word	0x080052b5

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	dd03      	ble.n	800528a <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2206      	movs	r2, #6
 8005286:	711a      	strb	r2, [r3, #4]
 8005288:	e002      	b.n	8005290 <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2208      	movs	r2, #8
 800528e:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	71da      	strb	r2, [r3, #7]

		break;
 800529c:	e022      	b.n	80052e4 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2208      	movs	r2, #8
 80052a8:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 80052aa:	e01b      	b.n	80052e4 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2208      	movs	r2, #8
 80052b0:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 80052b2:	e017      	b.n	80052e4 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	79db      	ldrb	r3, [r3, #7]
 80052b8:	f083 0301 	eor.w	r3, r3, #1
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2208      	movs	r2, #8
 80052c6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 80052c8:	e00c      	b.n	80052e4 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2203      	movs	r2, #3
 80052ce:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2202      	movs	r2, #2
 80052da:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	71da      	strb	r2, [r3, #7]

		break;
 80052e2:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 80052e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	371c      	adds	r7, #28
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b089      	sub	sp, #36	; 0x24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 80052fc:	2300      	movs	r3, #0
 80052fe:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	332c      	adds	r3, #44	; 0x2c
 8005308:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 8005310:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 8005312:	2300      	movs	r3, #0
 8005314:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 8005316:	2300      	movs	r3, #0
 8005318:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 800531a:	2300      	movs	r3, #0
 800531c:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 8005322:	f003 031f 	and.w	r3, r3, #31
 8005326:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	78db      	ldrb	r3, [r3, #3]
 800532c:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8005332:	111b      	asrs	r3, r3, #4
 8005334:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8005342:	f003 0320 	and.w	r3, r3, #32
 8005346:	2b00      	cmp	r3, #0
 8005348:	d017      	beq.n	800537a <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	791b      	ldrb	r3, [r3, #4]
 800534e:	2b06      	cmp	r3, #6
 8005350:	d105      	bne.n	800535e <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 8005352:	7bfb      	ldrb	r3, [r7, #15]
 8005354:	2b12      	cmp	r3, #18
 8005356:	d010      	beq.n	800537a <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 8005358:	23ef      	movs	r3, #239	; 0xef
 800535a:	77fb      	strb	r3, [r7, #31]
 800535c:	e00d      	b.n	800537a <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	795b      	ldrb	r3, [r3, #5]
 8005362:	7bba      	ldrb	r2, [r7, #14]
 8005364:	429a      	cmp	r2, r3
 8005366:	d001      	beq.n	800536c <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 8005368:	23ee      	movs	r3, #238	; 0xee
 800536a:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	799b      	ldrb	r3, [r3, #6]
 8005370:	7b7a      	ldrb	r2, [r7, #13]
 8005372:	429a      	cmp	r2, r3
 8005374:	d001      	beq.n	800537a <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 8005376:	23ed      	movs	r3, #237	; 0xed
 8005378:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 800537a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3724      	adds	r7, #36	; 0x24
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800538a:	b480      	push	{r7}
 800538c:	b087      	sub	sp, #28
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8005392:	2300      	movs	r3, #0
 8005394:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	332c      	adds	r3, #44	; 0x2c
 800539e:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 80053a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10c      	bne.n	80053c8 <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2203      	movs	r2, #3
 80053b2:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2202      	movs	r2, #2
 80053be:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	70da      	strb	r2, [r3, #3]
 80053c6:	e03e      	b.n	8005446 <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	785b      	ldrb	r3, [r3, #1]
 80053cc:	2bff      	cmp	r3, #255	; 0xff
 80053ce:	d103      	bne.n	80053d8 <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2280      	movs	r2, #128	; 0x80
 80053d4:	705a      	strb	r2, [r3, #1]
 80053d6:	e005      	b.n	80053e4 <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	785b      	ldrb	r3, [r3, #1]
 80053dc:	3301      	adds	r3, #1
 80053de:	b2da      	uxtb	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	789b      	ldrb	r3, [r3, #2]
 80053e8:	f083 0302 	eor.w	r3, r3, #2
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	2b03      	cmp	r3, #3
 80053f8:	d002      	beq.n	8005400 <VL53L1_update_ll_driver_cfg_state+0x76>
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	d00e      	beq.n	800541c <VL53L1_update_ll_driver_cfg_state+0x92>
 80053fe:	e015      	b.n	800542c <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	78db      	ldrb	r3, [r3, #3]
 8005404:	f083 0301 	eor.w	r3, r3, #1
 8005408:	b2da      	uxtb	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2201      	movs	r2, #1
 8005412:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2204      	movs	r2, #4
 8005418:	701a      	strb	r2, [r3, #0]
		break;
 800541a:	e014      	b.n	8005446 <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	78db      	ldrb	r3, [r3, #3]
 8005420:	f083 0301 	eor.w	r3, r3, #1
 8005424:	b2da      	uxtb	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	70da      	strb	r2, [r3, #3]

		break;
 800542a:	e00c      	b.n	8005446 <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2203      	movs	r2, #3
 8005430:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2202      	movs	r2, #2
 800543c:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	70da      	strb	r2, [r3, #3]

		break;
 8005444:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8005446:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800544a:	4618      	mov	r0, r3
 800544c:	371c      	adds	r7, #28
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 8005456:	b480      	push	{r7}
 8005458:	b083      	sub	sp, #12
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
 800545e:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	7c1a      	ldrb	r2, [r3, #16]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	3301      	adds	r3, #1
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	7c52      	ldrb	r2, [r2, #17]
 8005470:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	3302      	adds	r3, #2
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	7c92      	ldrb	r2, [r2, #18]
 800547a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	3303      	adds	r3, #3
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	7cd2      	ldrb	r2, [r2, #19]
 8005484:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	3304      	adds	r3, #4
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	7d12      	ldrb	r2, [r2, #20]
 800548e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	3305      	adds	r3, #5
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	7d52      	ldrb	r2, [r2, #21]
 8005498:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	3306      	adds	r3, #6
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	7d92      	ldrb	r2, [r2, #22]
 80054a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	3307      	adds	r3, #7
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	7dd2      	ldrb	r2, [r2, #23]
 80054ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	3308      	adds	r3, #8
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	7e12      	ldrb	r2, [r2, #24]
 80054b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	3309      	adds	r3, #9
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	7e52      	ldrb	r2, [r2, #25]
 80054c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	330a      	adds	r3, #10
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	7e92      	ldrb	r2, [r2, #26]
 80054ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	330b      	adds	r3, #11
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	7ed2      	ldrb	r2, [r2, #27]
 80054d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	330c      	adds	r3, #12
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	7f12      	ldrb	r2, [r2, #28]
 80054de:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	330d      	adds	r3, #13
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	7f52      	ldrb	r2, [r2, #29]
 80054e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	330e      	adds	r3, #14
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	7f92      	ldrb	r2, [r2, #30]
 80054f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	330f      	adds	r3, #15
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	7fd2      	ldrb	r2, [r2, #31]
 80054fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	3310      	adds	r3, #16
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005508:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	3311      	adds	r3, #17
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8005514:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	3312      	adds	r3, #18
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8005520:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	3313      	adds	r3, #19
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800552c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	3314      	adds	r3, #20
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8005538:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	3315      	adds	r3, #21
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005544:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	3316      	adds	r3, #22
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8005550:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	3317      	adds	r3, #23
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800555c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	3318      	adds	r3, #24
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8005568:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	3319      	adds	r3, #25
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 8005574:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	331a      	adds	r3, #26
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 8005580:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	331b      	adds	r3, #27
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800558c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	331c      	adds	r3, #28
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8005598:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	331d      	adds	r3, #29
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80055a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	331e      	adds	r3, #30
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 80055b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	331f      	adds	r3, #31
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 80055bc:	701a      	strb	r2, [r3, #0]
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b085      	sub	sp, #20
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	4603      	mov	r3, r0
 80055d2:	603a      	str	r2, [r7, #0]
 80055d4:	80fb      	strh	r3, [r7, #6]
 80055d6:	460b      	mov	r3, r1
 80055d8:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 80055da:	2300      	movs	r3, #0
 80055dc:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 80055de:	2300      	movs	r3, #0
 80055e0:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 80055e2:	88fb      	ldrh	r3, [r7, #6]
 80055e4:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 80055e6:	2300      	movs	r3, #0
 80055e8:	81fb      	strh	r3, [r7, #14]
 80055ea:	e00e      	b.n	800560a <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 80055ec:	88ba      	ldrh	r2, [r7, #4]
 80055ee:	89fb      	ldrh	r3, [r7, #14]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	3b01      	subs	r3, #1
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	4413      	add	r3, r2
 80055f8:	89ba      	ldrh	r2, [r7, #12]
 80055fa:	b2d2      	uxtb	r2, r2
 80055fc:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 80055fe:	89bb      	ldrh	r3, [r7, #12]
 8005600:	0a1b      	lsrs	r3, r3, #8
 8005602:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 8005604:	89fb      	ldrh	r3, [r7, #14]
 8005606:	3301      	adds	r3, #1
 8005608:	81fb      	strh	r3, [r7, #14]
 800560a:	89fa      	ldrh	r2, [r7, #14]
 800560c:	88bb      	ldrh	r3, [r7, #4]
 800560e:	429a      	cmp	r2, r3
 8005610:	d3ec      	bcc.n	80055ec <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 8005612:	bf00      	nop
 8005614:	bf00      	nop
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	4603      	mov	r3, r0
 8005628:	6039      	str	r1, [r7, #0]
 800562a:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 800562c:	2300      	movs	r3, #0
 800562e:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 8005630:	e00a      	b.n	8005648 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 8005632:	89fb      	ldrh	r3, [r7, #14]
 8005634:	021b      	lsls	r3, r3, #8
 8005636:	b21a      	sxth	r2, r3
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	1c59      	adds	r1, r3, #1
 800563c:	6039      	str	r1, [r7, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	b21b      	sxth	r3, r3
 8005642:	4313      	orrs	r3, r2
 8005644:	b21b      	sxth	r3, r3
 8005646:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 8005648:	88fb      	ldrh	r3, [r7, #6]
 800564a:	1e5a      	subs	r2, r3, #1
 800564c:	80fa      	strh	r2, [r7, #6]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1ef      	bne.n	8005632 <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 8005652:	89fb      	ldrh	r3, [r7, #14]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	4603      	mov	r3, r0
 8005668:	603a      	str	r2, [r7, #0]
 800566a:	80fb      	strh	r3, [r7, #6]
 800566c:	460b      	mov	r3, r1
 800566e:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8005670:	2300      	movs	r3, #0
 8005672:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 8005674:	2300      	movs	r3, #0
 8005676:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 8005678:	88fb      	ldrh	r3, [r7, #6]
 800567a:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800567c:	2300      	movs	r3, #0
 800567e:	81fb      	strh	r3, [r7, #14]
 8005680:	e00f      	b.n	80056a2 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8005682:	88ba      	ldrh	r2, [r7, #4]
 8005684:	89fb      	ldrh	r3, [r7, #14]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	3b01      	subs	r3, #1
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	4413      	add	r3, r2
 800568e:	89ba      	ldrh	r2, [r7, #12]
 8005690:	b2d2      	uxtb	r2, r2
 8005692:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8005694:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005698:	121b      	asrs	r3, r3, #8
 800569a:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800569c:	89fb      	ldrh	r3, [r7, #14]
 800569e:	3301      	adds	r3, #1
 80056a0:	81fb      	strh	r3, [r7, #14]
 80056a2:	89fa      	ldrh	r2, [r7, #14]
 80056a4:	88bb      	ldrh	r3, [r7, #4]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d3eb      	bcc.n	8005682 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 80056aa:	bf00      	nop
 80056ac:	bf00      	nop
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	4603      	mov	r3, r0
 80056c0:	6039      	str	r1, [r7, #0]
 80056c2:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 80056c4:	2300      	movs	r3, #0
 80056c6:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	b25b      	sxtb	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	da0e      	bge.n	80056f0 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 80056d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80056d6:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 80056d8:	e00a      	b.n	80056f0 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 80056da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80056de:	021b      	lsls	r3, r3, #8
 80056e0:	b21a      	sxth	r2, r3
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	1c59      	adds	r1, r3, #1
 80056e6:	6039      	str	r1, [r7, #0]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	b21b      	sxth	r3, r3
 80056ec:	4313      	orrs	r3, r2
 80056ee:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 80056f0:	88fb      	ldrh	r3, [r7, #6]
 80056f2:	1e5a      	subs	r2, r3, #1
 80056f4:	80fa      	strh	r2, [r7, #6]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1ef      	bne.n	80056da <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 80056fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800570a:	b480      	push	{r7}
 800570c:	b087      	sub	sp, #28
 800570e:	af00      	add	r7, sp, #0
 8005710:	60f8      	str	r0, [r7, #12]
 8005712:	460b      	mov	r3, r1
 8005714:	607a      	str	r2, [r7, #4]
 8005716:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8005718:	2300      	movs	r3, #0
 800571a:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 800571c:	2300      	movs	r3, #0
 800571e:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 8005724:	2300      	movs	r3, #0
 8005726:	82fb      	strh	r3, [r7, #22]
 8005728:	e00e      	b.n	8005748 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800572a:	897a      	ldrh	r2, [r7, #10]
 800572c:	8afb      	ldrh	r3, [r7, #22]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	3b01      	subs	r3, #1
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	4413      	add	r3, r2
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	b2d2      	uxtb	r2, r2
 800573a:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	0a1b      	lsrs	r3, r3, #8
 8005740:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 8005742:	8afb      	ldrh	r3, [r7, #22]
 8005744:	3301      	adds	r3, #1
 8005746:	82fb      	strh	r3, [r7, #22]
 8005748:	8afa      	ldrh	r2, [r7, #22]
 800574a:	897b      	ldrh	r3, [r7, #10]
 800574c:	429a      	cmp	r2, r3
 800574e:	d3ec      	bcc.n	800572a <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 8005750:	bf00      	nop
 8005752:	bf00      	nop
 8005754:	371c      	adds	r7, #28
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800575e:	b480      	push	{r7}
 8005760:	b085      	sub	sp, #20
 8005762:	af00      	add	r7, sp, #0
 8005764:	4603      	mov	r3, r0
 8005766:	6039      	str	r1, [r7, #0]
 8005768:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 800576a:	2300      	movs	r3, #0
 800576c:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 800576e:	e007      	b.n	8005780 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	021a      	lsls	r2, r3, #8
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	1c59      	adds	r1, r3, #1
 8005778:	6039      	str	r1, [r7, #0]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	4313      	orrs	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 8005780:	88fb      	ldrh	r3, [r7, #6]
 8005782:	1e5a      	subs	r2, r3, #1
 8005784:	80fa      	strh	r2, [r7, #6]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1f2      	bne.n	8005770 <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 800578a:	68fb      	ldr	r3, [r7, #12]
}
 800578c:	4618      	mov	r0, r3
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	4603      	mov	r3, r0
 80057a0:	6039      	str	r1, [r7, #0]
 80057a2:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 80057a4:	2300      	movs	r3, #0
 80057a6:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	b25b      	sxtb	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	da0b      	bge.n	80057ca <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 80057b2:	f04f 33ff 	mov.w	r3, #4294967295
 80057b6:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 80057b8:	e007      	b.n	80057ca <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	021a      	lsls	r2, r3, #8
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	1c59      	adds	r1, r3, #1
 80057c2:	6039      	str	r1, [r7, #0]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 80057ca:	88fb      	ldrh	r3, [r7, #6]
 80057cc:	1e5a      	subs	r2, r3, #1
 80057ce:	80fa      	strh	r2, [r7, #6]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1f2      	bne.n	80057ba <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 80057d4:	68fb      	ldr	r3, [r7, #12]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b086      	sub	sp, #24
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	4603      	mov	r3, r0
 80057ea:	460a      	mov	r2, r1
 80057ec:	80fb      	strh	r3, [r7, #6]
 80057ee:	4613      	mov	r3, r2
 80057f0:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 80057f2:	2300      	movs	r3, #0
 80057f4:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 80057f6:	2300      	movs	r3, #0
 80057f8:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 80057fa:	2300      	movs	r3, #0
 80057fc:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	4618      	mov	r0, r3
 8005802:	f000 fb86 	bl	8005f12 <VL53L1_calc_pll_period_us>
 8005806:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 8005808:	797b      	ldrb	r3, [r7, #5]
 800580a:	4618      	mov	r0, r3
 800580c:	f000 fb95 	bl	8005f3a <VL53L1_decode_vcsel_period>
 8005810:	4603      	mov	r3, r0
 8005812:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	4613      	mov	r3, r2
 8005818:	00db      	lsls	r3, r3, #3
 800581a:	4413      	add	r3, r2
 800581c:	021b      	lsls	r3, r3, #8
 800581e:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	099b      	lsrs	r3, r3, #6
 8005824:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 8005826:	7cfa      	ldrb	r2, [r7, #19]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	fb02 f303 	mul.w	r3, r2, r3
 800582e:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	099b      	lsrs	r3, r3, #6
 8005834:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 8005836:	68fb      	ldr	r3, [r7, #12]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8005840:	b480      	push	{r7}
 8005842:	b089      	sub	sp, #36	; 0x24
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	4608      	mov	r0, r1
 800584a:	4611      	mov	r1, r2
 800584c:	461a      	mov	r2, r3
 800584e:	4603      	mov	r3, r0
 8005850:	817b      	strh	r3, [r7, #10]
 8005852:	460b      	mov	r3, r1
 8005854:	813b      	strh	r3, [r7, #8]
 8005856:	4613      	mov	r3, r2
 8005858:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 800585a:	2300      	movs	r3, #0
 800585c:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800585e:	2300      	movs	r3, #0
 8005860:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 8005862:	2300      	movs	r3, #0
 8005864:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 8005866:	2300      	movs	r3, #0
 8005868:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800586a:	2300      	movs	r3, #0
 800586c:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	4a23      	ldr	r2, [pc, #140]	; (8005900 <VL53L1_calc_range_ignore_threshold+0xc0>)
 8005874:	fb82 1203 	smull	r1, r2, r2, r3
 8005878:	1192      	asrs	r2, r2, #6
 800587a:	17db      	asrs	r3, r3, #31
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 8005880:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005884:	2b00      	cmp	r3, #0
 8005886:	da03      	bge.n	8005890 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 8005888:	897b      	ldrh	r3, [r7, #10]
 800588a:	425b      	negs	r3, r3
 800588c:	b29b      	uxth	r3, r3
 800588e:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 8005890:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	da03      	bge.n	80058a0 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 8005898:	893b      	ldrh	r3, [r7, #8]
 800589a:	425b      	negs	r3, r3
 800589c:	b29b      	uxth	r3, r3
 800589e:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 80058a0:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80058a4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80058a8:	4413      	add	r3, r2
 80058aa:	015b      	lsls	r3, r3, #5
 80058ac:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	4a13      	ldr	r2, [pc, #76]	; (8005900 <VL53L1_calc_range_ignore_threshold+0xc0>)
 80058b2:	fb82 1203 	smull	r1, r2, r2, r3
 80058b6:	1192      	asrs	r2, r2, #6
 80058b8:	17db      	asrs	r3, r3, #31
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	4413      	add	r3, r2
 80058c4:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 80058c6:	79fa      	ldrb	r2, [r7, #7]
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	fb02 f303 	mul.w	r3, r2, r3
 80058ce:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	3310      	adds	r3, #16
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	da00      	bge.n	80058da <VL53L1_calc_range_ignore_threshold+0x9a>
 80058d8:	331f      	adds	r3, #31
 80058da:	115b      	asrs	r3, r3, #5
 80058dc:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058e4:	db03      	blt.n	80058ee <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 80058e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80058ea:	83fb      	strh	r3, [r7, #30]
 80058ec:	e001      	b.n	80058f2 <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 80058f2:	8bfb      	ldrh	r3, [r7, #30]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3724      	adds	r7, #36	; 0x24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	10624dd3 	.word	0x10624dd3

08005904 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800590e:	2300      	movs	r3, #0
 8005910:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	031a      	lsls	r2, r3, #12
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	085b      	lsrs	r3, r3, #1
 800591a:	441a      	add	r2, r3
	timeout_mclks   =
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005922:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8005924:	68fb      	ldr	r3, [r7, #12]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b084      	sub	sp, #16
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
 800593a:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800593c:	2300      	movs	r3, #0
 800593e:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8005940:	2300      	movs	r3, #0
 8005942:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 8005944:	6839      	ldr	r1, [r7, #0]
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7ff ffdc 	bl	8005904 <VL53L1_calc_timeout_mclks>
 800594c:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f000 f885 	bl	8005a5e <VL53L1_encode_timeout>
 8005954:	4603      	mov	r3, r0
 8005956:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 8005958:	897b      	ldrh	r3, [r7, #10]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 8005962:	b4f0      	push	{r4, r5, r6, r7}
 8005964:	b086      	sub	sp, #24
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
 800596a:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 800596c:	2300      	movs	r3, #0
 800596e:	617b      	str	r3, [r7, #20]
	uint64_t tmp            = 0;
 8005970:	f04f 0200 	mov.w	r2, #0
 8005974:	f04f 0300 	mov.w	r3, #0
 8005978:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4618      	mov	r0, r3
 8005980:	f04f 0100 	mov.w	r1, #0
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	f04f 0300 	mov.w	r3, #0
 800598c:	fb02 fc01 	mul.w	ip, r2, r1
 8005990:	fb00 f603 	mul.w	r6, r0, r3
 8005994:	4466      	add	r6, ip
 8005996:	fba0 2302 	umull	r2, r3, r0, r2
 800599a:	18f1      	adds	r1, r6, r3
 800599c:	460b      	mov	r3, r1
 800599e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80059a2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 80059a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059aa:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 80059ae:	f143 0500 	adc.w	r5, r3, #0
 80059b2:	e9c7 4502 	strd	r4, r5, [r7, #8]
	tmp  = tmp >> 12;
 80059b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80059ba:	f04f 0200 	mov.w	r2, #0
 80059be:	f04f 0300 	mov.w	r3, #0
 80059c2:	0b02      	lsrs	r2, r0, #12
 80059c4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80059c8:	0b0b      	lsrs	r3, r1, #12
 80059ca:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 80059d2:	697b      	ldr	r3, [r7, #20]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3718      	adds	r7, #24
 80059d8:	46bd      	mov	sp, r7
 80059da:	bcf0      	pop	{r4, r5, r6, r7}
 80059dc:	4770      	bx	lr
	...

080059e0 <VL53L1_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53L1_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	460b      	mov	r3, r1
 80059ea:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 80059ec:	2300      	movs	r3, #0
 80059ee:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 80059f0:	2300      	movs	r3, #0
 80059f2:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 80059f4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 80059f8:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 80059fa:	4413      	add	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0) {
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	da02      	bge.n	8005a0a <VL53L1_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 8005a04:	2300      	movs	r3, #0
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	e005      	b.n	8005a16 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
	} else {
		if (plane_offset_kcps_temp > 0x3FFFF) {
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a10:	db01      	blt.n	8005a16 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 8005a12:	4b05      	ldr	r3, [pc, #20]	; (8005a28 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x48>)
 8005a14:	60fb      	str	r3, [r7, #12]
		}
	}

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 8005a1a:	68bb      	ldr	r3, [r7, #8]

}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	0003ffff 	.word	0x0003ffff

08005a2c <VL53L1_calc_decoded_timeout_us>:

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	4603      	mov	r3, r0
 8005a34:	6039      	str	r1, [r7, #0]
 8005a36:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 8005a40:	88fb      	ldrh	r3, [r7, #6]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 f837 	bl	8005ab6 <VL53L1_decode_timeout>
 8005a48:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 8005a4a:	6839      	ldr	r1, [r7, #0]
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f7ff ff88 	bl	8005962 <VL53L1_calc_timeout_us>
 8005a52:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 8005a54:	68bb      	ldr	r3, [r7, #8]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b087      	sub	sp, #28
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8005a66:	2300      	movs	r3, #0
 8005a68:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d017      	beq.n	8005aa8 <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005a7e:	e005      	b.n	8005a8c <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	085b      	lsrs	r3, r3, #1
 8005a84:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8005a86:	89fb      	ldrh	r3, [r7, #14]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1f4      	bne.n	8005a80 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8005a96:	89fb      	ldrh	r3, [r7, #14]
 8005a98:	021b      	lsls	r3, r3, #8
 8005a9a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8005aa4:	4413      	add	r3, r2
 8005aa6:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8005aa8:	8afb      	ldrh	r3, [r7, #22]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	371c      	adds	r7, #28
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b085      	sub	sp, #20
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	4603      	mov	r3, r0
 8005abe:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005ac4:	88fb      	ldrh	r3, [r7, #6]
 8005ac6:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8005ac8:	88fa      	ldrh	r2, [r7, #6]
 8005aca:	0a12      	lsrs	r2, r2, #8
 8005acc:	b292      	uxth	r2, r2
 8005ace:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b088      	sub	sp, #32
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	60f8      	str	r0, [r7, #12]
 8005aea:	60b9      	str	r1, [r7, #8]
 8005aec:	607a      	str	r2, [r7, #4]
 8005aee:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005af0:	2300      	movs	r3, #0
 8005af2:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 8005af4:	2300      	movs	r3, #0
 8005af6:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 8005af8:	2300      	movs	r3, #0
 8005afa:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 8005afc:	2300      	movs	r3, #0
 8005afe:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8005b00:	887b      	ldrh	r3, [r7, #2]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d102      	bne.n	8005b0c <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8005b06:	23f1      	movs	r3, #241	; 0xf1
 8005b08:	77fb      	strb	r3, [r7, #31]
 8005b0a:	e05d      	b.n	8005bc8 <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 8005b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0e:	799a      	ldrb	r2, [r3, #6]
 8005b10:	887b      	ldrh	r3, [r7, #2]
 8005b12:	4611      	mov	r1, r2
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff fe64 	bl	80057e2 <VL53L1_calc_macro_period_us>
 8005b1a:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 8005b1c:	6979      	ldr	r1, [r7, #20]
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f7ff fef0 	bl	8005904 <VL53L1_calc_timeout_mclks>
 8005b24:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	2bff      	cmp	r3, #255	; 0xff
 8005b2a:	d901      	bls.n	8005b30 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 8005b2c:	23ff      	movs	r3, #255	; 0xff
 8005b2e:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 8005b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b36:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 8005b38:	6979      	ldr	r1, [r7, #20]
 8005b3a:	68b8      	ldr	r0, [r7, #8]
 8005b3c:	f7ff fef9 	bl	8005932 <VL53L1_calc_encoded_timeout>
 8005b40:	4603      	mov	r3, r0
 8005b42:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8005b44:	8a7b      	ldrh	r3, [r7, #18]
 8005b46:	0a1b      	lsrs	r3, r3, #8
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8005b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4e:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8005b50:	8a7b      	ldrh	r3, [r7, #18]
 8005b52:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 8005b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b56:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 8005b58:	6979      	ldr	r1, [r7, #20]
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7ff fee9 	bl	8005932 <VL53L1_calc_encoded_timeout>
 8005b60:	4603      	mov	r3, r0
 8005b62:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8005b64:	8a7b      	ldrh	r3, [r7, #18]
 8005b66:	0a1b      	lsrs	r3, r3, #8
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8005b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8005b70:	8a7b      	ldrh	r3, [r7, #18]
 8005b72:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 8005b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b76:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 8005b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7a:	7a5a      	ldrb	r2, [r3, #9]
 8005b7c:	887b      	ldrh	r3, [r7, #2]
 8005b7e:	4611      	mov	r1, r2
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7ff fe2e 	bl	80057e2 <VL53L1_calc_macro_period_us>
 8005b86:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 8005b88:	6979      	ldr	r1, [r7, #20]
 8005b8a:	68b8      	ldr	r0, [r7, #8]
 8005b8c:	f7ff fed1 	bl	8005932 <VL53L1_calc_encoded_timeout>
 8005b90:	4603      	mov	r3, r0
 8005b92:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8005b94:	8a7b      	ldrh	r3, [r7, #18]
 8005b96:	0a1b      	lsrs	r3, r3, #8
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 8005b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8005ba0:	8a7b      	ldrh	r3, [r7, #18]
 8005ba2:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 8005ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba6:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 8005ba8:	6979      	ldr	r1, [r7, #20]
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7ff fec1 	bl	8005932 <VL53L1_calc_encoded_timeout>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8005bb4:	8a7b      	ldrh	r3, [r7, #18]
 8005bb6:	0a1b      	lsrs	r3, r3, #8
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 8005bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbe:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8005bc0:	8a7b      	ldrh	r3, [r7, #18]
 8005bc2:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 8005bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc6:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 8005bc8:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3720      	adds	r7, #32
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	4603      	mov	r3, r0
 8005bdc:	603a      	str	r2, [r7, #0]
 8005bde:	71fb      	strb	r3, [r7, #7]
 8005be0:	460b      	mov	r3, r1
 8005be2:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 8005be4:	79fb      	ldrb	r3, [r7, #7]
 8005be6:	2b07      	cmp	r3, #7
 8005be8:	d90a      	bls.n	8005c00 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 8005bea:	79bb      	ldrb	r3, [r7, #6]
 8005bec:	00db      	lsls	r3, r3, #3
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	79fb      	ldrb	r3, [r7, #7]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	3b71      	subs	r3, #113	; 0x71
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 8005bfe:	e00a      	b.n	8005c16 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 8005c00:	79bb      	ldrb	r3, [r7, #6]
 8005c02:	f1c3 030f 	rsb	r3, r3, #15
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	00db      	lsls	r3, r3, #3
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	79fb      	ldrb	r3, [r7, #7]
 8005c0e:	4413      	add	r3, r2
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	701a      	strb	r2, [r3, #0]
}
 8005c16:	bf00      	nop
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b085      	sub	sp, #20
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	4603      	mov	r3, r0
 8005c2a:	60b9      	str	r1, [r7, #8]
 8005c2c:	607a      	str	r2, [r7, #4]
 8005c2e:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
 8005c32:	091b      	lsrs	r3, r3, #4
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
 8005c3c:	f003 030f 	and.w	r3, r3, #15
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	701a      	strb	r2, [r3, #0]

}
 8005c46:	bf00      	nop
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr

08005c52 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b083      	sub	sp, #12
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	4603      	mov	r3, r0
 8005c5a:	603a      	str	r2, [r7, #0]
 8005c5c:	71fb      	strb	r3, [r7, #7]
 8005c5e:	460b      	mov	r3, r1
 8005c60:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 8005c62:	79bb      	ldrb	r3, [r7, #6]
 8005c64:	011b      	lsls	r3, r3, #4
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	79fb      	ldrb	r3, [r7, #7]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	b2da      	uxtb	r2, r3
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	701a      	strb	r2, [r3, #0]

}
 8005c72:	bf00      	nop
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b085      	sub	sp, #20
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005c86:	2300      	movs	r3, #0
 8005c88:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2203      	movs	r2, #3
 8005c92:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 8005cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3714      	adds	r7, #20
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b085      	sub	sp, #20
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
	/*
	 * Range has been paused but may continue later
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	60bb      	str	r3, [r7, #8]
	LOG_FUNCTION_START("");

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	22ff      	movs	r2, #255	; 0xff
 8005cfa:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	/* restore vhv configs */
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d005      	beq.n	8005d2c <VL53L1_low_power_auto_data_stop_range+0x46>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f893 22e8 	ldrb.w	r2, [r3, #744]	; 0x2e8
		pdev->stat_nvm.vhv_config__init =
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	f893 32e9 	ldrb.w	r3, [r3, #745]	; 0x2e9
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d005      	beq.n	8005d42 <VL53L1_low_power_auto_data_stop_range+0x5c>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	f893 22e9 	ldrb.w	r2, [r3, #745]	; 0x2e9
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	/* remove phasecal override */
	pdev->gen_cfg.phasecal_config__override = 0x00;
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d

	LOG_FUNCTION_END(status);

	return status;
 8005d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b087      	sub	sp, #28
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005d66:	2300      	movs	r3, #0
 8005d68:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	228b      	movs	r2, #139	; 0x8b
 8005d7a:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM1_EN | \*/
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	/* Set DSS to manual/expected SPADs */
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 8005d82:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__roi_mode_control =
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2202      	movs	r2, #2
 8005d88:	729a      	strb	r2, [r3, #10]
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

	LOG_FUNCTION_END(status);

	return status;
 8005d8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	371c      	adds	r7, #28
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b085      	sub	sp, #20
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005da6:	2300      	movs	r3, #0
 8005da8:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f893 2163 	ldrb.w	r2, [r3, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 8005dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8005dda:	f003 0303 	and.w	r3, r3, #3
 8005dde:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8005dea:	4413      	add	r3, r2
 8005dec:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f893 22ae 	ldrb.w	r2, [r3, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f893 22ea 	ldrb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187

	LOG_FUNCTION_END(status);

	return status;
 8005e14:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <VL53L1_low_power_auto_update_DSS>:

VL53L1_Error VL53L1_low_power_auto_update_DSS(
	VL53L1_DEV        Dev)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]

	/*
	 * Do a DSS calculation and update manual config
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005e30:	2300      	movs	r3, #0
 8005e32:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Calc total rate per spad */

	/* 9.7 format */
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f8b3 31de 	ldrh.w	r3, [r3, #478]	; 0x1de
 8005e3a:	461a      	mov	r2, r3
		pdev->sys_results.result__ambient_count_rate_mcps_sd0;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f8b3 31d6 	ldrh.w	r3, [r3, #470]	; 0x1d6
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 8005e42:	4413      	add	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]

	/* clip to 16 bits */
	if (utemp32a > 0xFFFF)
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e4c:	d302      	bcc.n	8005e54 <VL53L1_low_power_auto_update_DSS+0x30>
		utemp32a = 0xFFFF;
 8005e4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e52:	613b      	str	r3, [r7, #16]

	/* shift up to take advantage of 32 bits */
	/* 9.23 format */
	utemp32a = utemp32a << 16;
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	041b      	lsls	r3, r3, #16
 8005e58:	613b      	str	r3, [r7, #16]

	/* check SPAD count */
	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d102      	bne.n	8005e6a <VL53L1_low_power_auto_update_DSS+0x46>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8005e64:	23f1      	movs	r3, #241	; 0xf1
 8005e66:	75fb      	strb	r3, [r7, #23]
 8005e68:	e035      	b.n	8005ed6 <VL53L1_low_power_auto_update_DSS+0xb2>
	else {
		/* format 17.15 */
		utemp32a = utemp32a /
			pdev->sys_results.result__dss_actual_effective_spads_sd0;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 8005e70:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e78:	613b      	str	r3, [r7, #16]
		/* save intermediate result */
		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
			utemp32a;

		/* get the target rate and shift up by 16
		 * format 9.23 */
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8005e88:	041b      	lsls	r3, r3, #16
 8005e8a:	613b      	str	r3, [r7, #16]
			16;

		/* check for divide by zero */
		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps == 0)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d102      	bne.n	8005e9c <VL53L1_low_power_auto_update_DSS+0x78>
			status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8005e96:	23f1      	movs	r3, #241	; 0xf1
 8005e98:	75fb      	strb	r3, [r7, #23]
 8005e9a:	e01c      	b.n	8005ed6 <VL53L1_low_power_auto_update_DSS+0xb2>
		else {
			/* divide by rate per spad
			 * format 24.8 */
			utemp32a = utemp32a /
				pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
			utemp32a = utemp32a /
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea8:	613b      	str	r3, [r7, #16]

			/* clip to 16 bit */
			if (utemp32a > 0xFFFF)
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eb0:	d302      	bcc.n	8005eb8 <VL53L1_low_power_auto_update_DSS+0x94>
				utemp32a = 0xFFFF;
 8005eb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005eb6:	613b      	str	r3, [r7, #16]

			/* save result in low power auto data */
			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

			/* override DSS config */
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
				pdev->low_power_auto_data.dss__required_spads;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f8b3 22f0 	ldrh.w	r2, [r3, #752]	; 0x2f0
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
			pdev->gen_cfg.dss_config__roi_mode_control =
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53L1_ERROR_DIVISION_BY_ZERO) {
 8005ed6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005eda:	f113 0f0f 	cmn.w	r3, #15
 8005ede:	d110      	bne.n	8005f02 <VL53L1_low_power_auto_update_DSS+0xde>
		/* We want to gracefully set a spad target, not just exit with
		* an error */

		/* set target to mid point */
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005ee6:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

		/* override DSS config */
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
		pdev->low_power_auto_data.dss__required_spads;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f8b3 22f0 	ldrh.w	r2, [r3, #752]	; 0x2f0
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
		pdev->gen_cfg.dss_config__roi_mode_control =
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2202      	movs	r2, #2
 8005efa:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		/* reset error */
		status = VL53L1_ERROR_NONE;
 8005efe:	2300      	movs	r3, #0
 8005f00:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 8005f02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	371c      	adds	r7, #28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b085      	sub	sp, #20
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	4603      	mov	r3, r0
 8005f1a:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 8005f20:	88fb      	ldrh	r3, [r7, #6]
 8005f22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005f26:	fb92 f3f3 	sdiv	r3, r2, r3
 8005f2a:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b085      	sub	sp, #20
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	4603      	mov	r3, r0
 8005f42:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8005f44:	2300      	movs	r3, #0
 8005f46:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8005f48:	79fb      	ldrb	r3, [r7, #7]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8005f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3714      	adds	r7, #20
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	4603      	mov	r3, r0
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
 8005f6c:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 8005f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	da10      	bge.n	8005f98 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 8005f76:	7bfb      	ldrb	r3, [r7, #15]
 8005f78:	43db      	mvns	r3, r3
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	3308      	adds	r3, #8
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 8005f8a:	7bfb      	ldrb	r3, [r7, #15]
 8005f8c:	3b80      	subs	r3, #128	; 0x80
 8005f8e:	10db      	asrs	r3, r3, #3
 8005f90:	b2da      	uxtb	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 8005f96:	e00c      	b.n	8005fb2 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 8005f98:	7bfb      	ldrb	r3, [r7, #15]
 8005f9a:	f003 0307 	and.w	r3, r3, #7
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
 8005fa6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8005faa:	10db      	asrs	r3, r3, #3
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	701a      	strb	r2, [r3, #0]
}
 8005fb2:	bf00      	nop
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b086      	sub	sp, #24
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	60f8      	str	r0, [r7, #12]
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	607a      	str	r2, [r7, #4]
 8005fca:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8005fd0:	897b      	ldrh	r3, [r7, #10]
 8005fd2:	2b0a      	cmp	r3, #10
 8005fd4:	d802      	bhi.n	8005fdc <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8005fd6:	f06f 0309 	mvn.w	r3, #9
 8005fda:	e047      	b.n	800606c <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fe4:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8005ff2:	f002 020f 	and.w	r2, r2, #15
 8005ff6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8005ff8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8006002:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006006:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8006008:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8006012:	f002 0203 	and.w	r2, r2, #3
 8006016:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8006018:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 8006022:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006026:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8006028:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	88d8      	ldrh	r0, [r3, #6]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	3305      	adds	r3, #5
 8006032:	461a      	mov	r2, r3
 8006034:	2102      	movs	r1, #2
 8006036:	f7ff fac8 	bl	80055ca <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8006042:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800604c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 8006056:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800605a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800605c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 8006066:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8006068:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800606c:	4618      	mov	r0, r3
 800606e:	3718      	adds	r7, #24
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	4603      	mov	r3, r0
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
 8006080:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006082:	2300      	movs	r3, #0
 8006084:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8006086:	89fb      	ldrh	r3, [r7, #14]
 8006088:	2b0a      	cmp	r3, #10
 800608a:	d802      	bhi.n	8006092 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800608c:	f06f 0309 	mvn.w	r3, #9
 8006090:	e046      	b.n	8006120 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800609a:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	3301      	adds	r3, #1
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	f003 030f 	and.w	r3, r3, #15
 80060aa:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	3302      	adds	r3, #2
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ba:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	3303      	adds	r3, #3
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	f003 0303 	and.w	r3, r3, #3
 80060ca:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	3304      	adds	r3, #4
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060da:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	3305      	adds	r3, #5
 80060e4:	4619      	mov	r1, r3
 80060e6:	2002      	movs	r0, #2
 80060e8:	f7ff fa9a 	bl	8005620 <VL53L1_i2c_decode_uint16_t>
 80060ec:	4603      	mov	r3, r0
 80060ee:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	79da      	ldrb	r2, [r3, #7]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	7a1a      	ldrb	r2, [r3, #8]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	3309      	adds	r3, #9
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800610e:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	7a9a      	ldrb	r2, [r3, #10]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800611c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3718      	adds	r7, #24
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006132:	2300      	movs	r3, #0
 8006134:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8006136:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d108      	bne.n	8006150 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800613e:	f107 020c 	add.w	r2, r7, #12
 8006142:	230b      	movs	r3, #11
 8006144:	2101      	movs	r1, #1
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f001 f8b9 	bl	80072be <VL53L1_ReadMulti>
 800614c:	4603      	mov	r3, r0
 800614e:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8006150:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d108      	bne.n	800616a <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 8006158:	f107 030c 	add.w	r3, r7, #12
 800615c:	683a      	ldr	r2, [r7, #0]
 800615e:	4619      	mov	r1, r3
 8006160:	200b      	movs	r0, #11
 8006162:	f7ff ff87 	bl	8006074 <VL53L1_i2c_decode_static_nvm_managed>
 8006166:	4603      	mov	r3, r0
 8006168:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800616a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3718      	adds	r7, #24
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b086      	sub	sp, #24
 800617a:	af00      	add	r7, sp, #0
 800617c:	60f8      	str	r0, [r7, #12]
 800617e:	460b      	mov	r3, r1
 8006180:	607a      	str	r2, [r7, #4]
 8006182:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006184:	2300      	movs	r3, #0
 8006186:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8006188:	897b      	ldrh	r3, [r7, #10]
 800618a:	2b16      	cmp	r3, #22
 800618c:	d802      	bhi.n	8006194 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800618e:	f06f 0309 	mvn.w	r3, #9
 8006192:	e076      	b.n	8006282 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80061a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 80061ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 80061b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 80061c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80061cc:	f002 020f 	and.w	r2, r2, #15
 80061d0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80061d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 80061dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 80061e6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80061ea:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80061ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 80061f6:	f002 0203 	and.w	r2, r2, #3
 80061fa:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 80061fc:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	8958      	ldrh	r0, [r3, #10]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	3309      	adds	r3, #9
 8006206:	461a      	mov	r2, r3
 8006208:	2102      	movs	r1, #2
 800620a:	f7ff f9de 	bl	80055ca <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	330b      	adds	r3, #11
 8006218:	461a      	mov	r2, r3
 800621a:	2102      	movs	r1, #2
 800621c:	f7ff fa20 	bl	8005660 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	330d      	adds	r3, #13
 800622a:	461a      	mov	r2, r3
 800622c:	2102      	movs	r1, #2
 800622e:	f7ff fa17 	bl	8005660 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8a18      	ldrh	r0, [r3, #16]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	330f      	adds	r3, #15
 800623a:	461a      	mov	r2, r3
 800623c:	2102      	movs	r1, #2
 800623e:	f7ff f9c4 	bl	80055ca <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 8006248:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800624c:	b218      	sxth	r0, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	3311      	adds	r3, #17
 8006252:	461a      	mov	r2, r3
 8006254:	2102      	movs	r1, #2
 8006256:	f7ff fa03 	bl	8005660 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	3313      	adds	r3, #19
 8006264:	461a      	mov	r2, r3
 8006266:	2102      	movs	r1, #2
 8006268:	f7ff f9fa 	bl	8005660 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	3315      	adds	r3, #21
 8006276:	461a      	mov	r2, r3
 8006278:	2102      	movs	r1, #2
 800627a:	f7ff f9f1 	bl	8005660 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800627e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3718      	adds	r7, #24
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b086      	sub	sp, #24
 800628e:	af00      	add	r7, sp, #0
 8006290:	4603      	mov	r3, r0
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	607a      	str	r2, [r7, #4]
 8006296:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006298:	2300      	movs	r3, #0
 800629a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800629c:	89fb      	ldrh	r3, [r7, #14]
 800629e:	2b16      	cmp	r3, #22
 80062a0:	d802      	bhi.n	80062a8 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80062a2:	f06f 0309 	mvn.w	r3, #9
 80062a6:	e079      	b.n	800639c <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	785a      	ldrb	r2, [r3, #1]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	789a      	ldrb	r2, [r3, #2]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	78da      	ldrb	r2, [r3, #3]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	791a      	ldrb	r2, [r3, #4]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	3305      	adds	r3, #5
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	f003 030f 	and.w	r3, r3, #15
 80062da:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	799a      	ldrb	r2, [r3, #6]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	3307      	adds	r3, #7
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062f2:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	3308      	adds	r3, #8
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	f003 0303 	and.w	r3, r3, #3
 8006302:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	3309      	adds	r3, #9
 800630c:	4619      	mov	r1, r3
 800630e:	2002      	movs	r0, #2
 8006310:	f7ff f986 	bl	8005620 <VL53L1_i2c_decode_uint16_t>
 8006314:	4603      	mov	r3, r0
 8006316:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	330b      	adds	r3, #11
 8006320:	4619      	mov	r1, r3
 8006322:	2002      	movs	r0, #2
 8006324:	f7ff f9c8 	bl	80056b8 <VL53L1_i2c_decode_int16_t>
 8006328:	4603      	mov	r3, r0
 800632a:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	330d      	adds	r3, #13
 8006334:	4619      	mov	r1, r3
 8006336:	2002      	movs	r0, #2
 8006338:	f7ff f9be 	bl	80056b8 <VL53L1_i2c_decode_int16_t>
 800633c:	4603      	mov	r3, r0
 800633e:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	330f      	adds	r3, #15
 8006348:	4619      	mov	r1, r3
 800634a:	2002      	movs	r0, #2
 800634c:	f7ff f968 	bl	8005620 <VL53L1_i2c_decode_uint16_t>
 8006350:	4603      	mov	r3, r0
 8006352:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	3311      	adds	r3, #17
 800635c:	4619      	mov	r1, r3
 800635e:	2002      	movs	r0, #2
 8006360:	f7ff f9aa 	bl	80056b8 <VL53L1_i2c_decode_int16_t>
 8006364:	4603      	mov	r3, r0
 8006366:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800636a:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	3313      	adds	r3, #19
 8006374:	4619      	mov	r1, r3
 8006376:	2002      	movs	r0, #2
 8006378:	f7ff f99e 	bl	80056b8 <VL53L1_i2c_decode_int16_t>
 800637c:	4603      	mov	r3, r0
 800637e:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	3315      	adds	r3, #21
 8006388:	4619      	mov	r1, r3
 800638a:	2002      	movs	r0, #2
 800638c:	f7ff f994 	bl	80056b8 <VL53L1_i2c_decode_int16_t>
 8006390:	4603      	mov	r3, r0
 8006392:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 8006398:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800639c:	4618      	mov	r0, r3
 800639e:	3718      	adds	r7, #24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b088      	sub	sp, #32
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80063ae:	2300      	movs	r3, #0
 80063b0:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80063b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d108      	bne.n	80063cc <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 80063ba:	f107 0208 	add.w	r2, r7, #8
 80063be:	2317      	movs	r3, #23
 80063c0:	210d      	movs	r1, #13
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 ff7b 	bl	80072be <VL53L1_ReadMulti>
 80063c8:	4603      	mov	r3, r0
 80063ca:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80063cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d108      	bne.n	80063e6 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 80063d4:	f107 0308 	add.w	r3, r7, #8
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	4619      	mov	r1, r3
 80063dc:	2017      	movs	r0, #23
 80063de:	f7ff ff54 	bl	800628a <VL53L1_i2c_decode_customer_nvm_managed>
 80063e2:	4603      	mov	r3, r0
 80063e4:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80063e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3720      	adds	r7, #32
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b086      	sub	sp, #24
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	60f8      	str	r0, [r7, #12]
 80063fa:	460b      	mov	r3, r1
 80063fc:	607a      	str	r2, [r7, #4]
 80063fe:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006400:	2300      	movs	r3, #0
 8006402:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8006404:	897b      	ldrh	r3, [r7, #10]
 8006406:	2b1f      	cmp	r3, #31
 8006408:	d802      	bhi.n	8006410 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800640a:	f06f 0309 	mvn.w	r3, #9
 800640e:	e0cf      	b.n	80065b0 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	2102      	movs	r1, #2
 8006418:	4618      	mov	r0, r3
 800641a:	f7ff f8d6 	bl	80055ca <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 8006426:	f002 0201 	and.w	r2, r2, #1
 800642a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800642c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 8006436:	f002 020f 	and.w	r2, r2, #15
 800643a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800643c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 8006446:	f002 020f 	and.w	r2, r2, #15
 800644a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800644c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 8006456:	f002 021f 	and.w	r2, r2, #31
 800645a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800645c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8006466:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800646a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800646c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 8006476:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800647a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800647c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 8006486:	f002 0201 	and.w	r2, r2, #1
 800648a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800648c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 8006496:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80064a0:	f002 0201 	and.w	r2, r2, #1
 80064a4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 80064a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 80064b0:	f002 0203 	and.w	r2, r2, #3
 80064b4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80064b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 80064c0:	f002 021f 	and.w	r2, r2, #31
 80064c4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 80064c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 80064d0:	f002 0203 	and.w	r2, r2, #3
 80064d4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 80064d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 80064e0:	f002 0203 	and.w	r2, r2, #3
 80064e4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 80064e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 80064f0:	f002 0207 	and.w	r2, r2, #7
 80064f4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 80064f6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8006500:	f002 021f 	and.w	r2, r2, #31
 8006504:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 8006506:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8006510:	f002 0201 	and.w	r2, r2, #1
 8006514:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8006516:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8006520:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800652a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8006534:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800653e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 8006548:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 8006552:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8b18      	ldrh	r0, [r3, #24]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	3318      	adds	r3, #24
 800655c:	461a      	mov	r2, r3
 800655e:	2102      	movs	r1, #2
 8006560:	f7ff f833 	bl	80055ca <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800656c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 8006576:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 8006580:	f002 020f 	and.w	r2, r2, #15
 8006584:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 8006586:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 8006590:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800659a:	f002 020f 	and.w	r2, r2, #15
 800659e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 80065a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 80065aa:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80065ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3718      	adds	r7, #24
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	460b      	mov	r3, r1
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80065c6:	2300      	movs	r3, #0
 80065c8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 80065ca:	897b      	ldrh	r3, [r7, #10]
 80065cc:	2b15      	cmp	r3, #21
 80065ce:	d802      	bhi.n	80065d6 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80065d0:	f06f 0309 	mvn.w	r3, #9
 80065d4:	e070      	b.n	80066b8 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80065e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 80065f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 80065fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80065fe:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8006600:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 8006606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800660a:	b298      	uxth	r0, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	3304      	adds	r3, #4
 8006610:	461a      	mov	r2, r3
 8006612:	2102      	movs	r1, #2
 8006614:	f7fe ffd9 	bl	80055ca <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 8006620:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006624:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8006626:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 8006630:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800663a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8006644:	f002 0201 	and.w	r2, r2, #1
 8006648:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800664a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 8006654:	f002 0207 	and.w	r2, r2, #7
 8006658:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800665a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	8998      	ldrh	r0, [r3, #12]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	330c      	adds	r3, #12
 8006664:	461a      	mov	r2, r3
 8006666:	2102      	movs	r1, #2
 8006668:	f7fe ffaf 	bl	80055ca <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	89d8      	ldrh	r0, [r3, #14]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	330e      	adds	r3, #14
 8006674:	461a      	mov	r2, r3
 8006676:	2102      	movs	r1, #2
 8006678:	f7fe ffa7 	bl	80055ca <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8a18      	ldrh	r0, [r3, #16]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	3310      	adds	r3, #16
 8006684:	461a      	mov	r2, r3
 8006686:	2102      	movs	r1, #2
 8006688:	f7fe ff9f 	bl	80055ca <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8006694:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800669e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 80066a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 80066b2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80066b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3718      	adds	r7, #24
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	460b      	mov	r3, r1
 80066ca:	607a      	str	r2, [r7, #4]
 80066cc:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80066ce:	2300      	movs	r3, #0
 80066d0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 80066d2:	897b      	ldrh	r3, [r7, #10]
 80066d4:	2b16      	cmp	r3, #22
 80066d6:	d802      	bhi.n	80066de <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80066d8:	f06f 0309 	mvn.w	r3, #9
 80066dc:	e06e      	b.n	80067bc <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	f003 030f 	and.w	r3, r3, #15
 80066e6:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80066f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 80066fe:	f002 020f 	and.w	r2, r2, #15
 8006702:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8006704:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800670e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8006718:	f002 020f 	and.w	r2, r2, #15
 800671c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800671e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8006728:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 8006732:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8006736:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8006738:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8006742:	f002 020f 	and.w	r2, r2, #15
 8006746:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8006748:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8006752:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800675c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8006760:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8006762:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	8958      	ldrh	r0, [r3, #10]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	330a      	adds	r3, #10
 800676c:	461a      	mov	r2, r3
 800676e:	2102      	movs	r1, #2
 8006770:	f7fe ff2b 	bl	80055ca <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	8998      	ldrh	r0, [r3, #12]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	330c      	adds	r3, #12
 800677c:	461a      	mov	r2, r3
 800677e:	2102      	movs	r1, #2
 8006780:	f7fe ff23 	bl	80055ca <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800678c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 8006796:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6918      	ldr	r0, [r3, #16]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3312      	adds	r3, #18
 80067a0:	461a      	mov	r2, r3
 80067a2:	2104      	movs	r1, #4
 80067a4:	f7fe ffb1 	bl	800570a <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 80067b0:	f002 0201 	and.w	r2, r2, #1
 80067b4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 80067b6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80067b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3718      	adds	r7, #24
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	460b      	mov	r3, r1
 80067ce:	607a      	str	r2, [r7, #4]
 80067d0:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80067d2:	2300      	movs	r3, #0
 80067d4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 80067d6:	897b      	ldrh	r3, [r7, #10]
 80067d8:	2b11      	cmp	r3, #17
 80067da:	d802      	bhi.n	80067e2 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80067dc:	f06f 0309 	mvn.w	r3, #9
 80067e0:	e071      	b.n	80068c6 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	f003 0303 	and.w	r3, r3, #3
 80067ea:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8858      	ldrh	r0, [r3, #2]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	3301      	adds	r3, #1
 80067f8:	461a      	mov	r2, r3
 80067fa:	2102      	movs	r1, #2
 80067fc:	f7fe fee5 	bl	80055ca <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	8898      	ldrh	r0, [r3, #4]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	3303      	adds	r3, #3
 8006808:	461a      	mov	r2, r3
 800680a:	2102      	movs	r1, #2
 800680c:	f7fe fedd 	bl	80055ca <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8006818:	f002 0201 	and.w	r2, r2, #1
 800681c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800681e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 8006828:	f002 0207 	and.w	r2, r2, #7
 800682c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800682e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8006838:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8006842:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800684c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006850:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8006852:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800685c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006860:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8006862:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800686c:	f002 0203 	and.w	r2, r2, #3
 8006870:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8006872:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800687c:	f002 0203 	and.w	r2, r2, #3
 8006880:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8006882:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800688c:	f002 020f 	and.w	r2, r2, #15
 8006890:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8006892:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800689c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 80068a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 80068b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 80068ba:	f002 0203 	and.w	r2, r2, #3
 80068be:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 80068c0:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80068c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3718      	adds	r7, #24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b087      	sub	sp, #28
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	60f8      	str	r0, [r7, #12]
 80068d6:	460b      	mov	r3, r1
 80068d8:	607a      	str	r2, [r7, #4]
 80068da:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80068dc:	2300      	movs	r3, #0
 80068de:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 80068e0:	897b      	ldrh	r3, [r7, #10]
 80068e2:	2b04      	cmp	r3, #4
 80068e4:	d802      	bhi.n	80068ec <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80068e6:	f06f 0309 	mvn.w	r3, #9
 80068ea:	e025      	b.n	8006938 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	f003 0301 	and.w	r3, r3, #1
 80068f4:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8006902:	f002 0201 	and.w	r2, r2, #1
 8006906:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8006908:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8006912:	f002 0201 	and.w	r2, r2, #1
 8006916:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8006918:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8006922:	f002 0203 	and.w	r2, r2, #3
 8006926:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8006928:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8006932:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8006934:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006938:	4618      	mov	r0, r3
 800693a:	371c      	adds	r7, #28
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
	/**
	 * Serialises and sends the contents of VL53L1_system_control_t
	 * data structure to the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800694e:	2300      	movs	r3, #0
 8006950:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8006952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d108      	bne.n	800696c <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 800695a:	f107 0308 	add.w	r3, r7, #8
 800695e:	461a      	mov	r2, r3
 8006960:	2105      	movs	r1, #5
 8006962:	6838      	ldr	r0, [r7, #0]
 8006964:	f7ff ffb3 	bl	80068ce <VL53L1_i2c_encode_system_control>
 8006968:	4603      	mov	r3, r0
 800696a:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 800696c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d108      	bne.n	8006986 <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 8006974:	f107 0208 	add.w	r2, r7, #8
 8006978:	2305      	movs	r3, #5
 800697a:	2183      	movs	r1, #131	; 0x83
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fc7b 	bl	8007278 <VL53L1_WriteMulti>
 8006982:	4603      	mov	r3, r0
 8006984:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 8006986:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b086      	sub	sp, #24
 8006996:	af00      	add	r7, sp, #0
 8006998:	4603      	mov	r3, r0
 800699a:	60b9      	str	r1, [r7, #8]
 800699c:	607a      	str	r2, [r7, #4]
 800699e:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80069a0:	2300      	movs	r3, #0
 80069a2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 80069a4:	89fb      	ldrh	r3, [r7, #14]
 80069a6:	2b2b      	cmp	r3, #43	; 0x2b
 80069a8:	d802      	bhi.n	80069b0 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80069aa:	f06f 0309 	mvn.w	r3, #9
 80069ae:	e0e2      	b.n	8006b76 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069b8:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	785a      	ldrb	r2, [r3, #1]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	3302      	adds	r3, #2
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	f003 030f 	and.w	r3, r3, #15
 80069d0:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	78da      	ldrb	r2, [r3, #3]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	3304      	adds	r3, #4
 80069e2:	4619      	mov	r1, r3
 80069e4:	2002      	movs	r0, #2
 80069e6:	f7fe fe1b 	bl	8005620 <VL53L1_i2c_decode_uint16_t>
 80069ea:	4603      	mov	r3, r0
 80069ec:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	3306      	adds	r3, #6
 80069f6:	4619      	mov	r1, r3
 80069f8:	2002      	movs	r0, #2
 80069fa:	f7fe fe11 	bl	8005620 <VL53L1_i2c_decode_uint16_t>
 80069fe:	4603      	mov	r3, r0
 8006a00:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	3308      	adds	r3, #8
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	2002      	movs	r0, #2
 8006a0e:	f7fe fe07 	bl	8005620 <VL53L1_i2c_decode_uint16_t>
 8006a12:	4603      	mov	r3, r0
 8006a14:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	330a      	adds	r3, #10
 8006a1e:	4619      	mov	r1, r3
 8006a20:	2002      	movs	r0, #2
 8006a22:	f7fe fdfd 	bl	8005620 <VL53L1_i2c_decode_uint16_t>
 8006a26:	4603      	mov	r3, r0
 8006a28:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	330c      	adds	r3, #12
 8006a32:	4619      	mov	r1, r3
 8006a34:	2002      	movs	r0, #2
 8006a36:	f7fe fdf3 	bl	8005620 <VL53L1_i2c_decode_uint16_t>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	330e      	adds	r3, #14
 8006a46:	4619      	mov	r1, r3
 8006a48:	2002      	movs	r0, #2
 8006a4a:	f7fe fde9 	bl	8005620 <VL53L1_i2c_decode_uint16_t>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	3310      	adds	r3, #16
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	2002      	movs	r0, #2
 8006a5e:	f7fe fddf 	bl	8005620 <VL53L1_i2c_decode_uint16_t>
 8006a62:	4603      	mov	r3, r0
 8006a64:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	3312      	adds	r3, #18
 8006a6e:	4619      	mov	r1, r3
 8006a70:	2002      	movs	r0, #2
 8006a72:	f7fe fdd5 	bl	8005620 <VL53L1_i2c_decode_uint16_t>
 8006a76:	4603      	mov	r3, r0
 8006a78:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	3314      	adds	r3, #20
 8006a82:	4619      	mov	r1, r3
 8006a84:	2002      	movs	r0, #2
 8006a86:	f7fe fdcb 	bl	8005620 <VL53L1_i2c_decode_uint16_t>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	3316      	adds	r3, #22
 8006a96:	4619      	mov	r1, r3
 8006a98:	2002      	movs	r0, #2
 8006a9a:	f7fe fdc1 	bl	8005620 <VL53L1_i2c_decode_uint16_t>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	3318      	adds	r3, #24
 8006aaa:	4619      	mov	r1, r3
 8006aac:	2002      	movs	r0, #2
 8006aae:	f7fe fdb7 	bl	8005620 <VL53L1_i2c_decode_uint16_t>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	331a      	adds	r3, #26
 8006abe:	4619      	mov	r1, r3
 8006ac0:	2002      	movs	r0, #2
 8006ac2:	f7fe fdad 	bl	8005620 <VL53L1_i2c_decode_uint16_t>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	331c      	adds	r3, #28
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	2002      	movs	r0, #2
 8006ad6:	f7fe fda3 	bl	8005620 <VL53L1_i2c_decode_uint16_t>
 8006ada:	4603      	mov	r3, r0
 8006adc:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	331e      	adds	r3, #30
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	2002      	movs	r0, #2
 8006aea:	f7fe fd99 	bl	8005620 <VL53L1_i2c_decode_uint16_t>
 8006aee:	4603      	mov	r3, r0
 8006af0:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	3320      	adds	r3, #32
 8006afa:	4619      	mov	r1, r3
 8006afc:	2002      	movs	r0, #2
 8006afe:	f7fe fd8f 	bl	8005620 <VL53L1_i2c_decode_uint16_t>
 8006b02:	4603      	mov	r3, r0
 8006b04:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	3322      	adds	r3, #34	; 0x22
 8006b0e:	4619      	mov	r1, r3
 8006b10:	2002      	movs	r0, #2
 8006b12:	f7fe fd85 	bl	8005620 <VL53L1_i2c_decode_uint16_t>
 8006b16:	4603      	mov	r3, r0
 8006b18:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	3324      	adds	r3, #36	; 0x24
 8006b22:	4619      	mov	r1, r3
 8006b24:	2002      	movs	r0, #2
 8006b26:	f7fe fd7b 	bl	8005620 <VL53L1_i2c_decode_uint16_t>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	3326      	adds	r3, #38	; 0x26
 8006b36:	4619      	mov	r1, r3
 8006b38:	2002      	movs	r0, #2
 8006b3a:	f7fe fd71 	bl	8005620 <VL53L1_i2c_decode_uint16_t>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	3328      	adds	r3, #40	; 0x28
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	2002      	movs	r0, #2
 8006b4e:	f7fe fd67 	bl	8005620 <VL53L1_i2c_decode_uint16_t>
 8006b52:	4603      	mov	r3, r0
 8006b54:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8006b72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b086      	sub	sp, #24
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	4603      	mov	r3, r0
 8006b86:	60b9      	str	r1, [r7, #8]
 8006b88:	607a      	str	r2, [r7, #4]
 8006b8a:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 8006b90:	89fb      	ldrh	r3, [r7, #14]
 8006b92:	2b20      	cmp	r3, #32
 8006b94:	d802      	bhi.n	8006b9c <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8006b96:	f06f 0309 	mvn.w	r3, #9
 8006b9a:	e04d      	b.n	8006c38 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 8006b9c:	68b9      	ldr	r1, [r7, #8]
 8006b9e:	2004      	movs	r0, #4
 8006ba0:	f7fe fddd 	bl	800575e <VL53L1_i2c_decode_uint32_t>
 8006ba4:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	3304      	adds	r3, #4
 8006bae:	4619      	mov	r1, r3
 8006bb0:	2004      	movs	r0, #4
 8006bb2:	f7fe fdd4 	bl	800575e <VL53L1_i2c_decode_uint32_t>
 8006bb6:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	3308      	adds	r3, #8
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	2004      	movs	r0, #4
 8006bc4:	f7fe fde8 	bl	8005798 <VL53L1_i2c_decode_int32_t>
 8006bc8:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	330c      	adds	r3, #12
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	2004      	movs	r0, #4
 8006bd6:	f7fe fdc2 	bl	800575e <VL53L1_i2c_decode_uint32_t>
 8006bda:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	3310      	adds	r3, #16
 8006be4:	4619      	mov	r1, r3
 8006be6:	2004      	movs	r0, #4
 8006be8:	f7fe fdb9 	bl	800575e <VL53L1_i2c_decode_uint32_t>
 8006bec:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	3314      	adds	r3, #20
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	2004      	movs	r0, #4
 8006bfa:	f7fe fdb0 	bl	800575e <VL53L1_i2c_decode_uint32_t>
 8006bfe:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	3318      	adds	r3, #24
 8006c08:	4619      	mov	r1, r3
 8006c0a:	2004      	movs	r0, #4
 8006c0c:	f7fe fdc4 	bl	8005798 <VL53L1_i2c_decode_int32_t>
 8006c10:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	331c      	adds	r3, #28
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	2004      	movs	r0, #4
 8006c1e:	f7fe fd9e 	bl	800575e <VL53L1_i2c_decode_uint32_t>
 8006c22:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	f893 2020 	ldrb.w	r2, [r3, #32]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8006c34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3718      	adds	r7, #24
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	4603      	mov	r3, r0
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
 8006c4c:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 8006c52:	89fb      	ldrh	r3, [r7, #14]
 8006c54:	2b37      	cmp	r3, #55	; 0x37
 8006c56:	d802      	bhi.n	8006c5e <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8006c58:	f06f 0309 	mvn.w	r3, #9
 8006c5c:	e15e      	b.n	8006f1c <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 8006c5e:	68b9      	ldr	r1, [r7, #8]
 8006c60:	2002      	movs	r0, #2
 8006c62:	f7fe fcdd 	bl	8005620 <VL53L1_i2c_decode_uint16_t>
 8006c66:	4603      	mov	r3, r0
 8006c68:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	3302      	adds	r3, #2
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c78:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	3303      	adds	r3, #3
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c88:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	3304      	adds	r3, #4
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	f003 0303 	and.w	r3, r3, #3
 8006c98:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	3305      	adds	r3, #5
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	f003 0301 	and.w	r3, r3, #1
 8006ca8:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	3306      	adds	r3, #6
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cb8:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	3307      	adds	r3, #7
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cc8:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	3308      	adds	r3, #8
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	2002      	movs	r0, #2
 8006cd6:	f7fe fca3 	bl	8005620 <VL53L1_i2c_decode_uint16_t>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ce0:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	330a      	adds	r3, #10
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	f003 0303 	and.w	r3, r3, #3
 8006cf0:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	330b      	adds	r3, #11
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	f003 0303 	and.w	r3, r3, #3
 8006d00:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	330c      	adds	r3, #12
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	f003 030f 	and.w	r3, r3, #15
 8006d10:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	330d      	adds	r3, #13
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	330e      	adds	r3, #14
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	330f      	adds	r3, #15
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	f003 0303 	and.w	r3, r3, #3
 8006d40:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	7c1a      	ldrb	r2, [r3, #16]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	7c5a      	ldrb	r2, [r3, #17]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	3312      	adds	r3, #18
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	2002      	movs	r0, #2
 8006d5e:	f7fe fc5f 	bl	8005620 <VL53L1_i2c_decode_uint16_t>
 8006d62:	4603      	mov	r3, r0
 8006d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d68:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	3316      	adds	r3, #22
 8006d72:	4619      	mov	r1, r3
 8006d74:	2002      	movs	r0, #2
 8006d76:	f7fe fc53 	bl	8005620 <VL53L1_i2c_decode_uint16_t>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	3318      	adds	r3, #24
 8006d86:	4619      	mov	r1, r3
 8006d88:	2002      	movs	r0, #2
 8006d8a:	f7fe fc49 	bl	8005620 <VL53L1_i2c_decode_uint16_t>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	331a      	adds	r3, #26
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	331b      	adds	r3, #27
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	f003 0307 	and.w	r3, r3, #7
 8006db0:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	7f1a      	ldrb	r2, [r3, #28]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	7f5a      	ldrb	r2, [r3, #29]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	331e      	adds	r3, #30
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dd0:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	331f      	adds	r3, #31
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006de0:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	3320      	adds	r3, #32
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	f003 0303 	and.w	r3, r3, #3
 8006df0:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	3321      	adds	r3, #33	; 0x21
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	f003 030f 	and.w	r3, r3, #15
 8006e00:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	3325      	adds	r3, #37	; 0x25
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	f003 0301 	and.w	r3, r3, #1
 8006e34:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	3326      	adds	r3, #38	; 0x26
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	f003 0303 	and.w	r3, r3, #3
 8006e46:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	3327      	adds	r3, #39	; 0x27
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	f003 031f 	and.w	r3, r3, #31
 8006e58:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	3328      	adds	r3, #40	; 0x28
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	f003 031f 	and.w	r3, r3, #31
 8006e6a:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	3329      	adds	r3, #41	; 0x29
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	f003 031f 	and.w	r3, r3, #31
 8006e7c:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	332a      	adds	r3, #42	; 0x2a
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	f003 0301 	and.w	r3, r3, #1
 8006e8e:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	332b      	adds	r3, #43	; 0x2b
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	f003 0301 	and.w	r3, r3, #1
 8006ea0:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	332c      	adds	r3, #44	; 0x2c
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	f003 0303 	and.w	r3, r3, #3
 8006eb2:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	332d      	adds	r3, #45	; 0x2d
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ec4:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	332e      	adds	r3, #46	; 0x2e
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	2004      	movs	r0, #4
 8006ed4:	f7fe fc43 	bl	800575e <VL53L1_i2c_decode_uint32_t>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	3332      	adds	r3, #50	; 0x32
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	2004      	movs	r0, #4
 8006eea:	f7fe fc38 	bl	800575e <VL53L1_i2c_decode_uint32_t>
 8006eee:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	3336      	adds	r3, #54	; 0x36
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	3337      	adds	r3, #55	; 0x37
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 8006f18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3718      	adds	r7, #24
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
 8006f30:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006f32:	2300      	movs	r3, #0
 8006f34:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 8006f36:	89fb      	ldrh	r3, [r7, #14]
 8006f38:	2b30      	cmp	r3, #48	; 0x30
 8006f3a:	d802      	bhi.n	8006f42 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8006f3c:	f06f 0309 	mvn.w	r3, #9
 8006f40:	e112      	b.n	8007168 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	785a      	ldrb	r2, [r3, #1]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	789a      	ldrb	r2, [r3, #2]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	3303      	adds	r3, #3
 8006f5e:	4619      	mov	r1, r3
 8006f60:	2002      	movs	r0, #2
 8006f62:	f7fe fb5d 	bl	8005620 <VL53L1_i2c_decode_uint16_t>
 8006f66:	4603      	mov	r3, r0
 8006f68:	461a      	mov	r2, r3
	pdata->identification__module_id =
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	3305      	adds	r3, #5
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f78:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	3306      	adds	r3, #6
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	f003 0307 	and.w	r3, r3, #7
 8006f88:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	3307      	adds	r3, #7
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	f003 0307 	and.w	r3, r3, #7
 8006f98:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	3308      	adds	r3, #8
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fa8:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	3309      	adds	r3, #9
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fb8:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	330a      	adds	r3, #10
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	330b      	adds	r3, #11
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fd8:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	330c      	adds	r3, #12
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	f003 0301 	and.w	r3, r3, #1
 8006fe8:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	330d      	adds	r3, #13
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ff8:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	330e      	adds	r3, #14
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007008:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	7bda      	ldrb	r2, [r3, #15]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	7c1a      	ldrb	r2, [r3, #16]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	7c5a      	ldrb	r2, [r3, #17]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	7c9a      	ldrb	r2, [r3, #18]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	7cda      	ldrb	r2, [r3, #19]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	7d1a      	ldrb	r2, [r3, #20]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	7d5a      	ldrb	r2, [r3, #21]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	7d9a      	ldrb	r2, [r3, #22]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	7dda      	ldrb	r2, [r3, #23]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	7e1a      	ldrb	r2, [r3, #24]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	7e5a      	ldrb	r2, [r3, #25]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	7e9a      	ldrb	r2, [r3, #26]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	7eda      	ldrb	r2, [r3, #27]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	7f1a      	ldrb	r2, [r3, #28]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	7f5a      	ldrb	r2, [r3, #29]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	7f9a      	ldrb	r2, [r3, #30]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	7fda      	ldrb	r2, [r3, #31]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8007164:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007168:	4618      	mov	r0, r3
 800716a:	3718      	adds	r7, #24
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b090      	sub	sp, #64	; 0x40
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800717a:	2300      	movs	r3, #0
 800717c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8007180:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10a      	bne.n	800719e <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 8007188:	f107 020c 	add.w	r2, r7, #12
 800718c:	2331      	movs	r3, #49	; 0x31
 800718e:	f240 110f 	movw	r1, #271	; 0x10f
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f893 	bl	80072be <VL53L1_ReadMulti>
 8007198:	4603      	mov	r3, r0
 800719a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800719e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d109      	bne.n	80071ba <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 80071a6:	f107 030c 	add.w	r3, r7, #12
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	4619      	mov	r1, r3
 80071ae:	2031      	movs	r0, #49	; 0x31
 80071b0:	f7ff feb8 	bl	8006f24 <VL53L1_i2c_decode_nvm_copy_data>
 80071b4:	4603      	mov	r3, r0
 80071b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80071ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3740      	adds	r7, #64	; 0x40
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b086      	sub	sp, #24
 80071ca:	af02      	add	r7, sp, #8
 80071cc:	6078      	str	r0, [r7, #4]
 80071ce:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80071d0:	2300      	movs	r3, #0
 80071d2:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(Dev,VL53L1_FIRMWARE_BOOT_TIME_US);
 80071d4:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f8e7 	bl	80073ac <VL53L1_WaitUs>
 80071de:	4603      	mov	r3, r0
 80071e0:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 80071e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10b      	bne.n	8007202 <VL53L1_poll_for_boot_completion+0x3c>
		status =VL53L1_WaitValueMaskEx(
 80071ea:	2301      	movs	r3, #1
 80071ec:	9301      	str	r3, [sp, #4]
 80071ee:	2301      	movs	r3, #1
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	2301      	movs	r3, #1
 80071f4:	22e5      	movs	r2, #229	; 0xe5
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f8ec 	bl	80073d6 <VL53L1_WaitValueMaskEx>
 80071fe:	4603      	mov	r3, r0
 8007200:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8007202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d103      	bne.n	8007212 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 800720a:	2103      	movs	r1, #3
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f7fd ffbf 	bl	8005190 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8007212:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b088      	sub	sp, #32
 8007222:	af02      	add	r7, sp, #8
 8007224:	6078      	str	r0, [r7, #4]
 8007226:	6039      	str	r1, [r7, #0]
	 *
	 * Interrupt may be either active high or active low. Use active_high to
	 * select the required level check
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007228:	2300      	movs	r3, #0
 800722a:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8007230:	2300      	movs	r3, #0
 8007232:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 8007234:	2300      	movs	r3, #0
 8007236:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
	gpio__mux_active_high_hv =
 800723e:	f003 0310 	and.w	r3, r3, #16
 8007242:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8007244:	7bfb      	ldrb	r3, [r7, #15]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d102      	bne.n	8007250 <VL53L1_poll_for_range_completion+0x32>
		interrupt_ready = 0x01;
 800724a:	2301      	movs	r3, #1
 800724c:	75fb      	strb	r3, [r7, #23]
 800724e:	e001      	b.n	8007254 <VL53L1_poll_for_range_completion+0x36>
	else
		interrupt_ready = 0x00;
 8007250:	2300      	movs	r3, #0
 8007252:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 8007254:	7dfb      	ldrb	r3, [r7, #23]
 8007256:	2201      	movs	r2, #1
 8007258:	9201      	str	r2, [sp, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	9200      	str	r2, [sp, #0]
 800725e:	2231      	movs	r2, #49	; 0x31
 8007260:	6839      	ldr	r1, [r7, #0]
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f8b7 	bl	80073d6 <VL53L1_WaitValueMaskEx>
 8007268:	4603      	mov	r3, r0
 800726a:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 800726c:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3718      	adds	r7, #24
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <VL53L1_WriteMulti>:
{
    return GetMicro();                       //usʱ���
}


VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8007278:	b590      	push	{r4, r7, lr}
 800727a:	b08b      	sub	sp, #44	; 0x2c
 800727c:	af04      	add	r7, sp, #16
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	607a      	str	r2, [r7, #4]
 8007282:	603b      	str	r3, [r7, #0]
 8007284:	460b      	mov	r3, r1
 8007286:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007288:	2300      	movs	r3, #0
 800728a:	75fb      	strb	r3, [r7, #23]
	
    HAL_I2C_Mem_Write(Dev->I2cHandle ,Dev->I2cDevAddr,index,I2C_MEMADD_SIZE_16BIT,pdata,count,0xFFFF);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 8007298:	b299      	uxth	r1, r3
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	b29b      	uxth	r3, r3
 800729e:	897a      	ldrh	r2, [r7, #10]
 80072a0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80072a4:	9402      	str	r4, [sp, #8]
 80072a6:	9301      	str	r3, [sp, #4]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	2310      	movs	r3, #16
 80072ae:	f000 fe1f 	bl	8007ef0 <HAL_I2C_Mem_Write>
	
    return Status;
 80072b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	371c      	adds	r7, #28
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd90      	pop	{r4, r7, pc}

080072be <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80072be:	b590      	push	{r4, r7, lr}
 80072c0:	b08b      	sub	sp, #44	; 0x2c
 80072c2:	af04      	add	r7, sp, #16
 80072c4:	60f8      	str	r0, [r7, #12]
 80072c6:	607a      	str	r2, [r7, #4]
 80072c8:	603b      	str	r3, [r7, #0]
 80072ca:	460b      	mov	r3, r1
 80072cc:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80072ce:	2300      	movs	r3, #0
 80072d0:	75fb      	strb	r3, [r7, #23]
	
    HAL_I2C_Mem_Read(Dev->I2cHandle ,Dev->I2cDevAddr,index,I2C_MEMADD_SIZE_16BIT,pdata,count,0xFFFF);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 80072de:	b299      	uxth	r1, r3
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	897a      	ldrh	r2, [r7, #10]
 80072e6:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80072ea:	9402      	str	r4, [sp, #8]
 80072ec:	9301      	str	r3, [sp, #4]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	2310      	movs	r3, #16
 80072f4:	f000 fef6 	bl	80080e4 <HAL_I2C_Mem_Read>
	
    return Status;
 80072f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	371c      	adds	r7, #28
 8007300:	46bd      	mov	sp, r7
 8007302:	bd90      	pop	{r4, r7, pc}

08007304 <VL53L1_RdByte>:
	Status = VL53L1_WrByte(Dev, index, data);  
	
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8007304:	b580      	push	{r7, lr}
 8007306:	b08a      	sub	sp, #40	; 0x28
 8007308:	af04      	add	r7, sp, #16
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	460b      	mov	r3, r1
 800730e:	607a      	str	r2, [r7, #4]
 8007310:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007312:	2300      	movs	r3, #0
 8007314:	75fb      	strb	r3, [r7, #23]

    HAL_I2C_Mem_Read(Dev->I2cHandle ,Dev->I2cDevAddr,index,I2C_MEMADD_SIZE_16BIT,data,1,0xFFFF);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 8007322:	b299      	uxth	r1, r3
 8007324:	897a      	ldrh	r2, [r7, #10]
 8007326:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800732a:	9302      	str	r3, [sp, #8]
 800732c:	2301      	movs	r3, #1
 800732e:	9301      	str	r3, [sp, #4]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	9300      	str	r3, [sp, #0]
 8007334:	2310      	movs	r3, #16
 8007336:	f000 fed5 	bl	80080e4 <HAL_I2C_Mem_Read>
	
    return Status;
 800733a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3718      	adds	r7, #24
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8007346:	b580      	push	{r7, lr}
 8007348:	b086      	sub	sp, #24
 800734a:	af00      	add	r7, sp, #0
 800734c:	60f8      	str	r0, [r7, #12]
 800734e:	460b      	mov	r3, r1
 8007350:	607a      	str	r2, [r7, #4]
 8007352:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007354:	2300      	movs	r3, #0
 8007356:	75fb      	strb	r3, [r7, #23]
	
	uint8_t buf[2];
	
	Status = VL53L1_ReadMulti(Dev, index, buf, 2);
 8007358:	f107 0214 	add.w	r2, r7, #20
 800735c:	8979      	ldrh	r1, [r7, #10]
 800735e:	2302      	movs	r3, #2
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f7ff ffac 	bl	80072be <VL53L1_ReadMulti>
 8007366:	4603      	mov	r3, r0
 8007368:	75fb      	strb	r3, [r7, #23]
	*data = ((uint16_t)buf[0] << 8)+(uint16_t)buf[1];
 800736a:	7d3b      	ldrb	r3, [r7, #20]
 800736c:	b29b      	uxth	r3, r3
 800736e:	021b      	lsls	r3, r3, #8
 8007370:	b29a      	uxth	r2, r3
 8007372:	7d7b      	ldrb	r3, [r7, #21]
 8007374:	b29b      	uxth	r3, r3
 8007376:	4413      	add	r3, r2
 8007378:	b29a      	uxth	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	801a      	strh	r2, [r3, #0]
	
    return Status;
 800737e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3718      	adds	r7, #24
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <VL53L1_WaitMs>:
	VL53L1_Error status  = VL53L1_ERROR_NONE;
	*ptimer_freq_hz=30000000;		//30MHz
	return status;
}

VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 800738a:	b580      	push	{r7, lr}
 800738c:	b084      	sub	sp, #16
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	6039      	str	r1, [r7, #0]
	VL53L1_Error status  = VL53L1_ERROR_NONE;
 8007394:	2300      	movs	r3, #0
 8007396:	73fb      	strb	r3, [r7, #15]
	DelayMs(wait_ms);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	4618      	mov	r0, r3
 800739c:	f7fa fb38 	bl	8001a10 <DelayMs>
	return status;
 80073a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
	VL53L1_Error status  = VL53L1_ERROR_NONE;
 80073b6:	2300      	movs	r3, #0
 80073b8:	73fb      	strb	r3, [r7, #15]
	DelayUs(wait_us);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	461a      	mov	r2, r3
 80073be:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80073c2:	4610      	mov	r0, r2
 80073c4:	4619      	mov	r1, r3
 80073c6:	f7fa fb38 	bl	8001a3a <DelayUs>
	return status;
 80073ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b088      	sub	sp, #32
 80073da:	af00      	add	r7, sp, #0
 80073dc:	60f8      	str	r0, [r7, #12]
 80073de:	60b9      	str	r1, [r7, #8]
 80073e0:	4611      	mov	r1, r2
 80073e2:	461a      	mov	r2, r3
 80073e4:	460b      	mov	r3, r1
 80073e6:	80fb      	strh	r3, [r7, #6]
 80073e8:	4613      	mov	r3, r2
 80073ea:	717b      	strb	r3, [r7, #5]
	VL53L1_Error status  = 0;
 80073ec:	2300      	movs	r3, #0
 80073ee:	77fb      	strb	r3, [r7, #31]
	uint32_t     polling_time_ms = 0;
 80073f0:	2300      	movs	r3, #0
 80073f2:	61bb      	str	r3, [r7, #24]
	uint8_t      byte_value      = 0;
 80073f4:	2300      	movs	r3, #0
 80073f6:	75bb      	strb	r3, [r7, #22]
	uint8_t      found           = 0;
 80073f8:	2300      	movs	r3, #0
 80073fa:	75fb      	strb	r3, [r7, #23]

	/* wait until value is found, timeout reached on error occurred */
	while ((status == 0)
 80073fc:	e02a      	b.n	8007454 <VL53L1_WaitValueMaskEx+0x7e>
					&& (polling_time_ms < timeout_ms)
					&& (found == 0)) 
	{
		if (status == 0)
 80073fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d108      	bne.n	8007418 <VL53L1_WaitValueMaskEx+0x42>
			status = VL53L1_RdByte(pdev, index,	&byte_value);
 8007406:	f107 0216 	add.w	r2, r7, #22
 800740a:	88fb      	ldrh	r3, [r7, #6]
 800740c:	4619      	mov	r1, r3
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f7ff ff78 	bl	8007304 <VL53L1_RdByte>
 8007414:	4603      	mov	r3, r0
 8007416:	77fb      	strb	r3, [r7, #31]

		if ((byte_value & mask) == value)
 8007418:	7dba      	ldrb	r2, [r7, #22]
 800741a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800741e:	4013      	ands	r3, r2
 8007420:	b2db      	uxtb	r3, r3
 8007422:	797a      	ldrb	r2, [r7, #5]
 8007424:	429a      	cmp	r2, r3
 8007426:	d101      	bne.n	800742c <VL53L1_WaitValueMaskEx+0x56>
			found = 1;
 8007428:	2301      	movs	r3, #1
 800742a:	75fb      	strb	r3, [r7, #23]

		if (status == 0	&& found == 0 && poll_delay_ms > 0)
 800742c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10c      	bne.n	800744e <VL53L1_WaitValueMaskEx+0x78>
 8007434:	7dfb      	ldrb	r3, [r7, #23]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d109      	bne.n	800744e <VL53L1_WaitValueMaskEx+0x78>
 800743a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743c:	2b00      	cmp	r3, #0
 800743e:	d006      	beq.n	800744e <VL53L1_WaitValueMaskEx+0x78>
			status = VL53L1_WaitMs(pdev, poll_delay_ms);
 8007440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007442:	4619      	mov	r1, r3
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f7ff ffa0 	bl	800738a <VL53L1_WaitMs>
 800744a:	4603      	mov	r3, r0
 800744c:	77fb      	strb	r3, [r7, #31]

		/* Update polling time */
		polling_time_ms++;
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	3301      	adds	r3, #1
 8007452:	61bb      	str	r3, [r7, #24]
	while ((status == 0)
 8007454:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d106      	bne.n	800746a <VL53L1_WaitValueMaskEx+0x94>
					&& (polling_time_ms < timeout_ms)
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	429a      	cmp	r2, r3
 8007462:	d202      	bcs.n	800746a <VL53L1_WaitValueMaskEx+0x94>
					&& (found == 0)) 
 8007464:	7dfb      	ldrb	r3, [r7, #23]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d0c9      	beq.n	80073fe <VL53L1_WaitValueMaskEx+0x28>
	}

	if (found == 0 && status == 0)
 800746a:	7dfb      	ldrb	r3, [r7, #23]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d105      	bne.n	800747c <VL53L1_WaitValueMaskEx+0xa6>
 8007470:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d101      	bne.n	800747c <VL53L1_WaitValueMaskEx+0xa6>
		status = (VL53L1_Error) - 7;
 8007478:	23f9      	movs	r3, #249	; 0xf9
 800747a:	77fb      	strb	r3, [r7, #31]

	return status;
 800747c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3720      	adds	r7, #32
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800748c:	4b0e      	ldr	r3, [pc, #56]	; (80074c8 <HAL_Init+0x40>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a0d      	ldr	r2, [pc, #52]	; (80074c8 <HAL_Init+0x40>)
 8007492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007496:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007498:	4b0b      	ldr	r3, [pc, #44]	; (80074c8 <HAL_Init+0x40>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a0a      	ldr	r2, [pc, #40]	; (80074c8 <HAL_Init+0x40>)
 800749e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80074a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80074a4:	4b08      	ldr	r3, [pc, #32]	; (80074c8 <HAL_Init+0x40>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a07      	ldr	r2, [pc, #28]	; (80074c8 <HAL_Init+0x40>)
 80074aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80074b0:	2003      	movs	r0, #3
 80074b2:	f000 f94f 	bl	8007754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80074b6:	2000      	movs	r0, #0
 80074b8:	f000 f808 	bl	80074cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80074bc:	f7fa f848 	bl	8001550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	40023c00 	.word	0x40023c00

080074cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80074d4:	4b12      	ldr	r3, [pc, #72]	; (8007520 <HAL_InitTick+0x54>)
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	4b12      	ldr	r3, [pc, #72]	; (8007524 <HAL_InitTick+0x58>)
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	4619      	mov	r1, r3
 80074de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80074e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 f967 	bl	80077be <HAL_SYSTICK_Config>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d001      	beq.n	80074fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e00e      	b.n	8007518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2b0f      	cmp	r3, #15
 80074fe:	d80a      	bhi.n	8007516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007500:	2200      	movs	r2, #0
 8007502:	6879      	ldr	r1, [r7, #4]
 8007504:	f04f 30ff 	mov.w	r0, #4294967295
 8007508:	f000 f92f 	bl	800776a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800750c:	4a06      	ldr	r2, [pc, #24]	; (8007528 <HAL_InitTick+0x5c>)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	e000      	b.n	8007518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
}
 8007518:	4618      	mov	r0, r3
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	2000000c 	.word	0x2000000c
 8007524:	20000030 	.word	0x20000030
 8007528:	2000002c 	.word	0x2000002c

0800752c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800752c:	b480      	push	{r7}
 800752e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007530:	4b06      	ldr	r3, [pc, #24]	; (800754c <HAL_IncTick+0x20>)
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	461a      	mov	r2, r3
 8007536:	4b06      	ldr	r3, [pc, #24]	; (8007550 <HAL_IncTick+0x24>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4413      	add	r3, r2
 800753c:	4a04      	ldr	r2, [pc, #16]	; (8007550 <HAL_IncTick+0x24>)
 800753e:	6013      	str	r3, [r2, #0]
}
 8007540:	bf00      	nop
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	20000030 	.word	0x20000030
 8007550:	200007c8 	.word	0x200007c8

08007554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007554:	b480      	push	{r7}
 8007556:	af00      	add	r7, sp, #0
  return uwTick;
 8007558:	4b03      	ldr	r3, [pc, #12]	; (8007568 <HAL_GetTick+0x14>)
 800755a:	681b      	ldr	r3, [r3, #0]
}
 800755c:	4618      	mov	r0, r3
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	200007c8 	.word	0x200007c8

0800756c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007574:	f7ff ffee 	bl	8007554 <HAL_GetTick>
 8007578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007584:	d005      	beq.n	8007592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007586:	4b0a      	ldr	r3, [pc, #40]	; (80075b0 <HAL_Delay+0x44>)
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	4413      	add	r3, r2
 8007590:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007592:	bf00      	nop
 8007594:	f7ff ffde 	bl	8007554 <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d8f7      	bhi.n	8007594 <HAL_Delay+0x28>
  {
  }
}
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	20000030 	.word	0x20000030

080075b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f003 0307 	and.w	r3, r3, #7
 80075c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80075c4:	4b0c      	ldr	r3, [pc, #48]	; (80075f8 <__NVIC_SetPriorityGrouping+0x44>)
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80075d0:	4013      	ands	r3, r2
 80075d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80075dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80075e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80075e6:	4a04      	ldr	r2, [pc, #16]	; (80075f8 <__NVIC_SetPriorityGrouping+0x44>)
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	60d3      	str	r3, [r2, #12]
}
 80075ec:	bf00      	nop
 80075ee:	3714      	adds	r7, #20
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr
 80075f8:	e000ed00 	.word	0xe000ed00

080075fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80075fc:	b480      	push	{r7}
 80075fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007600:	4b04      	ldr	r3, [pc, #16]	; (8007614 <__NVIC_GetPriorityGrouping+0x18>)
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	0a1b      	lsrs	r3, r3, #8
 8007606:	f003 0307 	and.w	r3, r3, #7
}
 800760a:	4618      	mov	r0, r3
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr
 8007614:	e000ed00 	.word	0xe000ed00

08007618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	4603      	mov	r3, r0
 8007620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007626:	2b00      	cmp	r3, #0
 8007628:	db0b      	blt.n	8007642 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800762a:	79fb      	ldrb	r3, [r7, #7]
 800762c:	f003 021f 	and.w	r2, r3, #31
 8007630:	4907      	ldr	r1, [pc, #28]	; (8007650 <__NVIC_EnableIRQ+0x38>)
 8007632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007636:	095b      	lsrs	r3, r3, #5
 8007638:	2001      	movs	r0, #1
 800763a:	fa00 f202 	lsl.w	r2, r0, r2
 800763e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007642:	bf00      	nop
 8007644:	370c      	adds	r7, #12
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	e000e100 	.word	0xe000e100

08007654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	4603      	mov	r3, r0
 800765c:	6039      	str	r1, [r7, #0]
 800765e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007664:	2b00      	cmp	r3, #0
 8007666:	db0a      	blt.n	800767e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	b2da      	uxtb	r2, r3
 800766c:	490c      	ldr	r1, [pc, #48]	; (80076a0 <__NVIC_SetPriority+0x4c>)
 800766e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007672:	0112      	lsls	r2, r2, #4
 8007674:	b2d2      	uxtb	r2, r2
 8007676:	440b      	add	r3, r1
 8007678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800767c:	e00a      	b.n	8007694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	b2da      	uxtb	r2, r3
 8007682:	4908      	ldr	r1, [pc, #32]	; (80076a4 <__NVIC_SetPriority+0x50>)
 8007684:	79fb      	ldrb	r3, [r7, #7]
 8007686:	f003 030f 	and.w	r3, r3, #15
 800768a:	3b04      	subs	r3, #4
 800768c:	0112      	lsls	r2, r2, #4
 800768e:	b2d2      	uxtb	r2, r2
 8007690:	440b      	add	r3, r1
 8007692:	761a      	strb	r2, [r3, #24]
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	e000e100 	.word	0xe000e100
 80076a4:	e000ed00 	.word	0xe000ed00

080076a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b089      	sub	sp, #36	; 0x24
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f003 0307 	and.w	r3, r3, #7
 80076ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	f1c3 0307 	rsb	r3, r3, #7
 80076c2:	2b04      	cmp	r3, #4
 80076c4:	bf28      	it	cs
 80076c6:	2304      	movcs	r3, #4
 80076c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	3304      	adds	r3, #4
 80076ce:	2b06      	cmp	r3, #6
 80076d0:	d902      	bls.n	80076d8 <NVIC_EncodePriority+0x30>
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	3b03      	subs	r3, #3
 80076d6:	e000      	b.n	80076da <NVIC_EncodePriority+0x32>
 80076d8:	2300      	movs	r3, #0
 80076da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076dc:	f04f 32ff 	mov.w	r2, #4294967295
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	fa02 f303 	lsl.w	r3, r2, r3
 80076e6:	43da      	mvns	r2, r3
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	401a      	ands	r2, r3
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80076f0:	f04f 31ff 	mov.w	r1, #4294967295
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	fa01 f303 	lsl.w	r3, r1, r3
 80076fa:	43d9      	mvns	r1, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007700:	4313      	orrs	r3, r2
         );
}
 8007702:	4618      	mov	r0, r3
 8007704:	3724      	adds	r7, #36	; 0x24
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
	...

08007710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	3b01      	subs	r3, #1
 800771c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007720:	d301      	bcc.n	8007726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007722:	2301      	movs	r3, #1
 8007724:	e00f      	b.n	8007746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007726:	4a0a      	ldr	r2, [pc, #40]	; (8007750 <SysTick_Config+0x40>)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	3b01      	subs	r3, #1
 800772c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800772e:	210f      	movs	r1, #15
 8007730:	f04f 30ff 	mov.w	r0, #4294967295
 8007734:	f7ff ff8e 	bl	8007654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007738:	4b05      	ldr	r3, [pc, #20]	; (8007750 <SysTick_Config+0x40>)
 800773a:	2200      	movs	r2, #0
 800773c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800773e:	4b04      	ldr	r3, [pc, #16]	; (8007750 <SysTick_Config+0x40>)
 8007740:	2207      	movs	r2, #7
 8007742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	e000e010 	.word	0xe000e010

08007754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f7ff ff29 	bl	80075b4 <__NVIC_SetPriorityGrouping>
}
 8007762:	bf00      	nop
 8007764:	3708      	adds	r7, #8
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800776a:	b580      	push	{r7, lr}
 800776c:	b086      	sub	sp, #24
 800776e:	af00      	add	r7, sp, #0
 8007770:	4603      	mov	r3, r0
 8007772:	60b9      	str	r1, [r7, #8]
 8007774:	607a      	str	r2, [r7, #4]
 8007776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007778:	2300      	movs	r3, #0
 800777a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800777c:	f7ff ff3e 	bl	80075fc <__NVIC_GetPriorityGrouping>
 8007780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	68b9      	ldr	r1, [r7, #8]
 8007786:	6978      	ldr	r0, [r7, #20]
 8007788:	f7ff ff8e 	bl	80076a8 <NVIC_EncodePriority>
 800778c:	4602      	mov	r2, r0
 800778e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007792:	4611      	mov	r1, r2
 8007794:	4618      	mov	r0, r3
 8007796:	f7ff ff5d 	bl	8007654 <__NVIC_SetPriority>
}
 800779a:	bf00      	nop
 800779c:	3718      	adds	r7, #24
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b082      	sub	sp, #8
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	4603      	mov	r3, r0
 80077aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80077ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7ff ff31 	bl	8007618 <__NVIC_EnableIRQ>
}
 80077b6:	bf00      	nop
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b082      	sub	sp, #8
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7ff ffa2 	bl	8007710 <SysTick_Config>
 80077cc:	4603      	mov	r3, r0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3708      	adds	r7, #8
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b084      	sub	sp, #16
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077e2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80077e4:	f7ff feb6 	bl	8007554 <HAL_GetTick>
 80077e8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	d008      	beq.n	8007808 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2280      	movs	r2, #128	; 0x80
 80077fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e052      	b.n	80078ae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f022 0216 	bic.w	r2, r2, #22
 8007816:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	695a      	ldr	r2, [r3, #20]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007826:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782c:	2b00      	cmp	r3, #0
 800782e:	d103      	bne.n	8007838 <HAL_DMA_Abort+0x62>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007834:	2b00      	cmp	r3, #0
 8007836:	d007      	beq.n	8007848 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f022 0208 	bic.w	r2, r2, #8
 8007846:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f022 0201 	bic.w	r2, r2, #1
 8007856:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007858:	e013      	b.n	8007882 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800785a:	f7ff fe7b 	bl	8007554 <HAL_GetTick>
 800785e:	4602      	mov	r2, r0
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	2b05      	cmp	r3, #5
 8007866:	d90c      	bls.n	8007882 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2220      	movs	r2, #32
 800786c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2203      	movs	r2, #3
 800787a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e015      	b.n	80078ae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0301 	and.w	r3, r3, #1
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1e4      	bne.n	800785a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007894:	223f      	movs	r2, #63	; 0x3f
 8007896:	409a      	lsls	r2, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80078b6:	b480      	push	{r7}
 80078b8:	b083      	sub	sp, #12
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d004      	beq.n	80078d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2280      	movs	r2, #128	; 0x80
 80078ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e00c      	b.n	80078ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2205      	movs	r2, #5
 80078d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f022 0201 	bic.w	r2, r2, #1
 80078ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	370c      	adds	r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
	...

080078fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b089      	sub	sp, #36	; 0x24
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007906:	2300      	movs	r3, #0
 8007908:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800790a:	2300      	movs	r3, #0
 800790c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800790e:	2300      	movs	r3, #0
 8007910:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007912:	2300      	movs	r3, #0
 8007914:	61fb      	str	r3, [r7, #28]
 8007916:	e16b      	b.n	8007bf0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007918:	2201      	movs	r2, #1
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	fa02 f303 	lsl.w	r3, r2, r3
 8007920:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	4013      	ands	r3, r2
 800792a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	429a      	cmp	r2, r3
 8007932:	f040 815a 	bne.w	8007bea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f003 0303 	and.w	r3, r3, #3
 800793e:	2b01      	cmp	r3, #1
 8007940:	d005      	beq.n	800794e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800794a:	2b02      	cmp	r3, #2
 800794c:	d130      	bne.n	80079b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	005b      	lsls	r3, r3, #1
 8007958:	2203      	movs	r2, #3
 800795a:	fa02 f303 	lsl.w	r3, r2, r3
 800795e:	43db      	mvns	r3, r3
 8007960:	69ba      	ldr	r2, [r7, #24]
 8007962:	4013      	ands	r3, r2
 8007964:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	68da      	ldr	r2, [r3, #12]
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	005b      	lsls	r3, r3, #1
 800796e:	fa02 f303 	lsl.w	r3, r2, r3
 8007972:	69ba      	ldr	r2, [r7, #24]
 8007974:	4313      	orrs	r3, r2
 8007976:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	69ba      	ldr	r2, [r7, #24]
 800797c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007984:	2201      	movs	r2, #1
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	fa02 f303 	lsl.w	r3, r2, r3
 800798c:	43db      	mvns	r3, r3
 800798e:	69ba      	ldr	r2, [r7, #24]
 8007990:	4013      	ands	r3, r2
 8007992:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	091b      	lsrs	r3, r3, #4
 800799a:	f003 0201 	and.w	r2, r3, #1
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	fa02 f303 	lsl.w	r3, r2, r3
 80079a4:	69ba      	ldr	r2, [r7, #24]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	69ba      	ldr	r2, [r7, #24]
 80079ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	f003 0303 	and.w	r3, r3, #3
 80079b8:	2b03      	cmp	r3, #3
 80079ba:	d017      	beq.n	80079ec <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	005b      	lsls	r3, r3, #1
 80079c6:	2203      	movs	r2, #3
 80079c8:	fa02 f303 	lsl.w	r3, r2, r3
 80079cc:	43db      	mvns	r3, r3
 80079ce:	69ba      	ldr	r2, [r7, #24]
 80079d0:	4013      	ands	r3, r2
 80079d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	689a      	ldr	r2, [r3, #8]
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	005b      	lsls	r3, r3, #1
 80079dc:	fa02 f303 	lsl.w	r3, r2, r3
 80079e0:	69ba      	ldr	r2, [r7, #24]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	69ba      	ldr	r2, [r7, #24]
 80079ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f003 0303 	and.w	r3, r3, #3
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d123      	bne.n	8007a40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	08da      	lsrs	r2, r3, #3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	3208      	adds	r2, #8
 8007a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	f003 0307 	and.w	r3, r3, #7
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	220f      	movs	r2, #15
 8007a10:	fa02 f303 	lsl.w	r3, r2, r3
 8007a14:	43db      	mvns	r3, r3
 8007a16:	69ba      	ldr	r2, [r7, #24]
 8007a18:	4013      	ands	r3, r2
 8007a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	691a      	ldr	r2, [r3, #16]
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	f003 0307 	and.w	r3, r3, #7
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2c:	69ba      	ldr	r2, [r7, #24]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	08da      	lsrs	r2, r3, #3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	3208      	adds	r2, #8
 8007a3a:	69b9      	ldr	r1, [r7, #24]
 8007a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	005b      	lsls	r3, r3, #1
 8007a4a:	2203      	movs	r2, #3
 8007a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a50:	43db      	mvns	r3, r3
 8007a52:	69ba      	ldr	r2, [r7, #24]
 8007a54:	4013      	ands	r3, r2
 8007a56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	f003 0203 	and.w	r2, r3, #3
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	005b      	lsls	r3, r3, #1
 8007a64:	fa02 f303 	lsl.w	r3, r2, r3
 8007a68:	69ba      	ldr	r2, [r7, #24]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	69ba      	ldr	r2, [r7, #24]
 8007a72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 80b4 	beq.w	8007bea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a82:	2300      	movs	r3, #0
 8007a84:	60fb      	str	r3, [r7, #12]
 8007a86:	4b60      	ldr	r3, [pc, #384]	; (8007c08 <HAL_GPIO_Init+0x30c>)
 8007a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a8a:	4a5f      	ldr	r2, [pc, #380]	; (8007c08 <HAL_GPIO_Init+0x30c>)
 8007a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a90:	6453      	str	r3, [r2, #68]	; 0x44
 8007a92:	4b5d      	ldr	r3, [pc, #372]	; (8007c08 <HAL_GPIO_Init+0x30c>)
 8007a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a9a:	60fb      	str	r3, [r7, #12]
 8007a9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007a9e:	4a5b      	ldr	r2, [pc, #364]	; (8007c0c <HAL_GPIO_Init+0x310>)
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	089b      	lsrs	r3, r3, #2
 8007aa4:	3302      	adds	r3, #2
 8007aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	f003 0303 	and.w	r3, r3, #3
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	220f      	movs	r2, #15
 8007ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aba:	43db      	mvns	r3, r3
 8007abc:	69ba      	ldr	r2, [r7, #24]
 8007abe:	4013      	ands	r3, r2
 8007ac0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a52      	ldr	r2, [pc, #328]	; (8007c10 <HAL_GPIO_Init+0x314>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d02b      	beq.n	8007b22 <HAL_GPIO_Init+0x226>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a51      	ldr	r2, [pc, #324]	; (8007c14 <HAL_GPIO_Init+0x318>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d025      	beq.n	8007b1e <HAL_GPIO_Init+0x222>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a50      	ldr	r2, [pc, #320]	; (8007c18 <HAL_GPIO_Init+0x31c>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d01f      	beq.n	8007b1a <HAL_GPIO_Init+0x21e>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a4f      	ldr	r2, [pc, #316]	; (8007c1c <HAL_GPIO_Init+0x320>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d019      	beq.n	8007b16 <HAL_GPIO_Init+0x21a>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a4e      	ldr	r2, [pc, #312]	; (8007c20 <HAL_GPIO_Init+0x324>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d013      	beq.n	8007b12 <HAL_GPIO_Init+0x216>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a4d      	ldr	r2, [pc, #308]	; (8007c24 <HAL_GPIO_Init+0x328>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d00d      	beq.n	8007b0e <HAL_GPIO_Init+0x212>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a4c      	ldr	r2, [pc, #304]	; (8007c28 <HAL_GPIO_Init+0x32c>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d007      	beq.n	8007b0a <HAL_GPIO_Init+0x20e>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a4b      	ldr	r2, [pc, #300]	; (8007c2c <HAL_GPIO_Init+0x330>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d101      	bne.n	8007b06 <HAL_GPIO_Init+0x20a>
 8007b02:	2307      	movs	r3, #7
 8007b04:	e00e      	b.n	8007b24 <HAL_GPIO_Init+0x228>
 8007b06:	2308      	movs	r3, #8
 8007b08:	e00c      	b.n	8007b24 <HAL_GPIO_Init+0x228>
 8007b0a:	2306      	movs	r3, #6
 8007b0c:	e00a      	b.n	8007b24 <HAL_GPIO_Init+0x228>
 8007b0e:	2305      	movs	r3, #5
 8007b10:	e008      	b.n	8007b24 <HAL_GPIO_Init+0x228>
 8007b12:	2304      	movs	r3, #4
 8007b14:	e006      	b.n	8007b24 <HAL_GPIO_Init+0x228>
 8007b16:	2303      	movs	r3, #3
 8007b18:	e004      	b.n	8007b24 <HAL_GPIO_Init+0x228>
 8007b1a:	2302      	movs	r3, #2
 8007b1c:	e002      	b.n	8007b24 <HAL_GPIO_Init+0x228>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e000      	b.n	8007b24 <HAL_GPIO_Init+0x228>
 8007b22:	2300      	movs	r3, #0
 8007b24:	69fa      	ldr	r2, [r7, #28]
 8007b26:	f002 0203 	and.w	r2, r2, #3
 8007b2a:	0092      	lsls	r2, r2, #2
 8007b2c:	4093      	lsls	r3, r2
 8007b2e:	69ba      	ldr	r2, [r7, #24]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b34:	4935      	ldr	r1, [pc, #212]	; (8007c0c <HAL_GPIO_Init+0x310>)
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	089b      	lsrs	r3, r3, #2
 8007b3a:	3302      	adds	r3, #2
 8007b3c:	69ba      	ldr	r2, [r7, #24]
 8007b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007b42:	4b3b      	ldr	r3, [pc, #236]	; (8007c30 <HAL_GPIO_Init+0x334>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	43db      	mvns	r3, r3
 8007b4c:	69ba      	ldr	r2, [r7, #24]
 8007b4e:	4013      	ands	r3, r2
 8007b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d003      	beq.n	8007b66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007b5e:	69ba      	ldr	r2, [r7, #24]
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007b66:	4a32      	ldr	r2, [pc, #200]	; (8007c30 <HAL_GPIO_Init+0x334>)
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007b6c:	4b30      	ldr	r3, [pc, #192]	; (8007c30 <HAL_GPIO_Init+0x334>)
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	43db      	mvns	r3, r3
 8007b76:	69ba      	ldr	r2, [r7, #24]
 8007b78:	4013      	ands	r3, r2
 8007b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d003      	beq.n	8007b90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007b88:	69ba      	ldr	r2, [r7, #24]
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007b90:	4a27      	ldr	r2, [pc, #156]	; (8007c30 <HAL_GPIO_Init+0x334>)
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007b96:	4b26      	ldr	r3, [pc, #152]	; (8007c30 <HAL_GPIO_Init+0x334>)
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	43db      	mvns	r3, r3
 8007ba0:	69ba      	ldr	r2, [r7, #24]
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d003      	beq.n	8007bba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007bb2:	69ba      	ldr	r2, [r7, #24]
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007bba:	4a1d      	ldr	r2, [pc, #116]	; (8007c30 <HAL_GPIO_Init+0x334>)
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007bc0:	4b1b      	ldr	r3, [pc, #108]	; (8007c30 <HAL_GPIO_Init+0x334>)
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	43db      	mvns	r3, r3
 8007bca:	69ba      	ldr	r2, [r7, #24]
 8007bcc:	4013      	ands	r3, r2
 8007bce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d003      	beq.n	8007be4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007bdc:	69ba      	ldr	r2, [r7, #24]
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007be4:	4a12      	ldr	r2, [pc, #72]	; (8007c30 <HAL_GPIO_Init+0x334>)
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	3301      	adds	r3, #1
 8007bee:	61fb      	str	r3, [r7, #28]
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	2b0f      	cmp	r3, #15
 8007bf4:	f67f ae90 	bls.w	8007918 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007bf8:	bf00      	nop
 8007bfa:	bf00      	nop
 8007bfc:	3724      	adds	r7, #36	; 0x24
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	40023800 	.word	0x40023800
 8007c0c:	40013800 	.word	0x40013800
 8007c10:	40020000 	.word	0x40020000
 8007c14:	40020400 	.word	0x40020400
 8007c18:	40020800 	.word	0x40020800
 8007c1c:	40020c00 	.word	0x40020c00
 8007c20:	40021000 	.word	0x40021000
 8007c24:	40021400 	.word	0x40021400
 8007c28:	40021800 	.word	0x40021800
 8007c2c:	40021c00 	.word	0x40021c00
 8007c30:	40013c00 	.word	0x40013c00

08007c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	807b      	strh	r3, [r7, #2]
 8007c40:	4613      	mov	r3, r2
 8007c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007c44:	787b      	ldrb	r3, [r7, #1]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d003      	beq.n	8007c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c4a:	887a      	ldrh	r2, [r7, #2]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007c50:	e003      	b.n	8007c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007c52:	887b      	ldrh	r3, [r7, #2]
 8007c54:	041a      	lsls	r2, r3, #16
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	619a      	str	r2, [r3, #24]
}
 8007c5a:	bf00      	nop
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
	...

08007c68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d101      	bne.n	8007c7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e12b      	b.n	8007ed2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d106      	bne.n	8007c94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7f9 fa46 	bl	8001120 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2224      	movs	r2, #36	; 0x24
 8007c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f022 0201 	bic.w	r2, r2, #1
 8007caa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007cca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007ccc:	f001 fbd8 	bl	8009480 <HAL_RCC_GetPCLK1Freq>
 8007cd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	4a81      	ldr	r2, [pc, #516]	; (8007edc <HAL_I2C_Init+0x274>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d807      	bhi.n	8007cec <HAL_I2C_Init+0x84>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	4a80      	ldr	r2, [pc, #512]	; (8007ee0 <HAL_I2C_Init+0x278>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	bf94      	ite	ls
 8007ce4:	2301      	movls	r3, #1
 8007ce6:	2300      	movhi	r3, #0
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	e006      	b.n	8007cfa <HAL_I2C_Init+0x92>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4a7d      	ldr	r2, [pc, #500]	; (8007ee4 <HAL_I2C_Init+0x27c>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	bf94      	ite	ls
 8007cf4:	2301      	movls	r3, #1
 8007cf6:	2300      	movhi	r3, #0
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e0e7      	b.n	8007ed2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	4a78      	ldr	r2, [pc, #480]	; (8007ee8 <HAL_I2C_Init+0x280>)
 8007d06:	fba2 2303 	umull	r2, r3, r2, r3
 8007d0a:	0c9b      	lsrs	r3, r3, #18
 8007d0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	430a      	orrs	r2, r1
 8007d20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	6a1b      	ldr	r3, [r3, #32]
 8007d28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	4a6a      	ldr	r2, [pc, #424]	; (8007edc <HAL_I2C_Init+0x274>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d802      	bhi.n	8007d3c <HAL_I2C_Init+0xd4>
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	e009      	b.n	8007d50 <HAL_I2C_Init+0xe8>
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007d42:	fb02 f303 	mul.w	r3, r2, r3
 8007d46:	4a69      	ldr	r2, [pc, #420]	; (8007eec <HAL_I2C_Init+0x284>)
 8007d48:	fba2 2303 	umull	r2, r3, r2, r3
 8007d4c:	099b      	lsrs	r3, r3, #6
 8007d4e:	3301      	adds	r3, #1
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	6812      	ldr	r2, [r2, #0]
 8007d54:	430b      	orrs	r3, r1
 8007d56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	69db      	ldr	r3, [r3, #28]
 8007d5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007d62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	495c      	ldr	r1, [pc, #368]	; (8007edc <HAL_I2C_Init+0x274>)
 8007d6c:	428b      	cmp	r3, r1
 8007d6e:	d819      	bhi.n	8007da4 <HAL_I2C_Init+0x13c>
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	1e59      	subs	r1, r3, #1
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	005b      	lsls	r3, r3, #1
 8007d7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d7e:	1c59      	adds	r1, r3, #1
 8007d80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007d84:	400b      	ands	r3, r1
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00a      	beq.n	8007da0 <HAL_I2C_Init+0x138>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	1e59      	subs	r1, r3, #1
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	005b      	lsls	r3, r3, #1
 8007d94:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d98:	3301      	adds	r3, #1
 8007d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d9e:	e051      	b.n	8007e44 <HAL_I2C_Init+0x1dc>
 8007da0:	2304      	movs	r3, #4
 8007da2:	e04f      	b.n	8007e44 <HAL_I2C_Init+0x1dc>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d111      	bne.n	8007dd0 <HAL_I2C_Init+0x168>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	1e58      	subs	r0, r3, #1
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6859      	ldr	r1, [r3, #4]
 8007db4:	460b      	mov	r3, r1
 8007db6:	005b      	lsls	r3, r3, #1
 8007db8:	440b      	add	r3, r1
 8007dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	bf0c      	ite	eq
 8007dc8:	2301      	moveq	r3, #1
 8007dca:	2300      	movne	r3, #0
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	e012      	b.n	8007df6 <HAL_I2C_Init+0x18e>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	1e58      	subs	r0, r3, #1
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6859      	ldr	r1, [r3, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	440b      	add	r3, r1
 8007dde:	0099      	lsls	r1, r3, #2
 8007de0:	440b      	add	r3, r1
 8007de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8007de6:	3301      	adds	r3, #1
 8007de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	bf0c      	ite	eq
 8007df0:	2301      	moveq	r3, #1
 8007df2:	2300      	movne	r3, #0
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d001      	beq.n	8007dfe <HAL_I2C_Init+0x196>
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e022      	b.n	8007e44 <HAL_I2C_Init+0x1dc>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10e      	bne.n	8007e24 <HAL_I2C_Init+0x1bc>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	1e58      	subs	r0, r3, #1
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6859      	ldr	r1, [r3, #4]
 8007e0e:	460b      	mov	r3, r1
 8007e10:	005b      	lsls	r3, r3, #1
 8007e12:	440b      	add	r3, r1
 8007e14:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e18:	3301      	adds	r3, #1
 8007e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e22:	e00f      	b.n	8007e44 <HAL_I2C_Init+0x1dc>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	1e58      	subs	r0, r3, #1
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6859      	ldr	r1, [r3, #4]
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	440b      	add	r3, r1
 8007e32:	0099      	lsls	r1, r3, #2
 8007e34:	440b      	add	r3, r1
 8007e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e44:	6879      	ldr	r1, [r7, #4]
 8007e46:	6809      	ldr	r1, [r1, #0]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	69da      	ldr	r2, [r3, #28]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a1b      	ldr	r3, [r3, #32]
 8007e5e:	431a      	orrs	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	430a      	orrs	r2, r1
 8007e66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007e72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	6911      	ldr	r1, [r2, #16]
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	68d2      	ldr	r2, [r2, #12]
 8007e7e:	4311      	orrs	r1, r2
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	6812      	ldr	r2, [r2, #0]
 8007e84:	430b      	orrs	r3, r1
 8007e86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	695a      	ldr	r2, [r3, #20]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	431a      	orrs	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	430a      	orrs	r2, r1
 8007ea2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f042 0201 	orr.w	r2, r2, #1
 8007eb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2220      	movs	r2, #32
 8007ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	000186a0 	.word	0x000186a0
 8007ee0:	001e847f 	.word	0x001e847f
 8007ee4:	003d08ff 	.word	0x003d08ff
 8007ee8:	431bde83 	.word	0x431bde83
 8007eec:	10624dd3 	.word	0x10624dd3

08007ef0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b088      	sub	sp, #32
 8007ef4:	af02      	add	r7, sp, #8
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	4608      	mov	r0, r1
 8007efa:	4611      	mov	r1, r2
 8007efc:	461a      	mov	r2, r3
 8007efe:	4603      	mov	r3, r0
 8007f00:	817b      	strh	r3, [r7, #10]
 8007f02:	460b      	mov	r3, r1
 8007f04:	813b      	strh	r3, [r7, #8]
 8007f06:	4613      	mov	r3, r2
 8007f08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007f0a:	f7ff fb23 	bl	8007554 <HAL_GetTick>
 8007f0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	2b20      	cmp	r3, #32
 8007f1a:	f040 80d9 	bne.w	80080d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	9300      	str	r3, [sp, #0]
 8007f22:	2319      	movs	r3, #25
 8007f24:	2201      	movs	r2, #1
 8007f26:	496d      	ldr	r1, [pc, #436]	; (80080dc <HAL_I2C_Mem_Write+0x1ec>)
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f000 fc7f 	bl	800882c <I2C_WaitOnFlagUntilTimeout>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007f34:	2302      	movs	r3, #2
 8007f36:	e0cc      	b.n	80080d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d101      	bne.n	8007f46 <HAL_I2C_Mem_Write+0x56>
 8007f42:	2302      	movs	r3, #2
 8007f44:	e0c5      	b.n	80080d2 <HAL_I2C_Mem_Write+0x1e2>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 0301 	and.w	r3, r3, #1
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d007      	beq.n	8007f6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f042 0201 	orr.w	r2, r2, #1
 8007f6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2221      	movs	r2, #33	; 0x21
 8007f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2240      	movs	r2, #64	; 0x40
 8007f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6a3a      	ldr	r2, [r7, #32]
 8007f96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007f9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	4a4d      	ldr	r2, [pc, #308]	; (80080e0 <HAL_I2C_Mem_Write+0x1f0>)
 8007fac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007fae:	88f8      	ldrh	r0, [r7, #6]
 8007fb0:	893a      	ldrh	r2, [r7, #8]
 8007fb2:	8979      	ldrh	r1, [r7, #10]
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	9301      	str	r3, [sp, #4]
 8007fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f000 fab6 	bl	8008530 <I2C_RequestMemoryWrite>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d052      	beq.n	8008070 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e081      	b.n	80080d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fce:	697a      	ldr	r2, [r7, #20]
 8007fd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	f000 fd00 	bl	80089d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00d      	beq.n	8007ffa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe2:	2b04      	cmp	r3, #4
 8007fe4:	d107      	bne.n	8007ff6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ff4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e06b      	b.n	80080d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffe:	781a      	ldrb	r2, [r3, #0]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800a:	1c5a      	adds	r2, r3, #1
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008014:	3b01      	subs	r3, #1
 8008016:	b29a      	uxth	r2, r3
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008020:	b29b      	uxth	r3, r3
 8008022:	3b01      	subs	r3, #1
 8008024:	b29a      	uxth	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	695b      	ldr	r3, [r3, #20]
 8008030:	f003 0304 	and.w	r3, r3, #4
 8008034:	2b04      	cmp	r3, #4
 8008036:	d11b      	bne.n	8008070 <HAL_I2C_Mem_Write+0x180>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800803c:	2b00      	cmp	r3, #0
 800803e:	d017      	beq.n	8008070 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008044:	781a      	ldrb	r2, [r3, #0]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008050:	1c5a      	adds	r2, r3, #1
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800805a:	3b01      	subs	r3, #1
 800805c:	b29a      	uxth	r2, r3
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008066:	b29b      	uxth	r3, r3
 8008068:	3b01      	subs	r3, #1
 800806a:	b29a      	uxth	r2, r3
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1aa      	bne.n	8007fce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008078:	697a      	ldr	r2, [r7, #20]
 800807a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f000 fcec 	bl	8008a5a <I2C_WaitOnBTFFlagUntilTimeout>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00d      	beq.n	80080a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808c:	2b04      	cmp	r3, #4
 800808e:	d107      	bne.n	80080a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800809e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	e016      	b.n	80080d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2220      	movs	r2, #32
 80080b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80080cc:	2300      	movs	r3, #0
 80080ce:	e000      	b.n	80080d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80080d0:	2302      	movs	r3, #2
  }
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3718      	adds	r7, #24
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	00100002 	.word	0x00100002
 80080e0:	ffff0000 	.word	0xffff0000

080080e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b08c      	sub	sp, #48	; 0x30
 80080e8:	af02      	add	r7, sp, #8
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	4608      	mov	r0, r1
 80080ee:	4611      	mov	r1, r2
 80080f0:	461a      	mov	r2, r3
 80080f2:	4603      	mov	r3, r0
 80080f4:	817b      	strh	r3, [r7, #10]
 80080f6:	460b      	mov	r3, r1
 80080f8:	813b      	strh	r3, [r7, #8]
 80080fa:	4613      	mov	r3, r2
 80080fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80080fe:	f7ff fa29 	bl	8007554 <HAL_GetTick>
 8008102:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800810a:	b2db      	uxtb	r3, r3
 800810c:	2b20      	cmp	r3, #32
 800810e:	f040 8208 	bne.w	8008522 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008114:	9300      	str	r3, [sp, #0]
 8008116:	2319      	movs	r3, #25
 8008118:	2201      	movs	r2, #1
 800811a:	497b      	ldr	r1, [pc, #492]	; (8008308 <HAL_I2C_Mem_Read+0x224>)
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	f000 fb85 	bl	800882c <I2C_WaitOnFlagUntilTimeout>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d001      	beq.n	800812c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008128:	2302      	movs	r3, #2
 800812a:	e1fb      	b.n	8008524 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008132:	2b01      	cmp	r3, #1
 8008134:	d101      	bne.n	800813a <HAL_I2C_Mem_Read+0x56>
 8008136:	2302      	movs	r3, #2
 8008138:	e1f4      	b.n	8008524 <HAL_I2C_Mem_Read+0x440>
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2201      	movs	r2, #1
 800813e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 0301 	and.w	r3, r3, #1
 800814c:	2b01      	cmp	r3, #1
 800814e:	d007      	beq.n	8008160 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f042 0201 	orr.w	r2, r2, #1
 800815e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800816e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2222      	movs	r2, #34	; 0x22
 8008174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2240      	movs	r2, #64	; 0x40
 800817c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800818a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008190:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008196:	b29a      	uxth	r2, r3
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	4a5b      	ldr	r2, [pc, #364]	; (800830c <HAL_I2C_Mem_Read+0x228>)
 80081a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80081a2:	88f8      	ldrh	r0, [r7, #6]
 80081a4:	893a      	ldrh	r2, [r7, #8]
 80081a6:	8979      	ldrh	r1, [r7, #10]
 80081a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081aa:	9301      	str	r3, [sp, #4]
 80081ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	4603      	mov	r3, r0
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	f000 fa52 	bl	800865c <I2C_RequestMemoryRead>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d001      	beq.n	80081c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e1b0      	b.n	8008524 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d113      	bne.n	80081f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081ca:	2300      	movs	r3, #0
 80081cc:	623b      	str	r3, [r7, #32]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	695b      	ldr	r3, [r3, #20]
 80081d4:	623b      	str	r3, [r7, #32]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	699b      	ldr	r3, [r3, #24]
 80081dc:	623b      	str	r3, [r7, #32]
 80081de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081ee:	601a      	str	r2, [r3, #0]
 80081f0:	e184      	b.n	80084fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d11b      	bne.n	8008232 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008208:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800820a:	2300      	movs	r3, #0
 800820c:	61fb      	str	r3, [r7, #28]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	695b      	ldr	r3, [r3, #20]
 8008214:	61fb      	str	r3, [r7, #28]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	61fb      	str	r3, [r7, #28]
 800821e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800822e:	601a      	str	r2, [r3, #0]
 8008230:	e164      	b.n	80084fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008236:	2b02      	cmp	r3, #2
 8008238:	d11b      	bne.n	8008272 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008248:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008258:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800825a:	2300      	movs	r3, #0
 800825c:	61bb      	str	r3, [r7, #24]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	695b      	ldr	r3, [r3, #20]
 8008264:	61bb      	str	r3, [r7, #24]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	61bb      	str	r3, [r7, #24]
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	e144      	b.n	80084fc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008272:	2300      	movs	r3, #0
 8008274:	617b      	str	r3, [r7, #20]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	695b      	ldr	r3, [r3, #20]
 800827c:	617b      	str	r3, [r7, #20]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	699b      	ldr	r3, [r3, #24]
 8008284:	617b      	str	r3, [r7, #20]
 8008286:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008288:	e138      	b.n	80084fc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800828e:	2b03      	cmp	r3, #3
 8008290:	f200 80f1 	bhi.w	8008476 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008298:	2b01      	cmp	r3, #1
 800829a:	d123      	bne.n	80082e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800829c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800829e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f000 fc1b 	bl	8008adc <I2C_WaitOnRXNEFlagUntilTimeout>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d001      	beq.n	80082b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e139      	b.n	8008524 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	691a      	ldr	r2, [r3, #16]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ba:	b2d2      	uxtb	r2, r2
 80082bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c2:	1c5a      	adds	r2, r3, #1
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082cc:	3b01      	subs	r3, #1
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082d8:	b29b      	uxth	r3, r3
 80082da:	3b01      	subs	r3, #1
 80082dc:	b29a      	uxth	r2, r3
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80082e2:	e10b      	b.n	80084fc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d14e      	bne.n	800838a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80082ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f2:	2200      	movs	r2, #0
 80082f4:	4906      	ldr	r1, [pc, #24]	; (8008310 <HAL_I2C_Mem_Read+0x22c>)
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f000 fa98 	bl	800882c <I2C_WaitOnFlagUntilTimeout>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d008      	beq.n	8008314 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	e10e      	b.n	8008524 <HAL_I2C_Mem_Read+0x440>
 8008306:	bf00      	nop
 8008308:	00100002 	.word	0x00100002
 800830c:	ffff0000 	.word	0xffff0000
 8008310:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008322:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	691a      	ldr	r2, [r3, #16]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832e:	b2d2      	uxtb	r2, r2
 8008330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008336:	1c5a      	adds	r2, r3, #1
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008340:	3b01      	subs	r3, #1
 8008342:	b29a      	uxth	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800834c:	b29b      	uxth	r3, r3
 800834e:	3b01      	subs	r3, #1
 8008350:	b29a      	uxth	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	691a      	ldr	r2, [r3, #16]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008360:	b2d2      	uxtb	r2, r2
 8008362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008368:	1c5a      	adds	r2, r3, #1
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008372:	3b01      	subs	r3, #1
 8008374:	b29a      	uxth	r2, r3
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800837e:	b29b      	uxth	r3, r3
 8008380:	3b01      	subs	r3, #1
 8008382:	b29a      	uxth	r2, r3
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008388:	e0b8      	b.n	80084fc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800838a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838c:	9300      	str	r3, [sp, #0]
 800838e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008390:	2200      	movs	r2, #0
 8008392:	4966      	ldr	r1, [pc, #408]	; (800852c <HAL_I2C_Mem_Read+0x448>)
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f000 fa49 	bl	800882c <I2C_WaitOnFlagUntilTimeout>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	e0bf      	b.n	8008524 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	691a      	ldr	r2, [r3, #16]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083be:	b2d2      	uxtb	r2, r2
 80083c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c6:	1c5a      	adds	r2, r3, #1
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083d0:	3b01      	subs	r3, #1
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083dc:	b29b      	uxth	r3, r3
 80083de:	3b01      	subs	r3, #1
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80083e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ec:	2200      	movs	r2, #0
 80083ee:	494f      	ldr	r1, [pc, #316]	; (800852c <HAL_I2C_Mem_Read+0x448>)
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f000 fa1b 	bl	800882c <I2C_WaitOnFlagUntilTimeout>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d001      	beq.n	8008400 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	e091      	b.n	8008524 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800840e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	691a      	ldr	r2, [r3, #16]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841a:	b2d2      	uxtb	r2, r2
 800841c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	1c5a      	adds	r2, r3, #1
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800842c:	3b01      	subs	r3, #1
 800842e:	b29a      	uxth	r2, r3
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008438:	b29b      	uxth	r3, r3
 800843a:	3b01      	subs	r3, #1
 800843c:	b29a      	uxth	r2, r3
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	691a      	ldr	r2, [r3, #16]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844c:	b2d2      	uxtb	r2, r2
 800844e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008454:	1c5a      	adds	r2, r3, #1
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800845e:	3b01      	subs	r3, #1
 8008460:	b29a      	uxth	r2, r3
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800846a:	b29b      	uxth	r3, r3
 800846c:	3b01      	subs	r3, #1
 800846e:	b29a      	uxth	r2, r3
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008474:	e042      	b.n	80084fc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008478:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800847a:	68f8      	ldr	r0, [r7, #12]
 800847c:	f000 fb2e 	bl	8008adc <I2C_WaitOnRXNEFlagUntilTimeout>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d001      	beq.n	800848a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e04c      	b.n	8008524 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	691a      	ldr	r2, [r3, #16]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008494:	b2d2      	uxtb	r2, r2
 8008496:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849c:	1c5a      	adds	r2, r3, #1
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084a6:	3b01      	subs	r3, #1
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	3b01      	subs	r3, #1
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	695b      	ldr	r3, [r3, #20]
 80084c2:	f003 0304 	and.w	r3, r3, #4
 80084c6:	2b04      	cmp	r3, #4
 80084c8:	d118      	bne.n	80084fc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	691a      	ldr	r2, [r3, #16]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d4:	b2d2      	uxtb	r2, r2
 80084d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084dc:	1c5a      	adds	r2, r3, #1
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084e6:	3b01      	subs	r3, #1
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	3b01      	subs	r3, #1
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008500:	2b00      	cmp	r3, #0
 8008502:	f47f aec2 	bne.w	800828a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2220      	movs	r2, #32
 800850a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2200      	movs	r2, #0
 8008512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	e000      	b.n	8008524 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008522:	2302      	movs	r3, #2
  }
}
 8008524:	4618      	mov	r0, r3
 8008526:	3728      	adds	r7, #40	; 0x28
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	00010004 	.word	0x00010004

08008530 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b088      	sub	sp, #32
 8008534:	af02      	add	r7, sp, #8
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	4608      	mov	r0, r1
 800853a:	4611      	mov	r1, r2
 800853c:	461a      	mov	r2, r3
 800853e:	4603      	mov	r3, r0
 8008540:	817b      	strh	r3, [r7, #10]
 8008542:	460b      	mov	r3, r1
 8008544:	813b      	strh	r3, [r7, #8]
 8008546:	4613      	mov	r3, r2
 8008548:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008558:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855c:	9300      	str	r3, [sp, #0]
 800855e:	6a3b      	ldr	r3, [r7, #32]
 8008560:	2200      	movs	r2, #0
 8008562:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	f000 f960 	bl	800882c <I2C_WaitOnFlagUntilTimeout>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00d      	beq.n	800858e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800857c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008580:	d103      	bne.n	800858a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008588:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800858a:	2303      	movs	r3, #3
 800858c:	e05f      	b.n	800864e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800858e:	897b      	ldrh	r3, [r7, #10]
 8008590:	b2db      	uxtb	r3, r3
 8008592:	461a      	mov	r2, r3
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800859c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800859e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a0:	6a3a      	ldr	r2, [r7, #32]
 80085a2:	492d      	ldr	r1, [pc, #180]	; (8008658 <I2C_RequestMemoryWrite+0x128>)
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f000 f998 	bl	80088da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	e04c      	b.n	800864e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085b4:	2300      	movs	r3, #0
 80085b6:	617b      	str	r3, [r7, #20]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	695b      	ldr	r3, [r3, #20]
 80085be:	617b      	str	r3, [r7, #20]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	617b      	str	r3, [r7, #20]
 80085c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085cc:	6a39      	ldr	r1, [r7, #32]
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f000 fa02 	bl	80089d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00d      	beq.n	80085f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085de:	2b04      	cmp	r3, #4
 80085e0:	d107      	bne.n	80085f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e02b      	b.n	800864e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80085f6:	88fb      	ldrh	r3, [r7, #6]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d105      	bne.n	8008608 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80085fc:	893b      	ldrh	r3, [r7, #8]
 80085fe:	b2da      	uxtb	r2, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	611a      	str	r2, [r3, #16]
 8008606:	e021      	b.n	800864c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008608:	893b      	ldrh	r3, [r7, #8]
 800860a:	0a1b      	lsrs	r3, r3, #8
 800860c:	b29b      	uxth	r3, r3
 800860e:	b2da      	uxtb	r2, r3
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008618:	6a39      	ldr	r1, [r7, #32]
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f000 f9dc 	bl	80089d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00d      	beq.n	8008642 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862a:	2b04      	cmp	r3, #4
 800862c:	d107      	bne.n	800863e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800863c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e005      	b.n	800864e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008642:	893b      	ldrh	r3, [r7, #8]
 8008644:	b2da      	uxtb	r2, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3718      	adds	r7, #24
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	00010002 	.word	0x00010002

0800865c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b088      	sub	sp, #32
 8008660:	af02      	add	r7, sp, #8
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	4608      	mov	r0, r1
 8008666:	4611      	mov	r1, r2
 8008668:	461a      	mov	r2, r3
 800866a:	4603      	mov	r3, r0
 800866c:	817b      	strh	r3, [r7, #10]
 800866e:	460b      	mov	r3, r1
 8008670:	813b      	strh	r3, [r7, #8]
 8008672:	4613      	mov	r3, r2
 8008674:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008684:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008694:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008698:	9300      	str	r3, [sp, #0]
 800869a:	6a3b      	ldr	r3, [r7, #32]
 800869c:	2200      	movs	r2, #0
 800869e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	f000 f8c2 	bl	800882c <I2C_WaitOnFlagUntilTimeout>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00d      	beq.n	80086ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086bc:	d103      	bne.n	80086c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e0aa      	b.n	8008820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80086ca:	897b      	ldrh	r3, [r7, #10]
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	461a      	mov	r2, r3
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80086d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80086da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086dc:	6a3a      	ldr	r2, [r7, #32]
 80086de:	4952      	ldr	r1, [pc, #328]	; (8008828 <I2C_RequestMemoryRead+0x1cc>)
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f000 f8fa 	bl	80088da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d001      	beq.n	80086f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e097      	b.n	8008820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086f0:	2300      	movs	r3, #0
 80086f2:	617b      	str	r3, [r7, #20]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	695b      	ldr	r3, [r3, #20]
 80086fa:	617b      	str	r3, [r7, #20]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	617b      	str	r3, [r7, #20]
 8008704:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008708:	6a39      	ldr	r1, [r7, #32]
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f000 f964 	bl	80089d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008710:	4603      	mov	r3, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00d      	beq.n	8008732 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871a:	2b04      	cmp	r3, #4
 800871c:	d107      	bne.n	800872e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800872c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e076      	b.n	8008820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008732:	88fb      	ldrh	r3, [r7, #6]
 8008734:	2b01      	cmp	r3, #1
 8008736:	d105      	bne.n	8008744 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008738:	893b      	ldrh	r3, [r7, #8]
 800873a:	b2da      	uxtb	r2, r3
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	611a      	str	r2, [r3, #16]
 8008742:	e021      	b.n	8008788 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008744:	893b      	ldrh	r3, [r7, #8]
 8008746:	0a1b      	lsrs	r3, r3, #8
 8008748:	b29b      	uxth	r3, r3
 800874a:	b2da      	uxtb	r2, r3
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008754:	6a39      	ldr	r1, [r7, #32]
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f000 f93e 	bl	80089d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00d      	beq.n	800877e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008766:	2b04      	cmp	r3, #4
 8008768:	d107      	bne.n	800877a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008778:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	e050      	b.n	8008820 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800877e:	893b      	ldrh	r3, [r7, #8]
 8008780:	b2da      	uxtb	r2, r3
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800878a:	6a39      	ldr	r1, [r7, #32]
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f000 f923 	bl	80089d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00d      	beq.n	80087b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879c:	2b04      	cmp	r3, #4
 800879e:	d107      	bne.n	80087b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	e035      	b.n	8008820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80087c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c6:	9300      	str	r3, [sp, #0]
 80087c8:	6a3b      	ldr	r3, [r7, #32]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f000 f82b 	bl	800882c <I2C_WaitOnFlagUntilTimeout>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d00d      	beq.n	80087f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087ea:	d103      	bne.n	80087f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80087f4:	2303      	movs	r3, #3
 80087f6:	e013      	b.n	8008820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80087f8:	897b      	ldrh	r3, [r7, #10]
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	f043 0301 	orr.w	r3, r3, #1
 8008800:	b2da      	uxtb	r2, r3
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880a:	6a3a      	ldr	r2, [r7, #32]
 800880c:	4906      	ldr	r1, [pc, #24]	; (8008828 <I2C_RequestMemoryRead+0x1cc>)
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f000 f863 	bl	80088da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	e000      	b.n	8008820 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3718      	adds	r7, #24
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}
 8008828:	00010002 	.word	0x00010002

0800882c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	603b      	str	r3, [r7, #0]
 8008838:	4613      	mov	r3, r2
 800883a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800883c:	e025      	b.n	800888a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008844:	d021      	beq.n	800888a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008846:	f7fe fe85 	bl	8007554 <HAL_GetTick>
 800884a:	4602      	mov	r2, r0
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	683a      	ldr	r2, [r7, #0]
 8008852:	429a      	cmp	r2, r3
 8008854:	d302      	bcc.n	800885c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d116      	bne.n	800888a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2220      	movs	r2, #32
 8008866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008876:	f043 0220 	orr.w	r2, r3, #32
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e023      	b.n	80088d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	0c1b      	lsrs	r3, r3, #16
 800888e:	b2db      	uxtb	r3, r3
 8008890:	2b01      	cmp	r3, #1
 8008892:	d10d      	bne.n	80088b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	695b      	ldr	r3, [r3, #20]
 800889a:	43da      	mvns	r2, r3
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	4013      	ands	r3, r2
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	bf0c      	ite	eq
 80088a6:	2301      	moveq	r3, #1
 80088a8:	2300      	movne	r3, #0
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	461a      	mov	r2, r3
 80088ae:	e00c      	b.n	80088ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	699b      	ldr	r3, [r3, #24]
 80088b6:	43da      	mvns	r2, r3
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	4013      	ands	r3, r2
 80088bc:	b29b      	uxth	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	bf0c      	ite	eq
 80088c2:	2301      	moveq	r3, #1
 80088c4:	2300      	movne	r3, #0
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	461a      	mov	r2, r3
 80088ca:	79fb      	ldrb	r3, [r7, #7]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d0b6      	beq.n	800883e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b084      	sub	sp, #16
 80088de:	af00      	add	r7, sp, #0
 80088e0:	60f8      	str	r0, [r7, #12]
 80088e2:	60b9      	str	r1, [r7, #8]
 80088e4:	607a      	str	r2, [r7, #4]
 80088e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80088e8:	e051      	b.n	800898e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	695b      	ldr	r3, [r3, #20]
 80088f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088f8:	d123      	bne.n	8008942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008908:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008912:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2220      	movs	r2, #32
 800891e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892e:	f043 0204 	orr.w	r2, r3, #4
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2200      	movs	r2, #0
 800893a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	e046      	b.n	80089d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008948:	d021      	beq.n	800898e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800894a:	f7fe fe03 	bl	8007554 <HAL_GetTick>
 800894e:	4602      	mov	r2, r0
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	429a      	cmp	r2, r3
 8008958:	d302      	bcc.n	8008960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d116      	bne.n	800898e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2220      	movs	r2, #32
 800896a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800897a:	f043 0220 	orr.w	r2, r3, #32
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2200      	movs	r2, #0
 8008986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e020      	b.n	80089d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	0c1b      	lsrs	r3, r3, #16
 8008992:	b2db      	uxtb	r3, r3
 8008994:	2b01      	cmp	r3, #1
 8008996:	d10c      	bne.n	80089b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	695b      	ldr	r3, [r3, #20]
 800899e:	43da      	mvns	r2, r3
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	4013      	ands	r3, r2
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	bf14      	ite	ne
 80089aa:	2301      	movne	r3, #1
 80089ac:	2300      	moveq	r3, #0
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	e00b      	b.n	80089ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	43da      	mvns	r2, r3
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	4013      	ands	r3, r2
 80089be:	b29b      	uxth	r3, r3
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	bf14      	ite	ne
 80089c4:	2301      	movne	r3, #1
 80089c6:	2300      	moveq	r3, #0
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d18d      	bne.n	80088ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80089e4:	e02d      	b.n	8008a42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80089e6:	68f8      	ldr	r0, [r7, #12]
 80089e8:	f000 f8ce 	bl	8008b88 <I2C_IsAcknowledgeFailed>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d001      	beq.n	80089f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e02d      	b.n	8008a52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089fc:	d021      	beq.n	8008a42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089fe:	f7fe fda9 	bl	8007554 <HAL_GetTick>
 8008a02:	4602      	mov	r2, r0
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	68ba      	ldr	r2, [r7, #8]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d302      	bcc.n	8008a14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d116      	bne.n	8008a42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2220      	movs	r2, #32
 8008a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2e:	f043 0220 	orr.w	r2, r3, #32
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e007      	b.n	8008a52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	695b      	ldr	r3, [r3, #20]
 8008a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a4c:	2b80      	cmp	r3, #128	; 0x80
 8008a4e:	d1ca      	bne.n	80089e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3710      	adds	r7, #16
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b084      	sub	sp, #16
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	60f8      	str	r0, [r7, #12]
 8008a62:	60b9      	str	r1, [r7, #8]
 8008a64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a66:	e02d      	b.n	8008ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f000 f88d 	bl	8008b88 <I2C_IsAcknowledgeFailed>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d001      	beq.n	8008a78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	e02d      	b.n	8008ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a7e:	d021      	beq.n	8008ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a80:	f7fe fd68 	bl	8007554 <HAL_GetTick>
 8008a84:	4602      	mov	r2, r0
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	68ba      	ldr	r2, [r7, #8]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d302      	bcc.n	8008a96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d116      	bne.n	8008ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2220      	movs	r2, #32
 8008aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab0:	f043 0220 	orr.w	r2, r3, #32
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e007      	b.n	8008ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	695b      	ldr	r3, [r3, #20]
 8008aca:	f003 0304 	and.w	r3, r3, #4
 8008ace:	2b04      	cmp	r3, #4
 8008ad0:	d1ca      	bne.n	8008a68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008ae8:	e042      	b.n	8008b70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	695b      	ldr	r3, [r3, #20]
 8008af0:	f003 0310 	and.w	r3, r3, #16
 8008af4:	2b10      	cmp	r3, #16
 8008af6:	d119      	bne.n	8008b2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f06f 0210 	mvn.w	r2, #16
 8008b00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2200      	movs	r2, #0
 8008b06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2220      	movs	r2, #32
 8008b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e029      	b.n	8008b80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b2c:	f7fe fd12 	bl	8007554 <HAL_GetTick>
 8008b30:	4602      	mov	r2, r0
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d302      	bcc.n	8008b42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d116      	bne.n	8008b70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2220      	movs	r2, #32
 8008b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5c:	f043 0220 	orr.w	r2, r3, #32
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e007      	b.n	8008b80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	695b      	ldr	r3, [r3, #20]
 8008b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b7a:	2b40      	cmp	r3, #64	; 0x40
 8008b7c:	d1b5      	bne.n	8008aea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	695b      	ldr	r3, [r3, #20]
 8008b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b9e:	d11b      	bne.n	8008bd8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008ba8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2220      	movs	r2, #32
 8008bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc4:	f043 0204 	orr.w	r2, r3, #4
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e000      	b.n	8008bda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	370c      	adds	r7, #12
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
	...

08008be8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d101      	bne.n	8008bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e264      	b.n	80090c4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 0301 	and.w	r3, r3, #1
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d075      	beq.n	8008cf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c06:	4ba3      	ldr	r3, [pc, #652]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	f003 030c 	and.w	r3, r3, #12
 8008c0e:	2b04      	cmp	r3, #4
 8008c10:	d00c      	beq.n	8008c2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c12:	4ba0      	ldr	r3, [pc, #640]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c1a:	2b08      	cmp	r3, #8
 8008c1c:	d112      	bne.n	8008c44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c1e:	4b9d      	ldr	r3, [pc, #628]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c2a:	d10b      	bne.n	8008c44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c2c:	4b99      	ldr	r3, [pc, #612]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d05b      	beq.n	8008cf0 <HAL_RCC_OscConfig+0x108>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d157      	bne.n	8008cf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	e23f      	b.n	80090c4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c4c:	d106      	bne.n	8008c5c <HAL_RCC_OscConfig+0x74>
 8008c4e:	4b91      	ldr	r3, [pc, #580]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a90      	ldr	r2, [pc, #576]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c58:	6013      	str	r3, [r2, #0]
 8008c5a:	e01d      	b.n	8008c98 <HAL_RCC_OscConfig+0xb0>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c64:	d10c      	bne.n	8008c80 <HAL_RCC_OscConfig+0x98>
 8008c66:	4b8b      	ldr	r3, [pc, #556]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a8a      	ldr	r2, [pc, #552]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c70:	6013      	str	r3, [r2, #0]
 8008c72:	4b88      	ldr	r3, [pc, #544]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a87      	ldr	r2, [pc, #540]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c7c:	6013      	str	r3, [r2, #0]
 8008c7e:	e00b      	b.n	8008c98 <HAL_RCC_OscConfig+0xb0>
 8008c80:	4b84      	ldr	r3, [pc, #528]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a83      	ldr	r2, [pc, #524]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c8a:	6013      	str	r3, [r2, #0]
 8008c8c:	4b81      	ldr	r3, [pc, #516]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a80      	ldr	r2, [pc, #512]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d013      	beq.n	8008cc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ca0:	f7fe fc58 	bl	8007554 <HAL_GetTick>
 8008ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ca6:	e008      	b.n	8008cba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ca8:	f7fe fc54 	bl	8007554 <HAL_GetTick>
 8008cac:	4602      	mov	r2, r0
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	2b64      	cmp	r3, #100	; 0x64
 8008cb4:	d901      	bls.n	8008cba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	e204      	b.n	80090c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cba:	4b76      	ldr	r3, [pc, #472]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d0f0      	beq.n	8008ca8 <HAL_RCC_OscConfig+0xc0>
 8008cc6:	e014      	b.n	8008cf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cc8:	f7fe fc44 	bl	8007554 <HAL_GetTick>
 8008ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008cce:	e008      	b.n	8008ce2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008cd0:	f7fe fc40 	bl	8007554 <HAL_GetTick>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	2b64      	cmp	r3, #100	; 0x64
 8008cdc:	d901      	bls.n	8008ce2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	e1f0      	b.n	80090c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ce2:	4b6c      	ldr	r3, [pc, #432]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1f0      	bne.n	8008cd0 <HAL_RCC_OscConfig+0xe8>
 8008cee:	e000      	b.n	8008cf2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 0302 	and.w	r3, r3, #2
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d063      	beq.n	8008dc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008cfe:	4b65      	ldr	r3, [pc, #404]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	f003 030c 	and.w	r3, r3, #12
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00b      	beq.n	8008d22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d0a:	4b62      	ldr	r3, [pc, #392]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d12:	2b08      	cmp	r3, #8
 8008d14:	d11c      	bne.n	8008d50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d16:	4b5f      	ldr	r3, [pc, #380]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d116      	bne.n	8008d50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d22:	4b5c      	ldr	r3, [pc, #368]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f003 0302 	and.w	r3, r3, #2
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d005      	beq.n	8008d3a <HAL_RCC_OscConfig+0x152>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d001      	beq.n	8008d3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	e1c4      	b.n	80090c4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d3a:	4b56      	ldr	r3, [pc, #344]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	00db      	lsls	r3, r3, #3
 8008d48:	4952      	ldr	r1, [pc, #328]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d4e:	e03a      	b.n	8008dc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d020      	beq.n	8008d9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d58:	4b4f      	ldr	r3, [pc, #316]	; (8008e98 <HAL_RCC_OscConfig+0x2b0>)
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d5e:	f7fe fbf9 	bl	8007554 <HAL_GetTick>
 8008d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d64:	e008      	b.n	8008d78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d66:	f7fe fbf5 	bl	8007554 <HAL_GetTick>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	1ad3      	subs	r3, r2, r3
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	d901      	bls.n	8008d78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008d74:	2303      	movs	r3, #3
 8008d76:	e1a5      	b.n	80090c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d78:	4b46      	ldr	r3, [pc, #280]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f003 0302 	and.w	r3, r3, #2
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d0f0      	beq.n	8008d66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d84:	4b43      	ldr	r3, [pc, #268]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	00db      	lsls	r3, r3, #3
 8008d92:	4940      	ldr	r1, [pc, #256]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008d94:	4313      	orrs	r3, r2
 8008d96:	600b      	str	r3, [r1, #0]
 8008d98:	e015      	b.n	8008dc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d9a:	4b3f      	ldr	r3, [pc, #252]	; (8008e98 <HAL_RCC_OscConfig+0x2b0>)
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008da0:	f7fe fbd8 	bl	8007554 <HAL_GetTick>
 8008da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008da6:	e008      	b.n	8008dba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008da8:	f7fe fbd4 	bl	8007554 <HAL_GetTick>
 8008dac:	4602      	mov	r2, r0
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	d901      	bls.n	8008dba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008db6:	2303      	movs	r3, #3
 8008db8:	e184      	b.n	80090c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008dba:	4b36      	ldr	r3, [pc, #216]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f003 0302 	and.w	r3, r3, #2
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1f0      	bne.n	8008da8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f003 0308 	and.w	r3, r3, #8
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d030      	beq.n	8008e34 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	695b      	ldr	r3, [r3, #20]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d016      	beq.n	8008e08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008dda:	4b30      	ldr	r3, [pc, #192]	; (8008e9c <HAL_RCC_OscConfig+0x2b4>)
 8008ddc:	2201      	movs	r2, #1
 8008dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008de0:	f7fe fbb8 	bl	8007554 <HAL_GetTick>
 8008de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008de6:	e008      	b.n	8008dfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008de8:	f7fe fbb4 	bl	8007554 <HAL_GetTick>
 8008dec:	4602      	mov	r2, r0
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	1ad3      	subs	r3, r2, r3
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d901      	bls.n	8008dfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008df6:	2303      	movs	r3, #3
 8008df8:	e164      	b.n	80090c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008dfa:	4b26      	ldr	r3, [pc, #152]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dfe:	f003 0302 	and.w	r3, r3, #2
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d0f0      	beq.n	8008de8 <HAL_RCC_OscConfig+0x200>
 8008e06:	e015      	b.n	8008e34 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e08:	4b24      	ldr	r3, [pc, #144]	; (8008e9c <HAL_RCC_OscConfig+0x2b4>)
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e0e:	f7fe fba1 	bl	8007554 <HAL_GetTick>
 8008e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e14:	e008      	b.n	8008e28 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e16:	f7fe fb9d 	bl	8007554 <HAL_GetTick>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	1ad3      	subs	r3, r2, r3
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d901      	bls.n	8008e28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e14d      	b.n	80090c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e28:	4b1a      	ldr	r3, [pc, #104]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e2c:	f003 0302 	and.w	r3, r3, #2
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d1f0      	bne.n	8008e16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 0304 	and.w	r3, r3, #4
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f000 80a0 	beq.w	8008f82 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e42:	2300      	movs	r3, #0
 8008e44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e46:	4b13      	ldr	r3, [pc, #76]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d10f      	bne.n	8008e72 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e52:	2300      	movs	r3, #0
 8008e54:	60bb      	str	r3, [r7, #8]
 8008e56:	4b0f      	ldr	r3, [pc, #60]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5a:	4a0e      	ldr	r2, [pc, #56]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e60:	6413      	str	r3, [r2, #64]	; 0x40
 8008e62:	4b0c      	ldr	r3, [pc, #48]	; (8008e94 <HAL_RCC_OscConfig+0x2ac>)
 8008e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e6a:	60bb      	str	r3, [r7, #8]
 8008e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e72:	4b0b      	ldr	r3, [pc, #44]	; (8008ea0 <HAL_RCC_OscConfig+0x2b8>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d121      	bne.n	8008ec2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e7e:	4b08      	ldr	r3, [pc, #32]	; (8008ea0 <HAL_RCC_OscConfig+0x2b8>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a07      	ldr	r2, [pc, #28]	; (8008ea0 <HAL_RCC_OscConfig+0x2b8>)
 8008e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e8a:	f7fe fb63 	bl	8007554 <HAL_GetTick>
 8008e8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e90:	e011      	b.n	8008eb6 <HAL_RCC_OscConfig+0x2ce>
 8008e92:	bf00      	nop
 8008e94:	40023800 	.word	0x40023800
 8008e98:	42470000 	.word	0x42470000
 8008e9c:	42470e80 	.word	0x42470e80
 8008ea0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ea4:	f7fe fb56 	bl	8007554 <HAL_GetTick>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	1ad3      	subs	r3, r2, r3
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d901      	bls.n	8008eb6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	e106      	b.n	80090c4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008eb6:	4b85      	ldr	r3, [pc, #532]	; (80090cc <HAL_RCC_OscConfig+0x4e4>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d0f0      	beq.n	8008ea4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d106      	bne.n	8008ed8 <HAL_RCC_OscConfig+0x2f0>
 8008eca:	4b81      	ldr	r3, [pc, #516]	; (80090d0 <HAL_RCC_OscConfig+0x4e8>)
 8008ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ece:	4a80      	ldr	r2, [pc, #512]	; (80090d0 <HAL_RCC_OscConfig+0x4e8>)
 8008ed0:	f043 0301 	orr.w	r3, r3, #1
 8008ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8008ed6:	e01c      	b.n	8008f12 <HAL_RCC_OscConfig+0x32a>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	2b05      	cmp	r3, #5
 8008ede:	d10c      	bne.n	8008efa <HAL_RCC_OscConfig+0x312>
 8008ee0:	4b7b      	ldr	r3, [pc, #492]	; (80090d0 <HAL_RCC_OscConfig+0x4e8>)
 8008ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee4:	4a7a      	ldr	r2, [pc, #488]	; (80090d0 <HAL_RCC_OscConfig+0x4e8>)
 8008ee6:	f043 0304 	orr.w	r3, r3, #4
 8008eea:	6713      	str	r3, [r2, #112]	; 0x70
 8008eec:	4b78      	ldr	r3, [pc, #480]	; (80090d0 <HAL_RCC_OscConfig+0x4e8>)
 8008eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ef0:	4a77      	ldr	r2, [pc, #476]	; (80090d0 <HAL_RCC_OscConfig+0x4e8>)
 8008ef2:	f043 0301 	orr.w	r3, r3, #1
 8008ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8008ef8:	e00b      	b.n	8008f12 <HAL_RCC_OscConfig+0x32a>
 8008efa:	4b75      	ldr	r3, [pc, #468]	; (80090d0 <HAL_RCC_OscConfig+0x4e8>)
 8008efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008efe:	4a74      	ldr	r2, [pc, #464]	; (80090d0 <HAL_RCC_OscConfig+0x4e8>)
 8008f00:	f023 0301 	bic.w	r3, r3, #1
 8008f04:	6713      	str	r3, [r2, #112]	; 0x70
 8008f06:	4b72      	ldr	r3, [pc, #456]	; (80090d0 <HAL_RCC_OscConfig+0x4e8>)
 8008f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f0a:	4a71      	ldr	r2, [pc, #452]	; (80090d0 <HAL_RCC_OscConfig+0x4e8>)
 8008f0c:	f023 0304 	bic.w	r3, r3, #4
 8008f10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d015      	beq.n	8008f46 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f1a:	f7fe fb1b 	bl	8007554 <HAL_GetTick>
 8008f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f20:	e00a      	b.n	8008f38 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f22:	f7fe fb17 	bl	8007554 <HAL_GetTick>
 8008f26:	4602      	mov	r2, r0
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	1ad3      	subs	r3, r2, r3
 8008f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d901      	bls.n	8008f38 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008f34:	2303      	movs	r3, #3
 8008f36:	e0c5      	b.n	80090c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f38:	4b65      	ldr	r3, [pc, #404]	; (80090d0 <HAL_RCC_OscConfig+0x4e8>)
 8008f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f3c:	f003 0302 	and.w	r3, r3, #2
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d0ee      	beq.n	8008f22 <HAL_RCC_OscConfig+0x33a>
 8008f44:	e014      	b.n	8008f70 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f46:	f7fe fb05 	bl	8007554 <HAL_GetTick>
 8008f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f4c:	e00a      	b.n	8008f64 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f4e:	f7fe fb01 	bl	8007554 <HAL_GetTick>
 8008f52:	4602      	mov	r2, r0
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	1ad3      	subs	r3, r2, r3
 8008f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d901      	bls.n	8008f64 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008f60:	2303      	movs	r3, #3
 8008f62:	e0af      	b.n	80090c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f64:	4b5a      	ldr	r3, [pc, #360]	; (80090d0 <HAL_RCC_OscConfig+0x4e8>)
 8008f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f68:	f003 0302 	and.w	r3, r3, #2
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1ee      	bne.n	8008f4e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008f70:	7dfb      	ldrb	r3, [r7, #23]
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d105      	bne.n	8008f82 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f76:	4b56      	ldr	r3, [pc, #344]	; (80090d0 <HAL_RCC_OscConfig+0x4e8>)
 8008f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7a:	4a55      	ldr	r2, [pc, #340]	; (80090d0 <HAL_RCC_OscConfig+0x4e8>)
 8008f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	699b      	ldr	r3, [r3, #24]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	f000 809b 	beq.w	80090c2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008f8c:	4b50      	ldr	r3, [pc, #320]	; (80090d0 <HAL_RCC_OscConfig+0x4e8>)
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	f003 030c 	and.w	r3, r3, #12
 8008f94:	2b08      	cmp	r3, #8
 8008f96:	d05c      	beq.n	8009052 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d141      	bne.n	8009024 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fa0:	4b4c      	ldr	r3, [pc, #304]	; (80090d4 <HAL_RCC_OscConfig+0x4ec>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fa6:	f7fe fad5 	bl	8007554 <HAL_GetTick>
 8008faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fac:	e008      	b.n	8008fc0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fae:	f7fe fad1 	bl	8007554 <HAL_GetTick>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	d901      	bls.n	8008fc0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	e081      	b.n	80090c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fc0:	4b43      	ldr	r3, [pc, #268]	; (80090d0 <HAL_RCC_OscConfig+0x4e8>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d1f0      	bne.n	8008fae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	69da      	ldr	r2, [r3, #28]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6a1b      	ldr	r3, [r3, #32]
 8008fd4:	431a      	orrs	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fda:	019b      	lsls	r3, r3, #6
 8008fdc:	431a      	orrs	r2, r3
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe2:	085b      	lsrs	r3, r3, #1
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	041b      	lsls	r3, r3, #16
 8008fe8:	431a      	orrs	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fee:	061b      	lsls	r3, r3, #24
 8008ff0:	4937      	ldr	r1, [pc, #220]	; (80090d0 <HAL_RCC_OscConfig+0x4e8>)
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ff6:	4b37      	ldr	r3, [pc, #220]	; (80090d4 <HAL_RCC_OscConfig+0x4ec>)
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ffc:	f7fe faaa 	bl	8007554 <HAL_GetTick>
 8009000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009002:	e008      	b.n	8009016 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009004:	f7fe faa6 	bl	8007554 <HAL_GetTick>
 8009008:	4602      	mov	r2, r0
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	1ad3      	subs	r3, r2, r3
 800900e:	2b02      	cmp	r3, #2
 8009010:	d901      	bls.n	8009016 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009012:	2303      	movs	r3, #3
 8009014:	e056      	b.n	80090c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009016:	4b2e      	ldr	r3, [pc, #184]	; (80090d0 <HAL_RCC_OscConfig+0x4e8>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800901e:	2b00      	cmp	r3, #0
 8009020:	d0f0      	beq.n	8009004 <HAL_RCC_OscConfig+0x41c>
 8009022:	e04e      	b.n	80090c2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009024:	4b2b      	ldr	r3, [pc, #172]	; (80090d4 <HAL_RCC_OscConfig+0x4ec>)
 8009026:	2200      	movs	r2, #0
 8009028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800902a:	f7fe fa93 	bl	8007554 <HAL_GetTick>
 800902e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009030:	e008      	b.n	8009044 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009032:	f7fe fa8f 	bl	8007554 <HAL_GetTick>
 8009036:	4602      	mov	r2, r0
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	1ad3      	subs	r3, r2, r3
 800903c:	2b02      	cmp	r3, #2
 800903e:	d901      	bls.n	8009044 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009040:	2303      	movs	r3, #3
 8009042:	e03f      	b.n	80090c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009044:	4b22      	ldr	r3, [pc, #136]	; (80090d0 <HAL_RCC_OscConfig+0x4e8>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1f0      	bne.n	8009032 <HAL_RCC_OscConfig+0x44a>
 8009050:	e037      	b.n	80090c2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	699b      	ldr	r3, [r3, #24]
 8009056:	2b01      	cmp	r3, #1
 8009058:	d101      	bne.n	800905e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	e032      	b.n	80090c4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800905e:	4b1c      	ldr	r3, [pc, #112]	; (80090d0 <HAL_RCC_OscConfig+0x4e8>)
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d028      	beq.n	80090be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009076:	429a      	cmp	r2, r3
 8009078:	d121      	bne.n	80090be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009084:	429a      	cmp	r2, r3
 8009086:	d11a      	bne.n	80090be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800908e:	4013      	ands	r3, r2
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009094:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009096:	4293      	cmp	r3, r2
 8009098:	d111      	bne.n	80090be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a4:	085b      	lsrs	r3, r3, #1
 80090a6:	3b01      	subs	r3, #1
 80090a8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d107      	bne.n	80090be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d001      	beq.n	80090c2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	e000      	b.n	80090c4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3718      	adds	r7, #24
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	40007000 	.word	0x40007000
 80090d0:	40023800 	.word	0x40023800
 80090d4:	42470060 	.word	0x42470060

080090d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d101      	bne.n	80090ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e0cc      	b.n	8009286 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80090ec:	4b68      	ldr	r3, [pc, #416]	; (8009290 <HAL_RCC_ClockConfig+0x1b8>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 0307 	and.w	r3, r3, #7
 80090f4:	683a      	ldr	r2, [r7, #0]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d90c      	bls.n	8009114 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090fa:	4b65      	ldr	r3, [pc, #404]	; (8009290 <HAL_RCC_ClockConfig+0x1b8>)
 80090fc:	683a      	ldr	r2, [r7, #0]
 80090fe:	b2d2      	uxtb	r2, r2
 8009100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009102:	4b63      	ldr	r3, [pc, #396]	; (8009290 <HAL_RCC_ClockConfig+0x1b8>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 0307 	and.w	r3, r3, #7
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	429a      	cmp	r2, r3
 800910e:	d001      	beq.n	8009114 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	e0b8      	b.n	8009286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 0302 	and.w	r3, r3, #2
 800911c:	2b00      	cmp	r3, #0
 800911e:	d020      	beq.n	8009162 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 0304 	and.w	r3, r3, #4
 8009128:	2b00      	cmp	r3, #0
 800912a:	d005      	beq.n	8009138 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800912c:	4b59      	ldr	r3, [pc, #356]	; (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	4a58      	ldr	r2, [pc, #352]	; (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 8009132:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009136:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f003 0308 	and.w	r3, r3, #8
 8009140:	2b00      	cmp	r3, #0
 8009142:	d005      	beq.n	8009150 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009144:	4b53      	ldr	r3, [pc, #332]	; (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	4a52      	ldr	r2, [pc, #328]	; (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 800914a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800914e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009150:	4b50      	ldr	r3, [pc, #320]	; (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	494d      	ldr	r1, [pc, #308]	; (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 800915e:	4313      	orrs	r3, r2
 8009160:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 0301 	and.w	r3, r3, #1
 800916a:	2b00      	cmp	r3, #0
 800916c:	d044      	beq.n	80091f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	2b01      	cmp	r3, #1
 8009174:	d107      	bne.n	8009186 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009176:	4b47      	ldr	r3, [pc, #284]	; (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800917e:	2b00      	cmp	r3, #0
 8009180:	d119      	bne.n	80091b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e07f      	b.n	8009286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	2b02      	cmp	r3, #2
 800918c:	d003      	beq.n	8009196 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009192:	2b03      	cmp	r3, #3
 8009194:	d107      	bne.n	80091a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009196:	4b3f      	ldr	r3, [pc, #252]	; (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d109      	bne.n	80091b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	e06f      	b.n	8009286 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091a6:	4b3b      	ldr	r3, [pc, #236]	; (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 0302 	and.w	r3, r3, #2
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d101      	bne.n	80091b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	e067      	b.n	8009286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80091b6:	4b37      	ldr	r3, [pc, #220]	; (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	f023 0203 	bic.w	r2, r3, #3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	4934      	ldr	r1, [pc, #208]	; (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 80091c4:	4313      	orrs	r3, r2
 80091c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80091c8:	f7fe f9c4 	bl	8007554 <HAL_GetTick>
 80091cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091ce:	e00a      	b.n	80091e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091d0:	f7fe f9c0 	bl	8007554 <HAL_GetTick>
 80091d4:	4602      	mov	r2, r0
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	1ad3      	subs	r3, r2, r3
 80091da:	f241 3288 	movw	r2, #5000	; 0x1388
 80091de:	4293      	cmp	r3, r2
 80091e0:	d901      	bls.n	80091e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80091e2:	2303      	movs	r3, #3
 80091e4:	e04f      	b.n	8009286 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091e6:	4b2b      	ldr	r3, [pc, #172]	; (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	f003 020c 	and.w	r2, r3, #12
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d1eb      	bne.n	80091d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80091f8:	4b25      	ldr	r3, [pc, #148]	; (8009290 <HAL_RCC_ClockConfig+0x1b8>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 0307 	and.w	r3, r3, #7
 8009200:	683a      	ldr	r2, [r7, #0]
 8009202:	429a      	cmp	r2, r3
 8009204:	d20c      	bcs.n	8009220 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009206:	4b22      	ldr	r3, [pc, #136]	; (8009290 <HAL_RCC_ClockConfig+0x1b8>)
 8009208:	683a      	ldr	r2, [r7, #0]
 800920a:	b2d2      	uxtb	r2, r2
 800920c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800920e:	4b20      	ldr	r3, [pc, #128]	; (8009290 <HAL_RCC_ClockConfig+0x1b8>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f003 0307 	and.w	r3, r3, #7
 8009216:	683a      	ldr	r2, [r7, #0]
 8009218:	429a      	cmp	r2, r3
 800921a:	d001      	beq.n	8009220 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	e032      	b.n	8009286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 0304 	and.w	r3, r3, #4
 8009228:	2b00      	cmp	r3, #0
 800922a:	d008      	beq.n	800923e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800922c:	4b19      	ldr	r3, [pc, #100]	; (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	4916      	ldr	r1, [pc, #88]	; (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 800923a:	4313      	orrs	r3, r2
 800923c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f003 0308 	and.w	r3, r3, #8
 8009246:	2b00      	cmp	r3, #0
 8009248:	d009      	beq.n	800925e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800924a:	4b12      	ldr	r3, [pc, #72]	; (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	691b      	ldr	r3, [r3, #16]
 8009256:	00db      	lsls	r3, r3, #3
 8009258:	490e      	ldr	r1, [pc, #56]	; (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 800925a:	4313      	orrs	r3, r2
 800925c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800925e:	f000 f821 	bl	80092a4 <HAL_RCC_GetSysClockFreq>
 8009262:	4602      	mov	r2, r0
 8009264:	4b0b      	ldr	r3, [pc, #44]	; (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	091b      	lsrs	r3, r3, #4
 800926a:	f003 030f 	and.w	r3, r3, #15
 800926e:	490a      	ldr	r1, [pc, #40]	; (8009298 <HAL_RCC_ClockConfig+0x1c0>)
 8009270:	5ccb      	ldrb	r3, [r1, r3]
 8009272:	fa22 f303 	lsr.w	r3, r2, r3
 8009276:	4a09      	ldr	r2, [pc, #36]	; (800929c <HAL_RCC_ClockConfig+0x1c4>)
 8009278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800927a:	4b09      	ldr	r3, [pc, #36]	; (80092a0 <HAL_RCC_ClockConfig+0x1c8>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4618      	mov	r0, r3
 8009280:	f7fe f924 	bl	80074cc <HAL_InitTick>

  return HAL_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	40023c00 	.word	0x40023c00
 8009294:	40023800 	.word	0x40023800
 8009298:	0800f1c0 	.word	0x0800f1c0
 800929c:	2000000c 	.word	0x2000000c
 80092a0:	2000002c 	.word	0x2000002c

080092a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80092a8:	b084      	sub	sp, #16
 80092aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80092ac:	2300      	movs	r3, #0
 80092ae:	607b      	str	r3, [r7, #4]
 80092b0:	2300      	movs	r3, #0
 80092b2:	60fb      	str	r3, [r7, #12]
 80092b4:	2300      	movs	r3, #0
 80092b6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80092b8:	2300      	movs	r3, #0
 80092ba:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80092bc:	4b67      	ldr	r3, [pc, #412]	; (800945c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	f003 030c 	and.w	r3, r3, #12
 80092c4:	2b08      	cmp	r3, #8
 80092c6:	d00d      	beq.n	80092e4 <HAL_RCC_GetSysClockFreq+0x40>
 80092c8:	2b08      	cmp	r3, #8
 80092ca:	f200 80bd 	bhi.w	8009448 <HAL_RCC_GetSysClockFreq+0x1a4>
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d002      	beq.n	80092d8 <HAL_RCC_GetSysClockFreq+0x34>
 80092d2:	2b04      	cmp	r3, #4
 80092d4:	d003      	beq.n	80092de <HAL_RCC_GetSysClockFreq+0x3a>
 80092d6:	e0b7      	b.n	8009448 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80092d8:	4b61      	ldr	r3, [pc, #388]	; (8009460 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80092da:	60bb      	str	r3, [r7, #8]
       break;
 80092dc:	e0b7      	b.n	800944e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80092de:	4b61      	ldr	r3, [pc, #388]	; (8009464 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80092e0:	60bb      	str	r3, [r7, #8]
      break;
 80092e2:	e0b4      	b.n	800944e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80092e4:	4b5d      	ldr	r3, [pc, #372]	; (800945c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80092ee:	4b5b      	ldr	r3, [pc, #364]	; (800945c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d04d      	beq.n	8009396 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80092fa:	4b58      	ldr	r3, [pc, #352]	; (800945c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	099b      	lsrs	r3, r3, #6
 8009300:	461a      	mov	r2, r3
 8009302:	f04f 0300 	mov.w	r3, #0
 8009306:	f240 10ff 	movw	r0, #511	; 0x1ff
 800930a:	f04f 0100 	mov.w	r1, #0
 800930e:	ea02 0800 	and.w	r8, r2, r0
 8009312:	ea03 0901 	and.w	r9, r3, r1
 8009316:	4640      	mov	r0, r8
 8009318:	4649      	mov	r1, r9
 800931a:	f04f 0200 	mov.w	r2, #0
 800931e:	f04f 0300 	mov.w	r3, #0
 8009322:	014b      	lsls	r3, r1, #5
 8009324:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009328:	0142      	lsls	r2, r0, #5
 800932a:	4610      	mov	r0, r2
 800932c:	4619      	mov	r1, r3
 800932e:	ebb0 0008 	subs.w	r0, r0, r8
 8009332:	eb61 0109 	sbc.w	r1, r1, r9
 8009336:	f04f 0200 	mov.w	r2, #0
 800933a:	f04f 0300 	mov.w	r3, #0
 800933e:	018b      	lsls	r3, r1, #6
 8009340:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009344:	0182      	lsls	r2, r0, #6
 8009346:	1a12      	subs	r2, r2, r0
 8009348:	eb63 0301 	sbc.w	r3, r3, r1
 800934c:	f04f 0000 	mov.w	r0, #0
 8009350:	f04f 0100 	mov.w	r1, #0
 8009354:	00d9      	lsls	r1, r3, #3
 8009356:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800935a:	00d0      	lsls	r0, r2, #3
 800935c:	4602      	mov	r2, r0
 800935e:	460b      	mov	r3, r1
 8009360:	eb12 0208 	adds.w	r2, r2, r8
 8009364:	eb43 0309 	adc.w	r3, r3, r9
 8009368:	f04f 0000 	mov.w	r0, #0
 800936c:	f04f 0100 	mov.w	r1, #0
 8009370:	0259      	lsls	r1, r3, #9
 8009372:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8009376:	0250      	lsls	r0, r2, #9
 8009378:	4602      	mov	r2, r0
 800937a:	460b      	mov	r3, r1
 800937c:	4610      	mov	r0, r2
 800937e:	4619      	mov	r1, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	461a      	mov	r2, r3
 8009384:	f04f 0300 	mov.w	r3, #0
 8009388:	f7f7 fc7e 	bl	8000c88 <__aeabi_uldivmod>
 800938c:	4602      	mov	r2, r0
 800938e:	460b      	mov	r3, r1
 8009390:	4613      	mov	r3, r2
 8009392:	60fb      	str	r3, [r7, #12]
 8009394:	e04a      	b.n	800942c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009396:	4b31      	ldr	r3, [pc, #196]	; (800945c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	099b      	lsrs	r3, r3, #6
 800939c:	461a      	mov	r2, r3
 800939e:	f04f 0300 	mov.w	r3, #0
 80093a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80093a6:	f04f 0100 	mov.w	r1, #0
 80093aa:	ea02 0400 	and.w	r4, r2, r0
 80093ae:	ea03 0501 	and.w	r5, r3, r1
 80093b2:	4620      	mov	r0, r4
 80093b4:	4629      	mov	r1, r5
 80093b6:	f04f 0200 	mov.w	r2, #0
 80093ba:	f04f 0300 	mov.w	r3, #0
 80093be:	014b      	lsls	r3, r1, #5
 80093c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80093c4:	0142      	lsls	r2, r0, #5
 80093c6:	4610      	mov	r0, r2
 80093c8:	4619      	mov	r1, r3
 80093ca:	1b00      	subs	r0, r0, r4
 80093cc:	eb61 0105 	sbc.w	r1, r1, r5
 80093d0:	f04f 0200 	mov.w	r2, #0
 80093d4:	f04f 0300 	mov.w	r3, #0
 80093d8:	018b      	lsls	r3, r1, #6
 80093da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80093de:	0182      	lsls	r2, r0, #6
 80093e0:	1a12      	subs	r2, r2, r0
 80093e2:	eb63 0301 	sbc.w	r3, r3, r1
 80093e6:	f04f 0000 	mov.w	r0, #0
 80093ea:	f04f 0100 	mov.w	r1, #0
 80093ee:	00d9      	lsls	r1, r3, #3
 80093f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80093f4:	00d0      	lsls	r0, r2, #3
 80093f6:	4602      	mov	r2, r0
 80093f8:	460b      	mov	r3, r1
 80093fa:	1912      	adds	r2, r2, r4
 80093fc:	eb45 0303 	adc.w	r3, r5, r3
 8009400:	f04f 0000 	mov.w	r0, #0
 8009404:	f04f 0100 	mov.w	r1, #0
 8009408:	0299      	lsls	r1, r3, #10
 800940a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800940e:	0290      	lsls	r0, r2, #10
 8009410:	4602      	mov	r2, r0
 8009412:	460b      	mov	r3, r1
 8009414:	4610      	mov	r0, r2
 8009416:	4619      	mov	r1, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	461a      	mov	r2, r3
 800941c:	f04f 0300 	mov.w	r3, #0
 8009420:	f7f7 fc32 	bl	8000c88 <__aeabi_uldivmod>
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	4613      	mov	r3, r2
 800942a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800942c:	4b0b      	ldr	r3, [pc, #44]	; (800945c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	0c1b      	lsrs	r3, r3, #16
 8009432:	f003 0303 	and.w	r3, r3, #3
 8009436:	3301      	adds	r3, #1
 8009438:	005b      	lsls	r3, r3, #1
 800943a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	fbb2 f3f3 	udiv	r3, r2, r3
 8009444:	60bb      	str	r3, [r7, #8]
      break;
 8009446:	e002      	b.n	800944e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009448:	4b05      	ldr	r3, [pc, #20]	; (8009460 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800944a:	60bb      	str	r3, [r7, #8]
      break;
 800944c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800944e:	68bb      	ldr	r3, [r7, #8]
}
 8009450:	4618      	mov	r0, r3
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800945a:	bf00      	nop
 800945c:	40023800 	.word	0x40023800
 8009460:	00f42400 	.word	0x00f42400
 8009464:	007a1200 	.word	0x007a1200

08009468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009468:	b480      	push	{r7}
 800946a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800946c:	4b03      	ldr	r3, [pc, #12]	; (800947c <HAL_RCC_GetHCLKFreq+0x14>)
 800946e:	681b      	ldr	r3, [r3, #0]
}
 8009470:	4618      	mov	r0, r3
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr
 800947a:	bf00      	nop
 800947c:	2000000c 	.word	0x2000000c

08009480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009484:	f7ff fff0 	bl	8009468 <HAL_RCC_GetHCLKFreq>
 8009488:	4602      	mov	r2, r0
 800948a:	4b05      	ldr	r3, [pc, #20]	; (80094a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	0a9b      	lsrs	r3, r3, #10
 8009490:	f003 0307 	and.w	r3, r3, #7
 8009494:	4903      	ldr	r1, [pc, #12]	; (80094a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009496:	5ccb      	ldrb	r3, [r1, r3]
 8009498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800949c:	4618      	mov	r0, r3
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	40023800 	.word	0x40023800
 80094a4:	0800f1d0 	.word	0x0800f1d0

080094a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80094ac:	f7ff ffdc 	bl	8009468 <HAL_RCC_GetHCLKFreq>
 80094b0:	4602      	mov	r2, r0
 80094b2:	4b05      	ldr	r3, [pc, #20]	; (80094c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	0b5b      	lsrs	r3, r3, #13
 80094b8:	f003 0307 	and.w	r3, r3, #7
 80094bc:	4903      	ldr	r1, [pc, #12]	; (80094cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80094be:	5ccb      	ldrb	r3, [r1, r3]
 80094c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	40023800 	.word	0x40023800
 80094cc:	0800f1d0 	.word	0x0800f1d0

080094d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d101      	bne.n	80094e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	e041      	b.n	8009566 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d106      	bne.n	80094fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f7f8 f9cc 	bl	8001894 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2202      	movs	r2, #2
 8009500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	3304      	adds	r3, #4
 800950c:	4619      	mov	r1, r3
 800950e:	4610      	mov	r0, r2
 8009510:	f000 f9ce 	bl	80098b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2201      	movs	r2, #1
 8009518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2201      	movs	r2, #1
 8009520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2201      	movs	r2, #1
 8009528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2201      	movs	r2, #1
 8009560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009564:	2300      	movs	r3, #0
}
 8009566:	4618      	mov	r0, r3
 8009568:	3708      	adds	r7, #8
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
	...

08009570 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009570:	b480      	push	{r7}
 8009572:	b085      	sub	sp, #20
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800957e:	b2db      	uxtb	r3, r3
 8009580:	2b01      	cmp	r3, #1
 8009582:	d001      	beq.n	8009588 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	e04e      	b.n	8009626 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2202      	movs	r2, #2
 800958c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	68da      	ldr	r2, [r3, #12]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f042 0201 	orr.w	r2, r2, #1
 800959e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a23      	ldr	r2, [pc, #140]	; (8009634 <HAL_TIM_Base_Start_IT+0xc4>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d022      	beq.n	80095f0 <HAL_TIM_Base_Start_IT+0x80>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095b2:	d01d      	beq.n	80095f0 <HAL_TIM_Base_Start_IT+0x80>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a1f      	ldr	r2, [pc, #124]	; (8009638 <HAL_TIM_Base_Start_IT+0xc8>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d018      	beq.n	80095f0 <HAL_TIM_Base_Start_IT+0x80>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a1e      	ldr	r2, [pc, #120]	; (800963c <HAL_TIM_Base_Start_IT+0xcc>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d013      	beq.n	80095f0 <HAL_TIM_Base_Start_IT+0x80>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a1c      	ldr	r2, [pc, #112]	; (8009640 <HAL_TIM_Base_Start_IT+0xd0>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d00e      	beq.n	80095f0 <HAL_TIM_Base_Start_IT+0x80>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a1b      	ldr	r2, [pc, #108]	; (8009644 <HAL_TIM_Base_Start_IT+0xd4>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d009      	beq.n	80095f0 <HAL_TIM_Base_Start_IT+0x80>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a19      	ldr	r2, [pc, #100]	; (8009648 <HAL_TIM_Base_Start_IT+0xd8>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d004      	beq.n	80095f0 <HAL_TIM_Base_Start_IT+0x80>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a18      	ldr	r2, [pc, #96]	; (800964c <HAL_TIM_Base_Start_IT+0xdc>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d111      	bne.n	8009614 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	f003 0307 	and.w	r3, r3, #7
 80095fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2b06      	cmp	r3, #6
 8009600:	d010      	beq.n	8009624 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f042 0201 	orr.w	r2, r2, #1
 8009610:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009612:	e007      	b.n	8009624 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f042 0201 	orr.w	r2, r2, #1
 8009622:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3714      	adds	r7, #20
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	40010000 	.word	0x40010000
 8009638:	40000400 	.word	0x40000400
 800963c:	40000800 	.word	0x40000800
 8009640:	40000c00 	.word	0x40000c00
 8009644:	40010400 	.word	0x40010400
 8009648:	40014000 	.word	0x40014000
 800964c:	40001800 	.word	0x40001800

08009650 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	691b      	ldr	r3, [r3, #16]
 800965e:	f003 0302 	and.w	r3, r3, #2
 8009662:	2b02      	cmp	r3, #2
 8009664:	d122      	bne.n	80096ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	f003 0302 	and.w	r3, r3, #2
 8009670:	2b02      	cmp	r3, #2
 8009672:	d11b      	bne.n	80096ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f06f 0202 	mvn.w	r2, #2
 800967c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2201      	movs	r2, #1
 8009682:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	699b      	ldr	r3, [r3, #24]
 800968a:	f003 0303 	and.w	r3, r3, #3
 800968e:	2b00      	cmp	r3, #0
 8009690:	d003      	beq.n	800969a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 f8ee 	bl	8009874 <HAL_TIM_IC_CaptureCallback>
 8009698:	e005      	b.n	80096a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f8e0 	bl	8009860 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 f8f1 	bl	8009888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	f003 0304 	and.w	r3, r3, #4
 80096b6:	2b04      	cmp	r3, #4
 80096b8:	d122      	bne.n	8009700 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	f003 0304 	and.w	r3, r3, #4
 80096c4:	2b04      	cmp	r3, #4
 80096c6:	d11b      	bne.n	8009700 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f06f 0204 	mvn.w	r2, #4
 80096d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2202      	movs	r2, #2
 80096d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d003      	beq.n	80096ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f8c4 	bl	8009874 <HAL_TIM_IC_CaptureCallback>
 80096ec:	e005      	b.n	80096fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f8b6 	bl	8009860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 f8c7 	bl	8009888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	f003 0308 	and.w	r3, r3, #8
 800970a:	2b08      	cmp	r3, #8
 800970c:	d122      	bne.n	8009754 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	f003 0308 	and.w	r3, r3, #8
 8009718:	2b08      	cmp	r3, #8
 800971a:	d11b      	bne.n	8009754 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f06f 0208 	mvn.w	r2, #8
 8009724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2204      	movs	r2, #4
 800972a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	69db      	ldr	r3, [r3, #28]
 8009732:	f003 0303 	and.w	r3, r3, #3
 8009736:	2b00      	cmp	r3, #0
 8009738:	d003      	beq.n	8009742 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 f89a 	bl	8009874 <HAL_TIM_IC_CaptureCallback>
 8009740:	e005      	b.n	800974e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f88c 	bl	8009860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 f89d 	bl	8009888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	691b      	ldr	r3, [r3, #16]
 800975a:	f003 0310 	and.w	r3, r3, #16
 800975e:	2b10      	cmp	r3, #16
 8009760:	d122      	bne.n	80097a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	f003 0310 	and.w	r3, r3, #16
 800976c:	2b10      	cmp	r3, #16
 800976e:	d11b      	bne.n	80097a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f06f 0210 	mvn.w	r2, #16
 8009778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2208      	movs	r2, #8
 800977e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	69db      	ldr	r3, [r3, #28]
 8009786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800978a:	2b00      	cmp	r3, #0
 800978c:	d003      	beq.n	8009796 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f870 	bl	8009874 <HAL_TIM_IC_CaptureCallback>
 8009794:	e005      	b.n	80097a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f862 	bl	8009860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 f873 	bl	8009888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	f003 0301 	and.w	r3, r3, #1
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d10e      	bne.n	80097d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	f003 0301 	and.w	r3, r3, #1
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d107      	bne.n	80097d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f06f 0201 	mvn.w	r2, #1
 80097cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f7f8 f8a6 	bl	8001920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	691b      	ldr	r3, [r3, #16]
 80097da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097de:	2b80      	cmp	r3, #128	; 0x80
 80097e0:	d10e      	bne.n	8009800 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ec:	2b80      	cmp	r3, #128	; 0x80
 80097ee:	d107      	bne.n	8009800 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80097f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 f97e 	bl	8009afc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	691b      	ldr	r3, [r3, #16]
 8009806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800980a:	2b40      	cmp	r3, #64	; 0x40
 800980c:	d10e      	bne.n	800982c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009818:	2b40      	cmp	r3, #64	; 0x40
 800981a:	d107      	bne.n	800982c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 f838 	bl	800989c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	f003 0320 	and.w	r3, r3, #32
 8009836:	2b20      	cmp	r3, #32
 8009838:	d10e      	bne.n	8009858 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	f003 0320 	and.w	r3, r3, #32
 8009844:	2b20      	cmp	r3, #32
 8009846:	d107      	bne.n	8009858 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f06f 0220 	mvn.w	r2, #32
 8009850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 f948 	bl	8009ae8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009858:	bf00      	nop
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009868:	bf00      	nop
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800987c:	bf00      	nop
 800987e:	370c      	adds	r7, #12
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009890:	bf00      	nop
 8009892:	370c      	adds	r7, #12
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80098a4:	bf00      	nop
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b085      	sub	sp, #20
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	4a40      	ldr	r2, [pc, #256]	; (80099c4 <TIM_Base_SetConfig+0x114>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d013      	beq.n	80098f0 <TIM_Base_SetConfig+0x40>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098ce:	d00f      	beq.n	80098f0 <TIM_Base_SetConfig+0x40>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	4a3d      	ldr	r2, [pc, #244]	; (80099c8 <TIM_Base_SetConfig+0x118>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d00b      	beq.n	80098f0 <TIM_Base_SetConfig+0x40>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4a3c      	ldr	r2, [pc, #240]	; (80099cc <TIM_Base_SetConfig+0x11c>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d007      	beq.n	80098f0 <TIM_Base_SetConfig+0x40>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4a3b      	ldr	r2, [pc, #236]	; (80099d0 <TIM_Base_SetConfig+0x120>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d003      	beq.n	80098f0 <TIM_Base_SetConfig+0x40>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4a3a      	ldr	r2, [pc, #232]	; (80099d4 <TIM_Base_SetConfig+0x124>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d108      	bne.n	8009902 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	4313      	orrs	r3, r2
 8009900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a2f      	ldr	r2, [pc, #188]	; (80099c4 <TIM_Base_SetConfig+0x114>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d02b      	beq.n	8009962 <TIM_Base_SetConfig+0xb2>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009910:	d027      	beq.n	8009962 <TIM_Base_SetConfig+0xb2>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a2c      	ldr	r2, [pc, #176]	; (80099c8 <TIM_Base_SetConfig+0x118>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d023      	beq.n	8009962 <TIM_Base_SetConfig+0xb2>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a2b      	ldr	r2, [pc, #172]	; (80099cc <TIM_Base_SetConfig+0x11c>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d01f      	beq.n	8009962 <TIM_Base_SetConfig+0xb2>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a2a      	ldr	r2, [pc, #168]	; (80099d0 <TIM_Base_SetConfig+0x120>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d01b      	beq.n	8009962 <TIM_Base_SetConfig+0xb2>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a29      	ldr	r2, [pc, #164]	; (80099d4 <TIM_Base_SetConfig+0x124>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d017      	beq.n	8009962 <TIM_Base_SetConfig+0xb2>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a28      	ldr	r2, [pc, #160]	; (80099d8 <TIM_Base_SetConfig+0x128>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d013      	beq.n	8009962 <TIM_Base_SetConfig+0xb2>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a27      	ldr	r2, [pc, #156]	; (80099dc <TIM_Base_SetConfig+0x12c>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d00f      	beq.n	8009962 <TIM_Base_SetConfig+0xb2>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a26      	ldr	r2, [pc, #152]	; (80099e0 <TIM_Base_SetConfig+0x130>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d00b      	beq.n	8009962 <TIM_Base_SetConfig+0xb2>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4a25      	ldr	r2, [pc, #148]	; (80099e4 <TIM_Base_SetConfig+0x134>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d007      	beq.n	8009962 <TIM_Base_SetConfig+0xb2>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4a24      	ldr	r2, [pc, #144]	; (80099e8 <TIM_Base_SetConfig+0x138>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d003      	beq.n	8009962 <TIM_Base_SetConfig+0xb2>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4a23      	ldr	r2, [pc, #140]	; (80099ec <TIM_Base_SetConfig+0x13c>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d108      	bne.n	8009974 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	4313      	orrs	r3, r2
 8009972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	695b      	ldr	r3, [r3, #20]
 800997e:	4313      	orrs	r3, r2
 8009980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	68fa      	ldr	r2, [r7, #12]
 8009986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	689a      	ldr	r2, [r3, #8]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a0a      	ldr	r2, [pc, #40]	; (80099c4 <TIM_Base_SetConfig+0x114>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d003      	beq.n	80099a8 <TIM_Base_SetConfig+0xf8>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a0c      	ldr	r2, [pc, #48]	; (80099d4 <TIM_Base_SetConfig+0x124>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d103      	bne.n	80099b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	691a      	ldr	r2, [r3, #16]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	615a      	str	r2, [r3, #20]
}
 80099b6:	bf00      	nop
 80099b8:	3714      	adds	r7, #20
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	40010000 	.word	0x40010000
 80099c8:	40000400 	.word	0x40000400
 80099cc:	40000800 	.word	0x40000800
 80099d0:	40000c00 	.word	0x40000c00
 80099d4:	40010400 	.word	0x40010400
 80099d8:	40014000 	.word	0x40014000
 80099dc:	40014400 	.word	0x40014400
 80099e0:	40014800 	.word	0x40014800
 80099e4:	40001800 	.word	0x40001800
 80099e8:	40001c00 	.word	0x40001c00
 80099ec:	40002000 	.word	0x40002000

080099f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b085      	sub	sp, #20
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d101      	bne.n	8009a08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a04:	2302      	movs	r3, #2
 8009a06:	e05a      	b.n	8009abe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2202      	movs	r2, #2
 8009a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	4313      	orrs	r3, r2
 8009a38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	68fa      	ldr	r2, [r7, #12]
 8009a40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a21      	ldr	r2, [pc, #132]	; (8009acc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d022      	beq.n	8009a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a54:	d01d      	beq.n	8009a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a1d      	ldr	r2, [pc, #116]	; (8009ad0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d018      	beq.n	8009a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a1b      	ldr	r2, [pc, #108]	; (8009ad4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d013      	beq.n	8009a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a1a      	ldr	r2, [pc, #104]	; (8009ad8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d00e      	beq.n	8009a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a18      	ldr	r2, [pc, #96]	; (8009adc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d009      	beq.n	8009a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a17      	ldr	r2, [pc, #92]	; (8009ae0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d004      	beq.n	8009a92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a15      	ldr	r2, [pc, #84]	; (8009ae4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d10c      	bne.n	8009aac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	68ba      	ldr	r2, [r7, #8]
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	68ba      	ldr	r2, [r7, #8]
 8009aaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3714      	adds	r7, #20
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	40010000 	.word	0x40010000
 8009ad0:	40000400 	.word	0x40000400
 8009ad4:	40000800 	.word	0x40000800
 8009ad8:	40000c00 	.word	0x40000c00
 8009adc:	40010400 	.word	0x40010400
 8009ae0:	40014000 	.word	0x40014000
 8009ae4:	40001800 	.word	0x40001800

08009ae8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009af0:	bf00      	nop
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b04:	bf00      	nop
 8009b06:	370c      	adds	r7, #12
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d101      	bne.n	8009b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e03f      	b.n	8009ba2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d106      	bne.n	8009b3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7f7 fff0 	bl	8001b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2224      	movs	r2, #36	; 0x24
 8009b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	68da      	ldr	r2, [r3, #12]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fc1b 	bl	800a390 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	691a      	ldr	r2, [r3, #16]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	695a      	ldr	r2, [r3, #20]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	68da      	ldr	r2, [r3, #12]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2220      	movs	r2, #32
 8009b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2220      	movs	r2, #32
 8009b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3708      	adds	r7, #8
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b08a      	sub	sp, #40	; 0x28
 8009bae:	af02      	add	r7, sp, #8
 8009bb0:	60f8      	str	r0, [r7, #12]
 8009bb2:	60b9      	str	r1, [r7, #8]
 8009bb4:	603b      	str	r3, [r7, #0]
 8009bb6:	4613      	mov	r3, r2
 8009bb8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	2b20      	cmp	r3, #32
 8009bc8:	d17c      	bne.n	8009cc4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d002      	beq.n	8009bd6 <HAL_UART_Transmit+0x2c>
 8009bd0:	88fb      	ldrh	r3, [r7, #6]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d101      	bne.n	8009bda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e075      	b.n	8009cc6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d101      	bne.n	8009be8 <HAL_UART_Transmit+0x3e>
 8009be4:	2302      	movs	r3, #2
 8009be6:	e06e      	b.n	8009cc6 <HAL_UART_Transmit+0x11c>
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2201      	movs	r2, #1
 8009bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2221      	movs	r2, #33	; 0x21
 8009bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009bfe:	f7fd fca9 	bl	8007554 <HAL_GetTick>
 8009c02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	88fa      	ldrh	r2, [r7, #6]
 8009c08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	88fa      	ldrh	r2, [r7, #6]
 8009c0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c18:	d108      	bne.n	8009c2c <HAL_UART_Transmit+0x82>
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d104      	bne.n	8009c2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009c22:	2300      	movs	r3, #0
 8009c24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	61bb      	str	r3, [r7, #24]
 8009c2a:	e003      	b.n	8009c34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c30:	2300      	movs	r3, #0
 8009c32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2200      	movs	r2, #0
 8009c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009c3c:	e02a      	b.n	8009c94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	9300      	str	r3, [sp, #0]
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	2200      	movs	r2, #0
 8009c46:	2180      	movs	r1, #128	; 0x80
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f000 fa17 	bl	800a07c <UART_WaitOnFlagUntilTimeout>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d001      	beq.n	8009c58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009c54:	2303      	movs	r3, #3
 8009c56:	e036      	b.n	8009cc6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d10b      	bne.n	8009c76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	881b      	ldrh	r3, [r3, #0]
 8009c62:	461a      	mov	r2, r3
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	3302      	adds	r3, #2
 8009c72:	61bb      	str	r3, [r7, #24]
 8009c74:	e007      	b.n	8009c86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	781a      	ldrb	r2, [r3, #0]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009c80:	69fb      	ldr	r3, [r7, #28]
 8009c82:	3301      	adds	r3, #1
 8009c84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	3b01      	subs	r3, #1
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d1cf      	bne.n	8009c3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	9300      	str	r3, [sp, #0]
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	2140      	movs	r1, #64	; 0x40
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f000 f9e7 	bl	800a07c <UART_WaitOnFlagUntilTimeout>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d001      	beq.n	8009cb8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009cb4:	2303      	movs	r3, #3
 8009cb6:	e006      	b.n	8009cc6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2220      	movs	r2, #32
 8009cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	e000      	b.n	8009cc6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009cc4:	2302      	movs	r3, #2
  }
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3720      	adds	r7, #32
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
	...

08009cd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b08a      	sub	sp, #40	; 0x28
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	695b      	ldr	r3, [r3, #20]
 8009cee:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfa:	f003 030f 	and.w	r3, r3, #15
 8009cfe:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d10d      	bne.n	8009d22 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d08:	f003 0320 	and.w	r3, r3, #32
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d008      	beq.n	8009d22 <HAL_UART_IRQHandler+0x52>
 8009d10:	6a3b      	ldr	r3, [r7, #32]
 8009d12:	f003 0320 	and.w	r3, r3, #32
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d003      	beq.n	8009d22 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 faa1 	bl	800a262 <UART_Receive_IT>
      return;
 8009d20:	e17c      	b.n	800a01c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	f000 80b1 	beq.w	8009e8c <HAL_UART_IRQHandler+0x1bc>
 8009d2a:	69fb      	ldr	r3, [r7, #28]
 8009d2c:	f003 0301 	and.w	r3, r3, #1
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d105      	bne.n	8009d40 <HAL_UART_IRQHandler+0x70>
 8009d34:	6a3b      	ldr	r3, [r7, #32]
 8009d36:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	f000 80a6 	beq.w	8009e8c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d42:	f003 0301 	and.w	r3, r3, #1
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00a      	beq.n	8009d60 <HAL_UART_IRQHandler+0x90>
 8009d4a:	6a3b      	ldr	r3, [r7, #32]
 8009d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d005      	beq.n	8009d60 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d58:	f043 0201 	orr.w	r2, r3, #1
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d62:	f003 0304 	and.w	r3, r3, #4
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00a      	beq.n	8009d80 <HAL_UART_IRQHandler+0xb0>
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	f003 0301 	and.w	r3, r3, #1
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d005      	beq.n	8009d80 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d78:	f043 0202 	orr.w	r2, r3, #2
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d82:	f003 0302 	and.w	r3, r3, #2
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00a      	beq.n	8009da0 <HAL_UART_IRQHandler+0xd0>
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	f003 0301 	and.w	r3, r3, #1
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d005      	beq.n	8009da0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d98:	f043 0204 	orr.w	r2, r3, #4
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da2:	f003 0308 	and.w	r3, r3, #8
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00f      	beq.n	8009dca <HAL_UART_IRQHandler+0xfa>
 8009daa:	6a3b      	ldr	r3, [r7, #32]
 8009dac:	f003 0320 	and.w	r3, r3, #32
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d104      	bne.n	8009dbe <HAL_UART_IRQHandler+0xee>
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	f003 0301 	and.w	r3, r3, #1
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d005      	beq.n	8009dca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc2:	f043 0208 	orr.w	r2, r3, #8
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f000 811f 	beq.w	800a012 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd6:	f003 0320 	and.w	r3, r3, #32
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d007      	beq.n	8009dee <HAL_UART_IRQHandler+0x11e>
 8009dde:	6a3b      	ldr	r3, [r7, #32]
 8009de0:	f003 0320 	and.w	r3, r3, #32
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d002      	beq.n	8009dee <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 fa3a 	bl	800a262 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	695b      	ldr	r3, [r3, #20]
 8009df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009df8:	2b40      	cmp	r3, #64	; 0x40
 8009dfa:	bf0c      	ite	eq
 8009dfc:	2301      	moveq	r3, #1
 8009dfe:	2300      	movne	r3, #0
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e08:	f003 0308 	and.w	r3, r3, #8
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d102      	bne.n	8009e16 <HAL_UART_IRQHandler+0x146>
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d031      	beq.n	8009e7a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 f97a 	bl	800a110 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	695b      	ldr	r3, [r3, #20]
 8009e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e26:	2b40      	cmp	r3, #64	; 0x40
 8009e28:	d123      	bne.n	8009e72 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	695a      	ldr	r2, [r3, #20]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e38:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d013      	beq.n	8009e6a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e46:	4a77      	ldr	r2, [pc, #476]	; (800a024 <HAL_UART_IRQHandler+0x354>)
 8009e48:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7fd fd31 	bl	80078b6 <HAL_DMA_Abort_IT>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d016      	beq.n	8009e88 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009e64:	4610      	mov	r0, r2
 8009e66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e68:	e00e      	b.n	8009e88 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 f8f0 	bl	800a050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e70:	e00a      	b.n	8009e88 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 f8ec 	bl	800a050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e78:	e006      	b.n	8009e88 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 f8e8 	bl	800a050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009e86:	e0c4      	b.n	800a012 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e88:	bf00      	nop
    return;
 8009e8a:	e0c2      	b.n	800a012 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	f040 80a2 	bne.w	8009fda <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8009e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e98:	f003 0310 	and.w	r3, r3, #16
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f000 809c 	beq.w	8009fda <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8009ea2:	6a3b      	ldr	r3, [r7, #32]
 8009ea4:	f003 0310 	and.w	r3, r3, #16
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f000 8096 	beq.w	8009fda <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009eae:	2300      	movs	r3, #0
 8009eb0:	60fb      	str	r3, [r7, #12]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	60fb      	str	r3, [r7, #12]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	60fb      	str	r3, [r7, #12]
 8009ec2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	695b      	ldr	r3, [r3, #20]
 8009eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ece:	2b40      	cmp	r3, #64	; 0x40
 8009ed0:	d14f      	bne.n	8009f72 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8009edc:	8a3b      	ldrh	r3, [r7, #16]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	f000 8099 	beq.w	800a016 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009ee8:	8a3a      	ldrh	r2, [r7, #16]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	f080 8093 	bcs.w	800a016 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	8a3a      	ldrh	r2, [r7, #16]
 8009ef4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009efa:	69db      	ldr	r3, [r3, #28]
 8009efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f00:	d02b      	beq.n	8009f5a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	68da      	ldr	r2, [r3, #12]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f10:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	695a      	ldr	r2, [r3, #20]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f022 0201 	bic.w	r2, r2, #1
 8009f20:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	695a      	ldr	r2, [r3, #20]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f30:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2220      	movs	r2, #32
 8009f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	68da      	ldr	r2, [r3, #12]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f022 0210 	bic.w	r2, r2, #16
 8009f4e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7fd fc3e 	bl	80077d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	1ad3      	subs	r3, r2, r3
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	4619      	mov	r1, r3
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 f87a 	bl	800a064 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009f70:	e051      	b.n	800a016 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	1ad3      	subs	r3, r2, r3
 8009f7e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d047      	beq.n	800a01a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8009f8a:	8a7b      	ldrh	r3, [r7, #18]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d044      	beq.n	800a01a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	68da      	ldr	r2, [r3, #12]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009f9e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	695a      	ldr	r2, [r3, #20]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f022 0201 	bic.w	r2, r2, #1
 8009fae:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2220      	movs	r2, #32
 8009fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	68da      	ldr	r2, [r3, #12]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f022 0210 	bic.w	r2, r2, #16
 8009fcc:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009fce:	8a7b      	ldrh	r3, [r7, #18]
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 f846 	bl	800a064 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009fd8:	e01f      	b.n	800a01a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d008      	beq.n	8009ff6 <HAL_UART_IRQHandler+0x326>
 8009fe4:	6a3b      	ldr	r3, [r7, #32]
 8009fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d003      	beq.n	8009ff6 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 f8cf 	bl	800a192 <UART_Transmit_IT>
    return;
 8009ff4:	e012      	b.n	800a01c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d00d      	beq.n	800a01c <HAL_UART_IRQHandler+0x34c>
 800a000:	6a3b      	ldr	r3, [r7, #32]
 800a002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a006:	2b00      	cmp	r3, #0
 800a008:	d008      	beq.n	800a01c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 f911 	bl	800a232 <UART_EndTransmit_IT>
    return;
 800a010:	e004      	b.n	800a01c <HAL_UART_IRQHandler+0x34c>
    return;
 800a012:	bf00      	nop
 800a014:	e002      	b.n	800a01c <HAL_UART_IRQHandler+0x34c>
      return;
 800a016:	bf00      	nop
 800a018:	e000      	b.n	800a01c <HAL_UART_IRQHandler+0x34c>
      return;
 800a01a:	bf00      	nop
  }
}
 800a01c:	3728      	adds	r7, #40	; 0x28
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	0800a16b 	.word	0x0800a16b

0800a028 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a030:	bf00      	nop
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a044:	bf00      	nop
 800a046:	370c      	adds	r7, #12
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr

0800a050 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a058:	bf00      	nop
 800a05a:	370c      	adds	r7, #12
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	460b      	mov	r3, r1
 800a06e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a070:	bf00      	nop
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	603b      	str	r3, [r7, #0]
 800a088:	4613      	mov	r3, r2
 800a08a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a08c:	e02c      	b.n	800a0e8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a08e:	69bb      	ldr	r3, [r7, #24]
 800a090:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a094:	d028      	beq.n	800a0e8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d007      	beq.n	800a0ac <UART_WaitOnFlagUntilTimeout+0x30>
 800a09c:	f7fd fa5a 	bl	8007554 <HAL_GetTick>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	1ad3      	subs	r3, r2, r3
 800a0a6:	69ba      	ldr	r2, [r7, #24]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d21d      	bcs.n	800a0e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	68da      	ldr	r2, [r3, #12]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a0ba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	695a      	ldr	r2, [r3, #20]
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f022 0201 	bic.w	r2, r2, #1
 800a0ca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2220      	movs	r2, #32
 800a0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2220      	movs	r2, #32
 800a0d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a0e4:	2303      	movs	r3, #3
 800a0e6:	e00f      	b.n	800a108 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	4013      	ands	r3, r2
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	bf0c      	ite	eq
 800a0f8:	2301      	moveq	r3, #1
 800a0fa:	2300      	movne	r3, #0
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	461a      	mov	r2, r3
 800a100:	79fb      	ldrb	r3, [r7, #7]
 800a102:	429a      	cmp	r2, r3
 800a104:	d0c3      	beq.n	800a08e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a106:	2300      	movs	r3, #0
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3710      	adds	r7, #16
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	68da      	ldr	r2, [r3, #12]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a126:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	695a      	ldr	r2, [r3, #20]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f022 0201 	bic.w	r2, r2, #1
 800a136:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d107      	bne.n	800a150 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	68da      	ldr	r2, [r3, #12]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f022 0210 	bic.w	r2, r2, #16
 800a14e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2220      	movs	r2, #32
 800a154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a15e:	bf00      	nop
 800a160:	370c      	adds	r7, #12
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr

0800a16a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b084      	sub	sp, #16
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a176:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2200      	movs	r2, #0
 800a17c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2200      	movs	r2, #0
 800a182:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a184:	68f8      	ldr	r0, [r7, #12]
 800a186:	f7ff ff63 	bl	800a050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a18a:	bf00      	nop
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a192:	b480      	push	{r7}
 800a194:	b085      	sub	sp, #20
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	2b21      	cmp	r3, #33	; 0x21
 800a1a4:	d13e      	bne.n	800a224 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1ae:	d114      	bne.n	800a1da <UART_Transmit_IT+0x48>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	691b      	ldr	r3, [r3, #16]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d110      	bne.n	800a1da <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6a1b      	ldr	r3, [r3, #32]
 800a1bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	881b      	ldrh	r3, [r3, #0]
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a1cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6a1b      	ldr	r3, [r3, #32]
 800a1d2:	1c9a      	adds	r2, r3, #2
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	621a      	str	r2, [r3, #32]
 800a1d8:	e008      	b.n	800a1ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a1b      	ldr	r3, [r3, #32]
 800a1de:	1c59      	adds	r1, r3, #1
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	6211      	str	r1, [r2, #32]
 800a1e4:	781a      	ldrb	r2, [r3, #0]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10f      	bne.n	800a220 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	68da      	ldr	r2, [r3, #12]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a20e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	68da      	ldr	r2, [r3, #12]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a21e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a220:	2300      	movs	r3, #0
 800a222:	e000      	b.n	800a226 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a224:	2302      	movs	r3, #2
  }
}
 800a226:	4618      	mov	r0, r3
 800a228:	3714      	adds	r7, #20
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr

0800a232 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b082      	sub	sp, #8
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	68da      	ldr	r2, [r3, #12]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a248:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2220      	movs	r2, #32
 800a24e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f7ff fee8 	bl	800a028 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a258:	2300      	movs	r3, #0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3708      	adds	r7, #8
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}

0800a262 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a262:	b580      	push	{r7, lr}
 800a264:	b084      	sub	sp, #16
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a270:	b2db      	uxtb	r3, r3
 800a272:	2b22      	cmp	r3, #34	; 0x22
 800a274:	f040 8087 	bne.w	800a386 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a280:	d117      	bne.n	800a2b2 <UART_Receive_IT+0x50>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	691b      	ldr	r3, [r3, #16]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d113      	bne.n	800a2b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a28a:	2300      	movs	r3, #0
 800a28c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a292:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2aa:	1c9a      	adds	r2, r3, #2
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	629a      	str	r2, [r3, #40]	; 0x28
 800a2b0:	e026      	b.n	800a300 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2c4:	d007      	beq.n	800a2d6 <UART_Receive_IT+0x74>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d10a      	bne.n	800a2e4 <UART_Receive_IT+0x82>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	691b      	ldr	r3, [r3, #16]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d106      	bne.n	800a2e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	b2da      	uxtb	r2, r3
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	701a      	strb	r2, [r3, #0]
 800a2e2:	e008      	b.n	800a2f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2f0:	b2da      	uxtb	r2, r3
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2fa:	1c5a      	adds	r2, r3, #1
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a304:	b29b      	uxth	r3, r3
 800a306:	3b01      	subs	r3, #1
 800a308:	b29b      	uxth	r3, r3
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	4619      	mov	r1, r3
 800a30e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a310:	2b00      	cmp	r3, #0
 800a312:	d136      	bne.n	800a382 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	68da      	ldr	r2, [r3, #12]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f022 0220 	bic.w	r2, r2, #32
 800a322:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	68da      	ldr	r2, [r3, #12]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a332:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	695a      	ldr	r2, [r3, #20]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f022 0201 	bic.w	r2, r2, #1
 800a342:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2220      	movs	r2, #32
 800a348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a350:	2b01      	cmp	r3, #1
 800a352:	d10e      	bne.n	800a372 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	68da      	ldr	r2, [r3, #12]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f022 0210 	bic.w	r2, r2, #16
 800a362:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a368:	4619      	mov	r1, r3
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f7ff fe7a 	bl	800a064 <HAL_UARTEx_RxEventCallback>
 800a370:	e002      	b.n	800a378 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f7ff fe62 	bl	800a03c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800a37e:	2300      	movs	r3, #0
 800a380:	e002      	b.n	800a388 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800a382:	2300      	movs	r3, #0
 800a384:	e000      	b.n	800a388 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800a386:	2302      	movs	r3, #2
  }
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3710      	adds	r7, #16
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a394:	b09f      	sub	sp, #124	; 0x7c
 800a396:	af00      	add	r7, sp, #0
 800a398:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a39a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	691b      	ldr	r3, [r3, #16]
 800a3a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a3a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3a6:	68d9      	ldr	r1, [r3, #12]
 800a3a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	ea40 0301 	orr.w	r3, r0, r1
 800a3b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a3b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3b4:	689a      	ldr	r2, [r3, #8]
 800a3b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	431a      	orrs	r2, r3
 800a3bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3be:	695b      	ldr	r3, [r3, #20]
 800a3c0:	431a      	orrs	r2, r3
 800a3c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3c4:	69db      	ldr	r3, [r3, #28]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a3ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a3d4:	f021 010c 	bic.w	r1, r1, #12
 800a3d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a3de:	430b      	orrs	r3, r1
 800a3e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a3e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	695b      	ldr	r3, [r3, #20]
 800a3e8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a3ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3ee:	6999      	ldr	r1, [r3, #24]
 800a3f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	ea40 0301 	orr.w	r3, r0, r1
 800a3f8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a3fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	4bc5      	ldr	r3, [pc, #788]	; (800a714 <UART_SetConfig+0x384>)
 800a400:	429a      	cmp	r2, r3
 800a402:	d004      	beq.n	800a40e <UART_SetConfig+0x7e>
 800a404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	4bc3      	ldr	r3, [pc, #780]	; (800a718 <UART_SetConfig+0x388>)
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d103      	bne.n	800a416 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a40e:	f7ff f84b 	bl	80094a8 <HAL_RCC_GetPCLK2Freq>
 800a412:	6778      	str	r0, [r7, #116]	; 0x74
 800a414:	e002      	b.n	800a41c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a416:	f7ff f833 	bl	8009480 <HAL_RCC_GetPCLK1Freq>
 800a41a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a41c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a41e:	69db      	ldr	r3, [r3, #28]
 800a420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a424:	f040 80b6 	bne.w	800a594 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a428:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a42a:	461c      	mov	r4, r3
 800a42c:	f04f 0500 	mov.w	r5, #0
 800a430:	4622      	mov	r2, r4
 800a432:	462b      	mov	r3, r5
 800a434:	1891      	adds	r1, r2, r2
 800a436:	6439      	str	r1, [r7, #64]	; 0x40
 800a438:	415b      	adcs	r3, r3
 800a43a:	647b      	str	r3, [r7, #68]	; 0x44
 800a43c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a440:	1912      	adds	r2, r2, r4
 800a442:	eb45 0303 	adc.w	r3, r5, r3
 800a446:	f04f 0000 	mov.w	r0, #0
 800a44a:	f04f 0100 	mov.w	r1, #0
 800a44e:	00d9      	lsls	r1, r3, #3
 800a450:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a454:	00d0      	lsls	r0, r2, #3
 800a456:	4602      	mov	r2, r0
 800a458:	460b      	mov	r3, r1
 800a45a:	1911      	adds	r1, r2, r4
 800a45c:	6639      	str	r1, [r7, #96]	; 0x60
 800a45e:	416b      	adcs	r3, r5
 800a460:	667b      	str	r3, [r7, #100]	; 0x64
 800a462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	461a      	mov	r2, r3
 800a468:	f04f 0300 	mov.w	r3, #0
 800a46c:	1891      	adds	r1, r2, r2
 800a46e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a470:	415b      	adcs	r3, r3
 800a472:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a474:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a478:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a47c:	f7f6 fc04 	bl	8000c88 <__aeabi_uldivmod>
 800a480:	4602      	mov	r2, r0
 800a482:	460b      	mov	r3, r1
 800a484:	4ba5      	ldr	r3, [pc, #660]	; (800a71c <UART_SetConfig+0x38c>)
 800a486:	fba3 2302 	umull	r2, r3, r3, r2
 800a48a:	095b      	lsrs	r3, r3, #5
 800a48c:	011e      	lsls	r6, r3, #4
 800a48e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a490:	461c      	mov	r4, r3
 800a492:	f04f 0500 	mov.w	r5, #0
 800a496:	4622      	mov	r2, r4
 800a498:	462b      	mov	r3, r5
 800a49a:	1891      	adds	r1, r2, r2
 800a49c:	6339      	str	r1, [r7, #48]	; 0x30
 800a49e:	415b      	adcs	r3, r3
 800a4a0:	637b      	str	r3, [r7, #52]	; 0x34
 800a4a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a4a6:	1912      	adds	r2, r2, r4
 800a4a8:	eb45 0303 	adc.w	r3, r5, r3
 800a4ac:	f04f 0000 	mov.w	r0, #0
 800a4b0:	f04f 0100 	mov.w	r1, #0
 800a4b4:	00d9      	lsls	r1, r3, #3
 800a4b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a4ba:	00d0      	lsls	r0, r2, #3
 800a4bc:	4602      	mov	r2, r0
 800a4be:	460b      	mov	r3, r1
 800a4c0:	1911      	adds	r1, r2, r4
 800a4c2:	65b9      	str	r1, [r7, #88]	; 0x58
 800a4c4:	416b      	adcs	r3, r5
 800a4c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a4c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	f04f 0300 	mov.w	r3, #0
 800a4d2:	1891      	adds	r1, r2, r2
 800a4d4:	62b9      	str	r1, [r7, #40]	; 0x28
 800a4d6:	415b      	adcs	r3, r3
 800a4d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a4de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a4e2:	f7f6 fbd1 	bl	8000c88 <__aeabi_uldivmod>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	4b8c      	ldr	r3, [pc, #560]	; (800a71c <UART_SetConfig+0x38c>)
 800a4ec:	fba3 1302 	umull	r1, r3, r3, r2
 800a4f0:	095b      	lsrs	r3, r3, #5
 800a4f2:	2164      	movs	r1, #100	; 0x64
 800a4f4:	fb01 f303 	mul.w	r3, r1, r3
 800a4f8:	1ad3      	subs	r3, r2, r3
 800a4fa:	00db      	lsls	r3, r3, #3
 800a4fc:	3332      	adds	r3, #50	; 0x32
 800a4fe:	4a87      	ldr	r2, [pc, #540]	; (800a71c <UART_SetConfig+0x38c>)
 800a500:	fba2 2303 	umull	r2, r3, r2, r3
 800a504:	095b      	lsrs	r3, r3, #5
 800a506:	005b      	lsls	r3, r3, #1
 800a508:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a50c:	441e      	add	r6, r3
 800a50e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a510:	4618      	mov	r0, r3
 800a512:	f04f 0100 	mov.w	r1, #0
 800a516:	4602      	mov	r2, r0
 800a518:	460b      	mov	r3, r1
 800a51a:	1894      	adds	r4, r2, r2
 800a51c:	623c      	str	r4, [r7, #32]
 800a51e:	415b      	adcs	r3, r3
 800a520:	627b      	str	r3, [r7, #36]	; 0x24
 800a522:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a526:	1812      	adds	r2, r2, r0
 800a528:	eb41 0303 	adc.w	r3, r1, r3
 800a52c:	f04f 0400 	mov.w	r4, #0
 800a530:	f04f 0500 	mov.w	r5, #0
 800a534:	00dd      	lsls	r5, r3, #3
 800a536:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a53a:	00d4      	lsls	r4, r2, #3
 800a53c:	4622      	mov	r2, r4
 800a53e:	462b      	mov	r3, r5
 800a540:	1814      	adds	r4, r2, r0
 800a542:	653c      	str	r4, [r7, #80]	; 0x50
 800a544:	414b      	adcs	r3, r1
 800a546:	657b      	str	r3, [r7, #84]	; 0x54
 800a548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	461a      	mov	r2, r3
 800a54e:	f04f 0300 	mov.w	r3, #0
 800a552:	1891      	adds	r1, r2, r2
 800a554:	61b9      	str	r1, [r7, #24]
 800a556:	415b      	adcs	r3, r3
 800a558:	61fb      	str	r3, [r7, #28]
 800a55a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a55e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a562:	f7f6 fb91 	bl	8000c88 <__aeabi_uldivmod>
 800a566:	4602      	mov	r2, r0
 800a568:	460b      	mov	r3, r1
 800a56a:	4b6c      	ldr	r3, [pc, #432]	; (800a71c <UART_SetConfig+0x38c>)
 800a56c:	fba3 1302 	umull	r1, r3, r3, r2
 800a570:	095b      	lsrs	r3, r3, #5
 800a572:	2164      	movs	r1, #100	; 0x64
 800a574:	fb01 f303 	mul.w	r3, r1, r3
 800a578:	1ad3      	subs	r3, r2, r3
 800a57a:	00db      	lsls	r3, r3, #3
 800a57c:	3332      	adds	r3, #50	; 0x32
 800a57e:	4a67      	ldr	r2, [pc, #412]	; (800a71c <UART_SetConfig+0x38c>)
 800a580:	fba2 2303 	umull	r2, r3, r2, r3
 800a584:	095b      	lsrs	r3, r3, #5
 800a586:	f003 0207 	and.w	r2, r3, #7
 800a58a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4432      	add	r2, r6
 800a590:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a592:	e0b9      	b.n	800a708 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a594:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a596:	461c      	mov	r4, r3
 800a598:	f04f 0500 	mov.w	r5, #0
 800a59c:	4622      	mov	r2, r4
 800a59e:	462b      	mov	r3, r5
 800a5a0:	1891      	adds	r1, r2, r2
 800a5a2:	6139      	str	r1, [r7, #16]
 800a5a4:	415b      	adcs	r3, r3
 800a5a6:	617b      	str	r3, [r7, #20]
 800a5a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a5ac:	1912      	adds	r2, r2, r4
 800a5ae:	eb45 0303 	adc.w	r3, r5, r3
 800a5b2:	f04f 0000 	mov.w	r0, #0
 800a5b6:	f04f 0100 	mov.w	r1, #0
 800a5ba:	00d9      	lsls	r1, r3, #3
 800a5bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a5c0:	00d0      	lsls	r0, r2, #3
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	eb12 0804 	adds.w	r8, r2, r4
 800a5ca:	eb43 0905 	adc.w	r9, r3, r5
 800a5ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f04f 0100 	mov.w	r1, #0
 800a5d8:	f04f 0200 	mov.w	r2, #0
 800a5dc:	f04f 0300 	mov.w	r3, #0
 800a5e0:	008b      	lsls	r3, r1, #2
 800a5e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a5e6:	0082      	lsls	r2, r0, #2
 800a5e8:	4640      	mov	r0, r8
 800a5ea:	4649      	mov	r1, r9
 800a5ec:	f7f6 fb4c 	bl	8000c88 <__aeabi_uldivmod>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	4b49      	ldr	r3, [pc, #292]	; (800a71c <UART_SetConfig+0x38c>)
 800a5f6:	fba3 2302 	umull	r2, r3, r3, r2
 800a5fa:	095b      	lsrs	r3, r3, #5
 800a5fc:	011e      	lsls	r6, r3, #4
 800a5fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a600:	4618      	mov	r0, r3
 800a602:	f04f 0100 	mov.w	r1, #0
 800a606:	4602      	mov	r2, r0
 800a608:	460b      	mov	r3, r1
 800a60a:	1894      	adds	r4, r2, r2
 800a60c:	60bc      	str	r4, [r7, #8]
 800a60e:	415b      	adcs	r3, r3
 800a610:	60fb      	str	r3, [r7, #12]
 800a612:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a616:	1812      	adds	r2, r2, r0
 800a618:	eb41 0303 	adc.w	r3, r1, r3
 800a61c:	f04f 0400 	mov.w	r4, #0
 800a620:	f04f 0500 	mov.w	r5, #0
 800a624:	00dd      	lsls	r5, r3, #3
 800a626:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a62a:	00d4      	lsls	r4, r2, #3
 800a62c:	4622      	mov	r2, r4
 800a62e:	462b      	mov	r3, r5
 800a630:	1814      	adds	r4, r2, r0
 800a632:	64bc      	str	r4, [r7, #72]	; 0x48
 800a634:	414b      	adcs	r3, r1
 800a636:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	4618      	mov	r0, r3
 800a63e:	f04f 0100 	mov.w	r1, #0
 800a642:	f04f 0200 	mov.w	r2, #0
 800a646:	f04f 0300 	mov.w	r3, #0
 800a64a:	008b      	lsls	r3, r1, #2
 800a64c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a650:	0082      	lsls	r2, r0, #2
 800a652:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a656:	f7f6 fb17 	bl	8000c88 <__aeabi_uldivmod>
 800a65a:	4602      	mov	r2, r0
 800a65c:	460b      	mov	r3, r1
 800a65e:	4b2f      	ldr	r3, [pc, #188]	; (800a71c <UART_SetConfig+0x38c>)
 800a660:	fba3 1302 	umull	r1, r3, r3, r2
 800a664:	095b      	lsrs	r3, r3, #5
 800a666:	2164      	movs	r1, #100	; 0x64
 800a668:	fb01 f303 	mul.w	r3, r1, r3
 800a66c:	1ad3      	subs	r3, r2, r3
 800a66e:	011b      	lsls	r3, r3, #4
 800a670:	3332      	adds	r3, #50	; 0x32
 800a672:	4a2a      	ldr	r2, [pc, #168]	; (800a71c <UART_SetConfig+0x38c>)
 800a674:	fba2 2303 	umull	r2, r3, r2, r3
 800a678:	095b      	lsrs	r3, r3, #5
 800a67a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a67e:	441e      	add	r6, r3
 800a680:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a682:	4618      	mov	r0, r3
 800a684:	f04f 0100 	mov.w	r1, #0
 800a688:	4602      	mov	r2, r0
 800a68a:	460b      	mov	r3, r1
 800a68c:	1894      	adds	r4, r2, r2
 800a68e:	603c      	str	r4, [r7, #0]
 800a690:	415b      	adcs	r3, r3
 800a692:	607b      	str	r3, [r7, #4]
 800a694:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a698:	1812      	adds	r2, r2, r0
 800a69a:	eb41 0303 	adc.w	r3, r1, r3
 800a69e:	f04f 0400 	mov.w	r4, #0
 800a6a2:	f04f 0500 	mov.w	r5, #0
 800a6a6:	00dd      	lsls	r5, r3, #3
 800a6a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a6ac:	00d4      	lsls	r4, r2, #3
 800a6ae:	4622      	mov	r2, r4
 800a6b0:	462b      	mov	r3, r5
 800a6b2:	eb12 0a00 	adds.w	sl, r2, r0
 800a6b6:	eb43 0b01 	adc.w	fp, r3, r1
 800a6ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f04f 0100 	mov.w	r1, #0
 800a6c4:	f04f 0200 	mov.w	r2, #0
 800a6c8:	f04f 0300 	mov.w	r3, #0
 800a6cc:	008b      	lsls	r3, r1, #2
 800a6ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a6d2:	0082      	lsls	r2, r0, #2
 800a6d4:	4650      	mov	r0, sl
 800a6d6:	4659      	mov	r1, fp
 800a6d8:	f7f6 fad6 	bl	8000c88 <__aeabi_uldivmod>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	460b      	mov	r3, r1
 800a6e0:	4b0e      	ldr	r3, [pc, #56]	; (800a71c <UART_SetConfig+0x38c>)
 800a6e2:	fba3 1302 	umull	r1, r3, r3, r2
 800a6e6:	095b      	lsrs	r3, r3, #5
 800a6e8:	2164      	movs	r1, #100	; 0x64
 800a6ea:	fb01 f303 	mul.w	r3, r1, r3
 800a6ee:	1ad3      	subs	r3, r2, r3
 800a6f0:	011b      	lsls	r3, r3, #4
 800a6f2:	3332      	adds	r3, #50	; 0x32
 800a6f4:	4a09      	ldr	r2, [pc, #36]	; (800a71c <UART_SetConfig+0x38c>)
 800a6f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a6fa:	095b      	lsrs	r3, r3, #5
 800a6fc:	f003 020f 	and.w	r2, r3, #15
 800a700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4432      	add	r2, r6
 800a706:	609a      	str	r2, [r3, #8]
}
 800a708:	bf00      	nop
 800a70a:	377c      	adds	r7, #124	; 0x7c
 800a70c:	46bd      	mov	sp, r7
 800a70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a712:	bf00      	nop
 800a714:	40011000 	.word	0x40011000
 800a718:	40011400 	.word	0x40011400
 800a71c:	51eb851f 	.word	0x51eb851f

0800a720 <__errno>:
 800a720:	4b01      	ldr	r3, [pc, #4]	; (800a728 <__errno+0x8>)
 800a722:	6818      	ldr	r0, [r3, #0]
 800a724:	4770      	bx	lr
 800a726:	bf00      	nop
 800a728:	20000034 	.word	0x20000034

0800a72c <__libc_init_array>:
 800a72c:	b570      	push	{r4, r5, r6, lr}
 800a72e:	4d0d      	ldr	r5, [pc, #52]	; (800a764 <__libc_init_array+0x38>)
 800a730:	4c0d      	ldr	r4, [pc, #52]	; (800a768 <__libc_init_array+0x3c>)
 800a732:	1b64      	subs	r4, r4, r5
 800a734:	10a4      	asrs	r4, r4, #2
 800a736:	2600      	movs	r6, #0
 800a738:	42a6      	cmp	r6, r4
 800a73a:	d109      	bne.n	800a750 <__libc_init_array+0x24>
 800a73c:	4d0b      	ldr	r5, [pc, #44]	; (800a76c <__libc_init_array+0x40>)
 800a73e:	4c0c      	ldr	r4, [pc, #48]	; (800a770 <__libc_init_array+0x44>)
 800a740:	f004 fcd4 	bl	800f0ec <_init>
 800a744:	1b64      	subs	r4, r4, r5
 800a746:	10a4      	asrs	r4, r4, #2
 800a748:	2600      	movs	r6, #0
 800a74a:	42a6      	cmp	r6, r4
 800a74c:	d105      	bne.n	800a75a <__libc_init_array+0x2e>
 800a74e:	bd70      	pop	{r4, r5, r6, pc}
 800a750:	f855 3b04 	ldr.w	r3, [r5], #4
 800a754:	4798      	blx	r3
 800a756:	3601      	adds	r6, #1
 800a758:	e7ee      	b.n	800a738 <__libc_init_array+0xc>
 800a75a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a75e:	4798      	blx	r3
 800a760:	3601      	adds	r6, #1
 800a762:	e7f2      	b.n	800a74a <__libc_init_array+0x1e>
 800a764:	0800f694 	.word	0x0800f694
 800a768:	0800f694 	.word	0x0800f694
 800a76c:	0800f694 	.word	0x0800f694
 800a770:	0800f698 	.word	0x0800f698

0800a774 <memcpy>:
 800a774:	440a      	add	r2, r1
 800a776:	4291      	cmp	r1, r2
 800a778:	f100 33ff 	add.w	r3, r0, #4294967295
 800a77c:	d100      	bne.n	800a780 <memcpy+0xc>
 800a77e:	4770      	bx	lr
 800a780:	b510      	push	{r4, lr}
 800a782:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a786:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a78a:	4291      	cmp	r1, r2
 800a78c:	d1f9      	bne.n	800a782 <memcpy+0xe>
 800a78e:	bd10      	pop	{r4, pc}

0800a790 <memset>:
 800a790:	4402      	add	r2, r0
 800a792:	4603      	mov	r3, r0
 800a794:	4293      	cmp	r3, r2
 800a796:	d100      	bne.n	800a79a <memset+0xa>
 800a798:	4770      	bx	lr
 800a79a:	f803 1b01 	strb.w	r1, [r3], #1
 800a79e:	e7f9      	b.n	800a794 <memset+0x4>

0800a7a0 <__cvt>:
 800a7a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7a4:	ec55 4b10 	vmov	r4, r5, d0
 800a7a8:	2d00      	cmp	r5, #0
 800a7aa:	460e      	mov	r6, r1
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	462b      	mov	r3, r5
 800a7b0:	bfbb      	ittet	lt
 800a7b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a7b6:	461d      	movlt	r5, r3
 800a7b8:	2300      	movge	r3, #0
 800a7ba:	232d      	movlt	r3, #45	; 0x2d
 800a7bc:	700b      	strb	r3, [r1, #0]
 800a7be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a7c4:	4691      	mov	r9, r2
 800a7c6:	f023 0820 	bic.w	r8, r3, #32
 800a7ca:	bfbc      	itt	lt
 800a7cc:	4622      	movlt	r2, r4
 800a7ce:	4614      	movlt	r4, r2
 800a7d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a7d4:	d005      	beq.n	800a7e2 <__cvt+0x42>
 800a7d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a7da:	d100      	bne.n	800a7de <__cvt+0x3e>
 800a7dc:	3601      	adds	r6, #1
 800a7de:	2102      	movs	r1, #2
 800a7e0:	e000      	b.n	800a7e4 <__cvt+0x44>
 800a7e2:	2103      	movs	r1, #3
 800a7e4:	ab03      	add	r3, sp, #12
 800a7e6:	9301      	str	r3, [sp, #4]
 800a7e8:	ab02      	add	r3, sp, #8
 800a7ea:	9300      	str	r3, [sp, #0]
 800a7ec:	ec45 4b10 	vmov	d0, r4, r5
 800a7f0:	4653      	mov	r3, sl
 800a7f2:	4632      	mov	r2, r6
 800a7f4:	f001 ff04 	bl	800c600 <_dtoa_r>
 800a7f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a7fc:	4607      	mov	r7, r0
 800a7fe:	d102      	bne.n	800a806 <__cvt+0x66>
 800a800:	f019 0f01 	tst.w	r9, #1
 800a804:	d022      	beq.n	800a84c <__cvt+0xac>
 800a806:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a80a:	eb07 0906 	add.w	r9, r7, r6
 800a80e:	d110      	bne.n	800a832 <__cvt+0x92>
 800a810:	783b      	ldrb	r3, [r7, #0]
 800a812:	2b30      	cmp	r3, #48	; 0x30
 800a814:	d10a      	bne.n	800a82c <__cvt+0x8c>
 800a816:	2200      	movs	r2, #0
 800a818:	2300      	movs	r3, #0
 800a81a:	4620      	mov	r0, r4
 800a81c:	4629      	mov	r1, r5
 800a81e:	f7f6 f953 	bl	8000ac8 <__aeabi_dcmpeq>
 800a822:	b918      	cbnz	r0, 800a82c <__cvt+0x8c>
 800a824:	f1c6 0601 	rsb	r6, r6, #1
 800a828:	f8ca 6000 	str.w	r6, [sl]
 800a82c:	f8da 3000 	ldr.w	r3, [sl]
 800a830:	4499      	add	r9, r3
 800a832:	2200      	movs	r2, #0
 800a834:	2300      	movs	r3, #0
 800a836:	4620      	mov	r0, r4
 800a838:	4629      	mov	r1, r5
 800a83a:	f7f6 f945 	bl	8000ac8 <__aeabi_dcmpeq>
 800a83e:	b108      	cbz	r0, 800a844 <__cvt+0xa4>
 800a840:	f8cd 900c 	str.w	r9, [sp, #12]
 800a844:	2230      	movs	r2, #48	; 0x30
 800a846:	9b03      	ldr	r3, [sp, #12]
 800a848:	454b      	cmp	r3, r9
 800a84a:	d307      	bcc.n	800a85c <__cvt+0xbc>
 800a84c:	9b03      	ldr	r3, [sp, #12]
 800a84e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a850:	1bdb      	subs	r3, r3, r7
 800a852:	4638      	mov	r0, r7
 800a854:	6013      	str	r3, [r2, #0]
 800a856:	b004      	add	sp, #16
 800a858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a85c:	1c59      	adds	r1, r3, #1
 800a85e:	9103      	str	r1, [sp, #12]
 800a860:	701a      	strb	r2, [r3, #0]
 800a862:	e7f0      	b.n	800a846 <__cvt+0xa6>

0800a864 <__exponent>:
 800a864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a866:	4603      	mov	r3, r0
 800a868:	2900      	cmp	r1, #0
 800a86a:	bfb8      	it	lt
 800a86c:	4249      	neglt	r1, r1
 800a86e:	f803 2b02 	strb.w	r2, [r3], #2
 800a872:	bfb4      	ite	lt
 800a874:	222d      	movlt	r2, #45	; 0x2d
 800a876:	222b      	movge	r2, #43	; 0x2b
 800a878:	2909      	cmp	r1, #9
 800a87a:	7042      	strb	r2, [r0, #1]
 800a87c:	dd2a      	ble.n	800a8d4 <__exponent+0x70>
 800a87e:	f10d 0407 	add.w	r4, sp, #7
 800a882:	46a4      	mov	ip, r4
 800a884:	270a      	movs	r7, #10
 800a886:	46a6      	mov	lr, r4
 800a888:	460a      	mov	r2, r1
 800a88a:	fb91 f6f7 	sdiv	r6, r1, r7
 800a88e:	fb07 1516 	mls	r5, r7, r6, r1
 800a892:	3530      	adds	r5, #48	; 0x30
 800a894:	2a63      	cmp	r2, #99	; 0x63
 800a896:	f104 34ff 	add.w	r4, r4, #4294967295
 800a89a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a89e:	4631      	mov	r1, r6
 800a8a0:	dcf1      	bgt.n	800a886 <__exponent+0x22>
 800a8a2:	3130      	adds	r1, #48	; 0x30
 800a8a4:	f1ae 0502 	sub.w	r5, lr, #2
 800a8a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a8ac:	1c44      	adds	r4, r0, #1
 800a8ae:	4629      	mov	r1, r5
 800a8b0:	4561      	cmp	r1, ip
 800a8b2:	d30a      	bcc.n	800a8ca <__exponent+0x66>
 800a8b4:	f10d 0209 	add.w	r2, sp, #9
 800a8b8:	eba2 020e 	sub.w	r2, r2, lr
 800a8bc:	4565      	cmp	r5, ip
 800a8be:	bf88      	it	hi
 800a8c0:	2200      	movhi	r2, #0
 800a8c2:	4413      	add	r3, r2
 800a8c4:	1a18      	subs	r0, r3, r0
 800a8c6:	b003      	add	sp, #12
 800a8c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a8d2:	e7ed      	b.n	800a8b0 <__exponent+0x4c>
 800a8d4:	2330      	movs	r3, #48	; 0x30
 800a8d6:	3130      	adds	r1, #48	; 0x30
 800a8d8:	7083      	strb	r3, [r0, #2]
 800a8da:	70c1      	strb	r1, [r0, #3]
 800a8dc:	1d03      	adds	r3, r0, #4
 800a8de:	e7f1      	b.n	800a8c4 <__exponent+0x60>

0800a8e0 <_printf_float>:
 800a8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e4:	ed2d 8b02 	vpush	{d8}
 800a8e8:	b08d      	sub	sp, #52	; 0x34
 800a8ea:	460c      	mov	r4, r1
 800a8ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a8f0:	4616      	mov	r6, r2
 800a8f2:	461f      	mov	r7, r3
 800a8f4:	4605      	mov	r5, r0
 800a8f6:	f003 f995 	bl	800dc24 <_localeconv_r>
 800a8fa:	f8d0 a000 	ldr.w	sl, [r0]
 800a8fe:	4650      	mov	r0, sl
 800a900:	f7f5 fc66 	bl	80001d0 <strlen>
 800a904:	2300      	movs	r3, #0
 800a906:	930a      	str	r3, [sp, #40]	; 0x28
 800a908:	6823      	ldr	r3, [r4, #0]
 800a90a:	9305      	str	r3, [sp, #20]
 800a90c:	f8d8 3000 	ldr.w	r3, [r8]
 800a910:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a914:	3307      	adds	r3, #7
 800a916:	f023 0307 	bic.w	r3, r3, #7
 800a91a:	f103 0208 	add.w	r2, r3, #8
 800a91e:	f8c8 2000 	str.w	r2, [r8]
 800a922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a926:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a92a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a92e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a932:	9307      	str	r3, [sp, #28]
 800a934:	f8cd 8018 	str.w	r8, [sp, #24]
 800a938:	ee08 0a10 	vmov	s16, r0
 800a93c:	4b9f      	ldr	r3, [pc, #636]	; (800abbc <_printf_float+0x2dc>)
 800a93e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a942:	f04f 32ff 	mov.w	r2, #4294967295
 800a946:	f7f6 f8f1 	bl	8000b2c <__aeabi_dcmpun>
 800a94a:	bb88      	cbnz	r0, 800a9b0 <_printf_float+0xd0>
 800a94c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a950:	4b9a      	ldr	r3, [pc, #616]	; (800abbc <_printf_float+0x2dc>)
 800a952:	f04f 32ff 	mov.w	r2, #4294967295
 800a956:	f7f6 f8cb 	bl	8000af0 <__aeabi_dcmple>
 800a95a:	bb48      	cbnz	r0, 800a9b0 <_printf_float+0xd0>
 800a95c:	2200      	movs	r2, #0
 800a95e:	2300      	movs	r3, #0
 800a960:	4640      	mov	r0, r8
 800a962:	4649      	mov	r1, r9
 800a964:	f7f6 f8ba 	bl	8000adc <__aeabi_dcmplt>
 800a968:	b110      	cbz	r0, 800a970 <_printf_float+0x90>
 800a96a:	232d      	movs	r3, #45	; 0x2d
 800a96c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a970:	4b93      	ldr	r3, [pc, #588]	; (800abc0 <_printf_float+0x2e0>)
 800a972:	4894      	ldr	r0, [pc, #592]	; (800abc4 <_printf_float+0x2e4>)
 800a974:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a978:	bf94      	ite	ls
 800a97a:	4698      	movls	r8, r3
 800a97c:	4680      	movhi	r8, r0
 800a97e:	2303      	movs	r3, #3
 800a980:	6123      	str	r3, [r4, #16]
 800a982:	9b05      	ldr	r3, [sp, #20]
 800a984:	f023 0204 	bic.w	r2, r3, #4
 800a988:	6022      	str	r2, [r4, #0]
 800a98a:	f04f 0900 	mov.w	r9, #0
 800a98e:	9700      	str	r7, [sp, #0]
 800a990:	4633      	mov	r3, r6
 800a992:	aa0b      	add	r2, sp, #44	; 0x2c
 800a994:	4621      	mov	r1, r4
 800a996:	4628      	mov	r0, r5
 800a998:	f000 f9d8 	bl	800ad4c <_printf_common>
 800a99c:	3001      	adds	r0, #1
 800a99e:	f040 8090 	bne.w	800aac2 <_printf_float+0x1e2>
 800a9a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a6:	b00d      	add	sp, #52	; 0x34
 800a9a8:	ecbd 8b02 	vpop	{d8}
 800a9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9b0:	4642      	mov	r2, r8
 800a9b2:	464b      	mov	r3, r9
 800a9b4:	4640      	mov	r0, r8
 800a9b6:	4649      	mov	r1, r9
 800a9b8:	f7f6 f8b8 	bl	8000b2c <__aeabi_dcmpun>
 800a9bc:	b140      	cbz	r0, 800a9d0 <_printf_float+0xf0>
 800a9be:	464b      	mov	r3, r9
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	bfbc      	itt	lt
 800a9c4:	232d      	movlt	r3, #45	; 0x2d
 800a9c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a9ca:	487f      	ldr	r0, [pc, #508]	; (800abc8 <_printf_float+0x2e8>)
 800a9cc:	4b7f      	ldr	r3, [pc, #508]	; (800abcc <_printf_float+0x2ec>)
 800a9ce:	e7d1      	b.n	800a974 <_printf_float+0x94>
 800a9d0:	6863      	ldr	r3, [r4, #4]
 800a9d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a9d6:	9206      	str	r2, [sp, #24]
 800a9d8:	1c5a      	adds	r2, r3, #1
 800a9da:	d13f      	bne.n	800aa5c <_printf_float+0x17c>
 800a9dc:	2306      	movs	r3, #6
 800a9de:	6063      	str	r3, [r4, #4]
 800a9e0:	9b05      	ldr	r3, [sp, #20]
 800a9e2:	6861      	ldr	r1, [r4, #4]
 800a9e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	9303      	str	r3, [sp, #12]
 800a9ec:	ab0a      	add	r3, sp, #40	; 0x28
 800a9ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a9f2:	ab09      	add	r3, sp, #36	; 0x24
 800a9f4:	ec49 8b10 	vmov	d0, r8, r9
 800a9f8:	9300      	str	r3, [sp, #0]
 800a9fa:	6022      	str	r2, [r4, #0]
 800a9fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aa00:	4628      	mov	r0, r5
 800aa02:	f7ff fecd 	bl	800a7a0 <__cvt>
 800aa06:	9b06      	ldr	r3, [sp, #24]
 800aa08:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa0a:	2b47      	cmp	r3, #71	; 0x47
 800aa0c:	4680      	mov	r8, r0
 800aa0e:	d108      	bne.n	800aa22 <_printf_float+0x142>
 800aa10:	1cc8      	adds	r0, r1, #3
 800aa12:	db02      	blt.n	800aa1a <_printf_float+0x13a>
 800aa14:	6863      	ldr	r3, [r4, #4]
 800aa16:	4299      	cmp	r1, r3
 800aa18:	dd41      	ble.n	800aa9e <_printf_float+0x1be>
 800aa1a:	f1ab 0b02 	sub.w	fp, fp, #2
 800aa1e:	fa5f fb8b 	uxtb.w	fp, fp
 800aa22:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aa26:	d820      	bhi.n	800aa6a <_printf_float+0x18a>
 800aa28:	3901      	subs	r1, #1
 800aa2a:	465a      	mov	r2, fp
 800aa2c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800aa30:	9109      	str	r1, [sp, #36]	; 0x24
 800aa32:	f7ff ff17 	bl	800a864 <__exponent>
 800aa36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa38:	1813      	adds	r3, r2, r0
 800aa3a:	2a01      	cmp	r2, #1
 800aa3c:	4681      	mov	r9, r0
 800aa3e:	6123      	str	r3, [r4, #16]
 800aa40:	dc02      	bgt.n	800aa48 <_printf_float+0x168>
 800aa42:	6822      	ldr	r2, [r4, #0]
 800aa44:	07d2      	lsls	r2, r2, #31
 800aa46:	d501      	bpl.n	800aa4c <_printf_float+0x16c>
 800aa48:	3301      	adds	r3, #1
 800aa4a:	6123      	str	r3, [r4, #16]
 800aa4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d09c      	beq.n	800a98e <_printf_float+0xae>
 800aa54:	232d      	movs	r3, #45	; 0x2d
 800aa56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa5a:	e798      	b.n	800a98e <_printf_float+0xae>
 800aa5c:	9a06      	ldr	r2, [sp, #24]
 800aa5e:	2a47      	cmp	r2, #71	; 0x47
 800aa60:	d1be      	bne.n	800a9e0 <_printf_float+0x100>
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d1bc      	bne.n	800a9e0 <_printf_float+0x100>
 800aa66:	2301      	movs	r3, #1
 800aa68:	e7b9      	b.n	800a9de <_printf_float+0xfe>
 800aa6a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800aa6e:	d118      	bne.n	800aaa2 <_printf_float+0x1c2>
 800aa70:	2900      	cmp	r1, #0
 800aa72:	6863      	ldr	r3, [r4, #4]
 800aa74:	dd0b      	ble.n	800aa8e <_printf_float+0x1ae>
 800aa76:	6121      	str	r1, [r4, #16]
 800aa78:	b913      	cbnz	r3, 800aa80 <_printf_float+0x1a0>
 800aa7a:	6822      	ldr	r2, [r4, #0]
 800aa7c:	07d0      	lsls	r0, r2, #31
 800aa7e:	d502      	bpl.n	800aa86 <_printf_float+0x1a6>
 800aa80:	3301      	adds	r3, #1
 800aa82:	440b      	add	r3, r1
 800aa84:	6123      	str	r3, [r4, #16]
 800aa86:	65a1      	str	r1, [r4, #88]	; 0x58
 800aa88:	f04f 0900 	mov.w	r9, #0
 800aa8c:	e7de      	b.n	800aa4c <_printf_float+0x16c>
 800aa8e:	b913      	cbnz	r3, 800aa96 <_printf_float+0x1b6>
 800aa90:	6822      	ldr	r2, [r4, #0]
 800aa92:	07d2      	lsls	r2, r2, #31
 800aa94:	d501      	bpl.n	800aa9a <_printf_float+0x1ba>
 800aa96:	3302      	adds	r3, #2
 800aa98:	e7f4      	b.n	800aa84 <_printf_float+0x1a4>
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e7f2      	b.n	800aa84 <_printf_float+0x1a4>
 800aa9e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800aaa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaa4:	4299      	cmp	r1, r3
 800aaa6:	db05      	blt.n	800aab4 <_printf_float+0x1d4>
 800aaa8:	6823      	ldr	r3, [r4, #0]
 800aaaa:	6121      	str	r1, [r4, #16]
 800aaac:	07d8      	lsls	r0, r3, #31
 800aaae:	d5ea      	bpl.n	800aa86 <_printf_float+0x1a6>
 800aab0:	1c4b      	adds	r3, r1, #1
 800aab2:	e7e7      	b.n	800aa84 <_printf_float+0x1a4>
 800aab4:	2900      	cmp	r1, #0
 800aab6:	bfd4      	ite	le
 800aab8:	f1c1 0202 	rsble	r2, r1, #2
 800aabc:	2201      	movgt	r2, #1
 800aabe:	4413      	add	r3, r2
 800aac0:	e7e0      	b.n	800aa84 <_printf_float+0x1a4>
 800aac2:	6823      	ldr	r3, [r4, #0]
 800aac4:	055a      	lsls	r2, r3, #21
 800aac6:	d407      	bmi.n	800aad8 <_printf_float+0x1f8>
 800aac8:	6923      	ldr	r3, [r4, #16]
 800aaca:	4642      	mov	r2, r8
 800aacc:	4631      	mov	r1, r6
 800aace:	4628      	mov	r0, r5
 800aad0:	47b8      	blx	r7
 800aad2:	3001      	adds	r0, #1
 800aad4:	d12c      	bne.n	800ab30 <_printf_float+0x250>
 800aad6:	e764      	b.n	800a9a2 <_printf_float+0xc2>
 800aad8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aadc:	f240 80e0 	bls.w	800aca0 <_printf_float+0x3c0>
 800aae0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aae4:	2200      	movs	r2, #0
 800aae6:	2300      	movs	r3, #0
 800aae8:	f7f5 ffee 	bl	8000ac8 <__aeabi_dcmpeq>
 800aaec:	2800      	cmp	r0, #0
 800aaee:	d034      	beq.n	800ab5a <_printf_float+0x27a>
 800aaf0:	4a37      	ldr	r2, [pc, #220]	; (800abd0 <_printf_float+0x2f0>)
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	4631      	mov	r1, r6
 800aaf6:	4628      	mov	r0, r5
 800aaf8:	47b8      	blx	r7
 800aafa:	3001      	adds	r0, #1
 800aafc:	f43f af51 	beq.w	800a9a2 <_printf_float+0xc2>
 800ab00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab04:	429a      	cmp	r2, r3
 800ab06:	db02      	blt.n	800ab0e <_printf_float+0x22e>
 800ab08:	6823      	ldr	r3, [r4, #0]
 800ab0a:	07d8      	lsls	r0, r3, #31
 800ab0c:	d510      	bpl.n	800ab30 <_printf_float+0x250>
 800ab0e:	ee18 3a10 	vmov	r3, s16
 800ab12:	4652      	mov	r2, sl
 800ab14:	4631      	mov	r1, r6
 800ab16:	4628      	mov	r0, r5
 800ab18:	47b8      	blx	r7
 800ab1a:	3001      	adds	r0, #1
 800ab1c:	f43f af41 	beq.w	800a9a2 <_printf_float+0xc2>
 800ab20:	f04f 0800 	mov.w	r8, #0
 800ab24:	f104 091a 	add.w	r9, r4, #26
 800ab28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab2a:	3b01      	subs	r3, #1
 800ab2c:	4543      	cmp	r3, r8
 800ab2e:	dc09      	bgt.n	800ab44 <_printf_float+0x264>
 800ab30:	6823      	ldr	r3, [r4, #0]
 800ab32:	079b      	lsls	r3, r3, #30
 800ab34:	f100 8105 	bmi.w	800ad42 <_printf_float+0x462>
 800ab38:	68e0      	ldr	r0, [r4, #12]
 800ab3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab3c:	4298      	cmp	r0, r3
 800ab3e:	bfb8      	it	lt
 800ab40:	4618      	movlt	r0, r3
 800ab42:	e730      	b.n	800a9a6 <_printf_float+0xc6>
 800ab44:	2301      	movs	r3, #1
 800ab46:	464a      	mov	r2, r9
 800ab48:	4631      	mov	r1, r6
 800ab4a:	4628      	mov	r0, r5
 800ab4c:	47b8      	blx	r7
 800ab4e:	3001      	adds	r0, #1
 800ab50:	f43f af27 	beq.w	800a9a2 <_printf_float+0xc2>
 800ab54:	f108 0801 	add.w	r8, r8, #1
 800ab58:	e7e6      	b.n	800ab28 <_printf_float+0x248>
 800ab5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	dc39      	bgt.n	800abd4 <_printf_float+0x2f4>
 800ab60:	4a1b      	ldr	r2, [pc, #108]	; (800abd0 <_printf_float+0x2f0>)
 800ab62:	2301      	movs	r3, #1
 800ab64:	4631      	mov	r1, r6
 800ab66:	4628      	mov	r0, r5
 800ab68:	47b8      	blx	r7
 800ab6a:	3001      	adds	r0, #1
 800ab6c:	f43f af19 	beq.w	800a9a2 <_printf_float+0xc2>
 800ab70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab74:	4313      	orrs	r3, r2
 800ab76:	d102      	bne.n	800ab7e <_printf_float+0x29e>
 800ab78:	6823      	ldr	r3, [r4, #0]
 800ab7a:	07d9      	lsls	r1, r3, #31
 800ab7c:	d5d8      	bpl.n	800ab30 <_printf_float+0x250>
 800ab7e:	ee18 3a10 	vmov	r3, s16
 800ab82:	4652      	mov	r2, sl
 800ab84:	4631      	mov	r1, r6
 800ab86:	4628      	mov	r0, r5
 800ab88:	47b8      	blx	r7
 800ab8a:	3001      	adds	r0, #1
 800ab8c:	f43f af09 	beq.w	800a9a2 <_printf_float+0xc2>
 800ab90:	f04f 0900 	mov.w	r9, #0
 800ab94:	f104 0a1a 	add.w	sl, r4, #26
 800ab98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab9a:	425b      	negs	r3, r3
 800ab9c:	454b      	cmp	r3, r9
 800ab9e:	dc01      	bgt.n	800aba4 <_printf_float+0x2c4>
 800aba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aba2:	e792      	b.n	800aaca <_printf_float+0x1ea>
 800aba4:	2301      	movs	r3, #1
 800aba6:	4652      	mov	r2, sl
 800aba8:	4631      	mov	r1, r6
 800abaa:	4628      	mov	r0, r5
 800abac:	47b8      	blx	r7
 800abae:	3001      	adds	r0, #1
 800abb0:	f43f aef7 	beq.w	800a9a2 <_printf_float+0xc2>
 800abb4:	f109 0901 	add.w	r9, r9, #1
 800abb8:	e7ee      	b.n	800ab98 <_printf_float+0x2b8>
 800abba:	bf00      	nop
 800abbc:	7fefffff 	.word	0x7fefffff
 800abc0:	0800f1dc 	.word	0x0800f1dc
 800abc4:	0800f1e0 	.word	0x0800f1e0
 800abc8:	0800f1e8 	.word	0x0800f1e8
 800abcc:	0800f1e4 	.word	0x0800f1e4
 800abd0:	0800f1ec 	.word	0x0800f1ec
 800abd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800abd8:	429a      	cmp	r2, r3
 800abda:	bfa8      	it	ge
 800abdc:	461a      	movge	r2, r3
 800abde:	2a00      	cmp	r2, #0
 800abe0:	4691      	mov	r9, r2
 800abe2:	dc37      	bgt.n	800ac54 <_printf_float+0x374>
 800abe4:	f04f 0b00 	mov.w	fp, #0
 800abe8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800abec:	f104 021a 	add.w	r2, r4, #26
 800abf0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800abf2:	9305      	str	r3, [sp, #20]
 800abf4:	eba3 0309 	sub.w	r3, r3, r9
 800abf8:	455b      	cmp	r3, fp
 800abfa:	dc33      	bgt.n	800ac64 <_printf_float+0x384>
 800abfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac00:	429a      	cmp	r2, r3
 800ac02:	db3b      	blt.n	800ac7c <_printf_float+0x39c>
 800ac04:	6823      	ldr	r3, [r4, #0]
 800ac06:	07da      	lsls	r2, r3, #31
 800ac08:	d438      	bmi.n	800ac7c <_printf_float+0x39c>
 800ac0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac0c:	9b05      	ldr	r3, [sp, #20]
 800ac0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac10:	1ad3      	subs	r3, r2, r3
 800ac12:	eba2 0901 	sub.w	r9, r2, r1
 800ac16:	4599      	cmp	r9, r3
 800ac18:	bfa8      	it	ge
 800ac1a:	4699      	movge	r9, r3
 800ac1c:	f1b9 0f00 	cmp.w	r9, #0
 800ac20:	dc35      	bgt.n	800ac8e <_printf_float+0x3ae>
 800ac22:	f04f 0800 	mov.w	r8, #0
 800ac26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac2a:	f104 0a1a 	add.w	sl, r4, #26
 800ac2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac32:	1a9b      	subs	r3, r3, r2
 800ac34:	eba3 0309 	sub.w	r3, r3, r9
 800ac38:	4543      	cmp	r3, r8
 800ac3a:	f77f af79 	ble.w	800ab30 <_printf_float+0x250>
 800ac3e:	2301      	movs	r3, #1
 800ac40:	4652      	mov	r2, sl
 800ac42:	4631      	mov	r1, r6
 800ac44:	4628      	mov	r0, r5
 800ac46:	47b8      	blx	r7
 800ac48:	3001      	adds	r0, #1
 800ac4a:	f43f aeaa 	beq.w	800a9a2 <_printf_float+0xc2>
 800ac4e:	f108 0801 	add.w	r8, r8, #1
 800ac52:	e7ec      	b.n	800ac2e <_printf_float+0x34e>
 800ac54:	4613      	mov	r3, r2
 800ac56:	4631      	mov	r1, r6
 800ac58:	4642      	mov	r2, r8
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	47b8      	blx	r7
 800ac5e:	3001      	adds	r0, #1
 800ac60:	d1c0      	bne.n	800abe4 <_printf_float+0x304>
 800ac62:	e69e      	b.n	800a9a2 <_printf_float+0xc2>
 800ac64:	2301      	movs	r3, #1
 800ac66:	4631      	mov	r1, r6
 800ac68:	4628      	mov	r0, r5
 800ac6a:	9205      	str	r2, [sp, #20]
 800ac6c:	47b8      	blx	r7
 800ac6e:	3001      	adds	r0, #1
 800ac70:	f43f ae97 	beq.w	800a9a2 <_printf_float+0xc2>
 800ac74:	9a05      	ldr	r2, [sp, #20]
 800ac76:	f10b 0b01 	add.w	fp, fp, #1
 800ac7a:	e7b9      	b.n	800abf0 <_printf_float+0x310>
 800ac7c:	ee18 3a10 	vmov	r3, s16
 800ac80:	4652      	mov	r2, sl
 800ac82:	4631      	mov	r1, r6
 800ac84:	4628      	mov	r0, r5
 800ac86:	47b8      	blx	r7
 800ac88:	3001      	adds	r0, #1
 800ac8a:	d1be      	bne.n	800ac0a <_printf_float+0x32a>
 800ac8c:	e689      	b.n	800a9a2 <_printf_float+0xc2>
 800ac8e:	9a05      	ldr	r2, [sp, #20]
 800ac90:	464b      	mov	r3, r9
 800ac92:	4442      	add	r2, r8
 800ac94:	4631      	mov	r1, r6
 800ac96:	4628      	mov	r0, r5
 800ac98:	47b8      	blx	r7
 800ac9a:	3001      	adds	r0, #1
 800ac9c:	d1c1      	bne.n	800ac22 <_printf_float+0x342>
 800ac9e:	e680      	b.n	800a9a2 <_printf_float+0xc2>
 800aca0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aca2:	2a01      	cmp	r2, #1
 800aca4:	dc01      	bgt.n	800acaa <_printf_float+0x3ca>
 800aca6:	07db      	lsls	r3, r3, #31
 800aca8:	d538      	bpl.n	800ad1c <_printf_float+0x43c>
 800acaa:	2301      	movs	r3, #1
 800acac:	4642      	mov	r2, r8
 800acae:	4631      	mov	r1, r6
 800acb0:	4628      	mov	r0, r5
 800acb2:	47b8      	blx	r7
 800acb4:	3001      	adds	r0, #1
 800acb6:	f43f ae74 	beq.w	800a9a2 <_printf_float+0xc2>
 800acba:	ee18 3a10 	vmov	r3, s16
 800acbe:	4652      	mov	r2, sl
 800acc0:	4631      	mov	r1, r6
 800acc2:	4628      	mov	r0, r5
 800acc4:	47b8      	blx	r7
 800acc6:	3001      	adds	r0, #1
 800acc8:	f43f ae6b 	beq.w	800a9a2 <_printf_float+0xc2>
 800accc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800acd0:	2200      	movs	r2, #0
 800acd2:	2300      	movs	r3, #0
 800acd4:	f7f5 fef8 	bl	8000ac8 <__aeabi_dcmpeq>
 800acd8:	b9d8      	cbnz	r0, 800ad12 <_printf_float+0x432>
 800acda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acdc:	f108 0201 	add.w	r2, r8, #1
 800ace0:	3b01      	subs	r3, #1
 800ace2:	4631      	mov	r1, r6
 800ace4:	4628      	mov	r0, r5
 800ace6:	47b8      	blx	r7
 800ace8:	3001      	adds	r0, #1
 800acea:	d10e      	bne.n	800ad0a <_printf_float+0x42a>
 800acec:	e659      	b.n	800a9a2 <_printf_float+0xc2>
 800acee:	2301      	movs	r3, #1
 800acf0:	4652      	mov	r2, sl
 800acf2:	4631      	mov	r1, r6
 800acf4:	4628      	mov	r0, r5
 800acf6:	47b8      	blx	r7
 800acf8:	3001      	adds	r0, #1
 800acfa:	f43f ae52 	beq.w	800a9a2 <_printf_float+0xc2>
 800acfe:	f108 0801 	add.w	r8, r8, #1
 800ad02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad04:	3b01      	subs	r3, #1
 800ad06:	4543      	cmp	r3, r8
 800ad08:	dcf1      	bgt.n	800acee <_printf_float+0x40e>
 800ad0a:	464b      	mov	r3, r9
 800ad0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ad10:	e6dc      	b.n	800aacc <_printf_float+0x1ec>
 800ad12:	f04f 0800 	mov.w	r8, #0
 800ad16:	f104 0a1a 	add.w	sl, r4, #26
 800ad1a:	e7f2      	b.n	800ad02 <_printf_float+0x422>
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	4642      	mov	r2, r8
 800ad20:	e7df      	b.n	800ace2 <_printf_float+0x402>
 800ad22:	2301      	movs	r3, #1
 800ad24:	464a      	mov	r2, r9
 800ad26:	4631      	mov	r1, r6
 800ad28:	4628      	mov	r0, r5
 800ad2a:	47b8      	blx	r7
 800ad2c:	3001      	adds	r0, #1
 800ad2e:	f43f ae38 	beq.w	800a9a2 <_printf_float+0xc2>
 800ad32:	f108 0801 	add.w	r8, r8, #1
 800ad36:	68e3      	ldr	r3, [r4, #12]
 800ad38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad3a:	1a5b      	subs	r3, r3, r1
 800ad3c:	4543      	cmp	r3, r8
 800ad3e:	dcf0      	bgt.n	800ad22 <_printf_float+0x442>
 800ad40:	e6fa      	b.n	800ab38 <_printf_float+0x258>
 800ad42:	f04f 0800 	mov.w	r8, #0
 800ad46:	f104 0919 	add.w	r9, r4, #25
 800ad4a:	e7f4      	b.n	800ad36 <_printf_float+0x456>

0800ad4c <_printf_common>:
 800ad4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad50:	4616      	mov	r6, r2
 800ad52:	4699      	mov	r9, r3
 800ad54:	688a      	ldr	r2, [r1, #8]
 800ad56:	690b      	ldr	r3, [r1, #16]
 800ad58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	bfb8      	it	lt
 800ad60:	4613      	movlt	r3, r2
 800ad62:	6033      	str	r3, [r6, #0]
 800ad64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ad68:	4607      	mov	r7, r0
 800ad6a:	460c      	mov	r4, r1
 800ad6c:	b10a      	cbz	r2, 800ad72 <_printf_common+0x26>
 800ad6e:	3301      	adds	r3, #1
 800ad70:	6033      	str	r3, [r6, #0]
 800ad72:	6823      	ldr	r3, [r4, #0]
 800ad74:	0699      	lsls	r1, r3, #26
 800ad76:	bf42      	ittt	mi
 800ad78:	6833      	ldrmi	r3, [r6, #0]
 800ad7a:	3302      	addmi	r3, #2
 800ad7c:	6033      	strmi	r3, [r6, #0]
 800ad7e:	6825      	ldr	r5, [r4, #0]
 800ad80:	f015 0506 	ands.w	r5, r5, #6
 800ad84:	d106      	bne.n	800ad94 <_printf_common+0x48>
 800ad86:	f104 0a19 	add.w	sl, r4, #25
 800ad8a:	68e3      	ldr	r3, [r4, #12]
 800ad8c:	6832      	ldr	r2, [r6, #0]
 800ad8e:	1a9b      	subs	r3, r3, r2
 800ad90:	42ab      	cmp	r3, r5
 800ad92:	dc26      	bgt.n	800ade2 <_printf_common+0x96>
 800ad94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ad98:	1e13      	subs	r3, r2, #0
 800ad9a:	6822      	ldr	r2, [r4, #0]
 800ad9c:	bf18      	it	ne
 800ad9e:	2301      	movne	r3, #1
 800ada0:	0692      	lsls	r2, r2, #26
 800ada2:	d42b      	bmi.n	800adfc <_printf_common+0xb0>
 800ada4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ada8:	4649      	mov	r1, r9
 800adaa:	4638      	mov	r0, r7
 800adac:	47c0      	blx	r8
 800adae:	3001      	adds	r0, #1
 800adb0:	d01e      	beq.n	800adf0 <_printf_common+0xa4>
 800adb2:	6823      	ldr	r3, [r4, #0]
 800adb4:	68e5      	ldr	r5, [r4, #12]
 800adb6:	6832      	ldr	r2, [r6, #0]
 800adb8:	f003 0306 	and.w	r3, r3, #6
 800adbc:	2b04      	cmp	r3, #4
 800adbe:	bf08      	it	eq
 800adc0:	1aad      	subeq	r5, r5, r2
 800adc2:	68a3      	ldr	r3, [r4, #8]
 800adc4:	6922      	ldr	r2, [r4, #16]
 800adc6:	bf0c      	ite	eq
 800adc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800adcc:	2500      	movne	r5, #0
 800adce:	4293      	cmp	r3, r2
 800add0:	bfc4      	itt	gt
 800add2:	1a9b      	subgt	r3, r3, r2
 800add4:	18ed      	addgt	r5, r5, r3
 800add6:	2600      	movs	r6, #0
 800add8:	341a      	adds	r4, #26
 800adda:	42b5      	cmp	r5, r6
 800addc:	d11a      	bne.n	800ae14 <_printf_common+0xc8>
 800adde:	2000      	movs	r0, #0
 800ade0:	e008      	b.n	800adf4 <_printf_common+0xa8>
 800ade2:	2301      	movs	r3, #1
 800ade4:	4652      	mov	r2, sl
 800ade6:	4649      	mov	r1, r9
 800ade8:	4638      	mov	r0, r7
 800adea:	47c0      	blx	r8
 800adec:	3001      	adds	r0, #1
 800adee:	d103      	bne.n	800adf8 <_printf_common+0xac>
 800adf0:	f04f 30ff 	mov.w	r0, #4294967295
 800adf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adf8:	3501      	adds	r5, #1
 800adfa:	e7c6      	b.n	800ad8a <_printf_common+0x3e>
 800adfc:	18e1      	adds	r1, r4, r3
 800adfe:	1c5a      	adds	r2, r3, #1
 800ae00:	2030      	movs	r0, #48	; 0x30
 800ae02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ae06:	4422      	add	r2, r4
 800ae08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ae0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ae10:	3302      	adds	r3, #2
 800ae12:	e7c7      	b.n	800ada4 <_printf_common+0x58>
 800ae14:	2301      	movs	r3, #1
 800ae16:	4622      	mov	r2, r4
 800ae18:	4649      	mov	r1, r9
 800ae1a:	4638      	mov	r0, r7
 800ae1c:	47c0      	blx	r8
 800ae1e:	3001      	adds	r0, #1
 800ae20:	d0e6      	beq.n	800adf0 <_printf_common+0xa4>
 800ae22:	3601      	adds	r6, #1
 800ae24:	e7d9      	b.n	800adda <_printf_common+0x8e>
	...

0800ae28 <_printf_i>:
 800ae28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae2c:	460c      	mov	r4, r1
 800ae2e:	4691      	mov	r9, r2
 800ae30:	7e27      	ldrb	r7, [r4, #24]
 800ae32:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ae34:	2f78      	cmp	r7, #120	; 0x78
 800ae36:	4680      	mov	r8, r0
 800ae38:	469a      	mov	sl, r3
 800ae3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae3e:	d807      	bhi.n	800ae50 <_printf_i+0x28>
 800ae40:	2f62      	cmp	r7, #98	; 0x62
 800ae42:	d80a      	bhi.n	800ae5a <_printf_i+0x32>
 800ae44:	2f00      	cmp	r7, #0
 800ae46:	f000 80d8 	beq.w	800affa <_printf_i+0x1d2>
 800ae4a:	2f58      	cmp	r7, #88	; 0x58
 800ae4c:	f000 80a3 	beq.w	800af96 <_printf_i+0x16e>
 800ae50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ae54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ae58:	e03a      	b.n	800aed0 <_printf_i+0xa8>
 800ae5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ae5e:	2b15      	cmp	r3, #21
 800ae60:	d8f6      	bhi.n	800ae50 <_printf_i+0x28>
 800ae62:	a001      	add	r0, pc, #4	; (adr r0, 800ae68 <_printf_i+0x40>)
 800ae64:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ae68:	0800aec1 	.word	0x0800aec1
 800ae6c:	0800aed5 	.word	0x0800aed5
 800ae70:	0800ae51 	.word	0x0800ae51
 800ae74:	0800ae51 	.word	0x0800ae51
 800ae78:	0800ae51 	.word	0x0800ae51
 800ae7c:	0800ae51 	.word	0x0800ae51
 800ae80:	0800aed5 	.word	0x0800aed5
 800ae84:	0800ae51 	.word	0x0800ae51
 800ae88:	0800ae51 	.word	0x0800ae51
 800ae8c:	0800ae51 	.word	0x0800ae51
 800ae90:	0800ae51 	.word	0x0800ae51
 800ae94:	0800afe1 	.word	0x0800afe1
 800ae98:	0800af05 	.word	0x0800af05
 800ae9c:	0800afc3 	.word	0x0800afc3
 800aea0:	0800ae51 	.word	0x0800ae51
 800aea4:	0800ae51 	.word	0x0800ae51
 800aea8:	0800b003 	.word	0x0800b003
 800aeac:	0800ae51 	.word	0x0800ae51
 800aeb0:	0800af05 	.word	0x0800af05
 800aeb4:	0800ae51 	.word	0x0800ae51
 800aeb8:	0800ae51 	.word	0x0800ae51
 800aebc:	0800afcb 	.word	0x0800afcb
 800aec0:	680b      	ldr	r3, [r1, #0]
 800aec2:	1d1a      	adds	r2, r3, #4
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	600a      	str	r2, [r1, #0]
 800aec8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aecc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aed0:	2301      	movs	r3, #1
 800aed2:	e0a3      	b.n	800b01c <_printf_i+0x1f4>
 800aed4:	6825      	ldr	r5, [r4, #0]
 800aed6:	6808      	ldr	r0, [r1, #0]
 800aed8:	062e      	lsls	r6, r5, #24
 800aeda:	f100 0304 	add.w	r3, r0, #4
 800aede:	d50a      	bpl.n	800aef6 <_printf_i+0xce>
 800aee0:	6805      	ldr	r5, [r0, #0]
 800aee2:	600b      	str	r3, [r1, #0]
 800aee4:	2d00      	cmp	r5, #0
 800aee6:	da03      	bge.n	800aef0 <_printf_i+0xc8>
 800aee8:	232d      	movs	r3, #45	; 0x2d
 800aeea:	426d      	negs	r5, r5
 800aeec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aef0:	485e      	ldr	r0, [pc, #376]	; (800b06c <_printf_i+0x244>)
 800aef2:	230a      	movs	r3, #10
 800aef4:	e019      	b.n	800af2a <_printf_i+0x102>
 800aef6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800aefa:	6805      	ldr	r5, [r0, #0]
 800aefc:	600b      	str	r3, [r1, #0]
 800aefe:	bf18      	it	ne
 800af00:	b22d      	sxthne	r5, r5
 800af02:	e7ef      	b.n	800aee4 <_printf_i+0xbc>
 800af04:	680b      	ldr	r3, [r1, #0]
 800af06:	6825      	ldr	r5, [r4, #0]
 800af08:	1d18      	adds	r0, r3, #4
 800af0a:	6008      	str	r0, [r1, #0]
 800af0c:	0628      	lsls	r0, r5, #24
 800af0e:	d501      	bpl.n	800af14 <_printf_i+0xec>
 800af10:	681d      	ldr	r5, [r3, #0]
 800af12:	e002      	b.n	800af1a <_printf_i+0xf2>
 800af14:	0669      	lsls	r1, r5, #25
 800af16:	d5fb      	bpl.n	800af10 <_printf_i+0xe8>
 800af18:	881d      	ldrh	r5, [r3, #0]
 800af1a:	4854      	ldr	r0, [pc, #336]	; (800b06c <_printf_i+0x244>)
 800af1c:	2f6f      	cmp	r7, #111	; 0x6f
 800af1e:	bf0c      	ite	eq
 800af20:	2308      	moveq	r3, #8
 800af22:	230a      	movne	r3, #10
 800af24:	2100      	movs	r1, #0
 800af26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800af2a:	6866      	ldr	r6, [r4, #4]
 800af2c:	60a6      	str	r6, [r4, #8]
 800af2e:	2e00      	cmp	r6, #0
 800af30:	bfa2      	ittt	ge
 800af32:	6821      	ldrge	r1, [r4, #0]
 800af34:	f021 0104 	bicge.w	r1, r1, #4
 800af38:	6021      	strge	r1, [r4, #0]
 800af3a:	b90d      	cbnz	r5, 800af40 <_printf_i+0x118>
 800af3c:	2e00      	cmp	r6, #0
 800af3e:	d04d      	beq.n	800afdc <_printf_i+0x1b4>
 800af40:	4616      	mov	r6, r2
 800af42:	fbb5 f1f3 	udiv	r1, r5, r3
 800af46:	fb03 5711 	mls	r7, r3, r1, r5
 800af4a:	5dc7      	ldrb	r7, [r0, r7]
 800af4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800af50:	462f      	mov	r7, r5
 800af52:	42bb      	cmp	r3, r7
 800af54:	460d      	mov	r5, r1
 800af56:	d9f4      	bls.n	800af42 <_printf_i+0x11a>
 800af58:	2b08      	cmp	r3, #8
 800af5a:	d10b      	bne.n	800af74 <_printf_i+0x14c>
 800af5c:	6823      	ldr	r3, [r4, #0]
 800af5e:	07df      	lsls	r7, r3, #31
 800af60:	d508      	bpl.n	800af74 <_printf_i+0x14c>
 800af62:	6923      	ldr	r3, [r4, #16]
 800af64:	6861      	ldr	r1, [r4, #4]
 800af66:	4299      	cmp	r1, r3
 800af68:	bfde      	ittt	le
 800af6a:	2330      	movle	r3, #48	; 0x30
 800af6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800af70:	f106 36ff 	addle.w	r6, r6, #4294967295
 800af74:	1b92      	subs	r2, r2, r6
 800af76:	6122      	str	r2, [r4, #16]
 800af78:	f8cd a000 	str.w	sl, [sp]
 800af7c:	464b      	mov	r3, r9
 800af7e:	aa03      	add	r2, sp, #12
 800af80:	4621      	mov	r1, r4
 800af82:	4640      	mov	r0, r8
 800af84:	f7ff fee2 	bl	800ad4c <_printf_common>
 800af88:	3001      	adds	r0, #1
 800af8a:	d14c      	bne.n	800b026 <_printf_i+0x1fe>
 800af8c:	f04f 30ff 	mov.w	r0, #4294967295
 800af90:	b004      	add	sp, #16
 800af92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af96:	4835      	ldr	r0, [pc, #212]	; (800b06c <_printf_i+0x244>)
 800af98:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800af9c:	6823      	ldr	r3, [r4, #0]
 800af9e:	680e      	ldr	r6, [r1, #0]
 800afa0:	061f      	lsls	r7, r3, #24
 800afa2:	f856 5b04 	ldr.w	r5, [r6], #4
 800afa6:	600e      	str	r6, [r1, #0]
 800afa8:	d514      	bpl.n	800afd4 <_printf_i+0x1ac>
 800afaa:	07d9      	lsls	r1, r3, #31
 800afac:	bf44      	itt	mi
 800afae:	f043 0320 	orrmi.w	r3, r3, #32
 800afb2:	6023      	strmi	r3, [r4, #0]
 800afb4:	b91d      	cbnz	r5, 800afbe <_printf_i+0x196>
 800afb6:	6823      	ldr	r3, [r4, #0]
 800afb8:	f023 0320 	bic.w	r3, r3, #32
 800afbc:	6023      	str	r3, [r4, #0]
 800afbe:	2310      	movs	r3, #16
 800afc0:	e7b0      	b.n	800af24 <_printf_i+0xfc>
 800afc2:	6823      	ldr	r3, [r4, #0]
 800afc4:	f043 0320 	orr.w	r3, r3, #32
 800afc8:	6023      	str	r3, [r4, #0]
 800afca:	2378      	movs	r3, #120	; 0x78
 800afcc:	4828      	ldr	r0, [pc, #160]	; (800b070 <_printf_i+0x248>)
 800afce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800afd2:	e7e3      	b.n	800af9c <_printf_i+0x174>
 800afd4:	065e      	lsls	r6, r3, #25
 800afd6:	bf48      	it	mi
 800afd8:	b2ad      	uxthmi	r5, r5
 800afda:	e7e6      	b.n	800afaa <_printf_i+0x182>
 800afdc:	4616      	mov	r6, r2
 800afde:	e7bb      	b.n	800af58 <_printf_i+0x130>
 800afe0:	680b      	ldr	r3, [r1, #0]
 800afe2:	6826      	ldr	r6, [r4, #0]
 800afe4:	6960      	ldr	r0, [r4, #20]
 800afe6:	1d1d      	adds	r5, r3, #4
 800afe8:	600d      	str	r5, [r1, #0]
 800afea:	0635      	lsls	r5, r6, #24
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	d501      	bpl.n	800aff4 <_printf_i+0x1cc>
 800aff0:	6018      	str	r0, [r3, #0]
 800aff2:	e002      	b.n	800affa <_printf_i+0x1d2>
 800aff4:	0671      	lsls	r1, r6, #25
 800aff6:	d5fb      	bpl.n	800aff0 <_printf_i+0x1c8>
 800aff8:	8018      	strh	r0, [r3, #0]
 800affa:	2300      	movs	r3, #0
 800affc:	6123      	str	r3, [r4, #16]
 800affe:	4616      	mov	r6, r2
 800b000:	e7ba      	b.n	800af78 <_printf_i+0x150>
 800b002:	680b      	ldr	r3, [r1, #0]
 800b004:	1d1a      	adds	r2, r3, #4
 800b006:	600a      	str	r2, [r1, #0]
 800b008:	681e      	ldr	r6, [r3, #0]
 800b00a:	6862      	ldr	r2, [r4, #4]
 800b00c:	2100      	movs	r1, #0
 800b00e:	4630      	mov	r0, r6
 800b010:	f7f5 f8e6 	bl	80001e0 <memchr>
 800b014:	b108      	cbz	r0, 800b01a <_printf_i+0x1f2>
 800b016:	1b80      	subs	r0, r0, r6
 800b018:	6060      	str	r0, [r4, #4]
 800b01a:	6863      	ldr	r3, [r4, #4]
 800b01c:	6123      	str	r3, [r4, #16]
 800b01e:	2300      	movs	r3, #0
 800b020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b024:	e7a8      	b.n	800af78 <_printf_i+0x150>
 800b026:	6923      	ldr	r3, [r4, #16]
 800b028:	4632      	mov	r2, r6
 800b02a:	4649      	mov	r1, r9
 800b02c:	4640      	mov	r0, r8
 800b02e:	47d0      	blx	sl
 800b030:	3001      	adds	r0, #1
 800b032:	d0ab      	beq.n	800af8c <_printf_i+0x164>
 800b034:	6823      	ldr	r3, [r4, #0]
 800b036:	079b      	lsls	r3, r3, #30
 800b038:	d413      	bmi.n	800b062 <_printf_i+0x23a>
 800b03a:	68e0      	ldr	r0, [r4, #12]
 800b03c:	9b03      	ldr	r3, [sp, #12]
 800b03e:	4298      	cmp	r0, r3
 800b040:	bfb8      	it	lt
 800b042:	4618      	movlt	r0, r3
 800b044:	e7a4      	b.n	800af90 <_printf_i+0x168>
 800b046:	2301      	movs	r3, #1
 800b048:	4632      	mov	r2, r6
 800b04a:	4649      	mov	r1, r9
 800b04c:	4640      	mov	r0, r8
 800b04e:	47d0      	blx	sl
 800b050:	3001      	adds	r0, #1
 800b052:	d09b      	beq.n	800af8c <_printf_i+0x164>
 800b054:	3501      	adds	r5, #1
 800b056:	68e3      	ldr	r3, [r4, #12]
 800b058:	9903      	ldr	r1, [sp, #12]
 800b05a:	1a5b      	subs	r3, r3, r1
 800b05c:	42ab      	cmp	r3, r5
 800b05e:	dcf2      	bgt.n	800b046 <_printf_i+0x21e>
 800b060:	e7eb      	b.n	800b03a <_printf_i+0x212>
 800b062:	2500      	movs	r5, #0
 800b064:	f104 0619 	add.w	r6, r4, #25
 800b068:	e7f5      	b.n	800b056 <_printf_i+0x22e>
 800b06a:	bf00      	nop
 800b06c:	0800f1ee 	.word	0x0800f1ee
 800b070:	0800f1ff 	.word	0x0800f1ff

0800b074 <_scanf_float>:
 800b074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b078:	b087      	sub	sp, #28
 800b07a:	4617      	mov	r7, r2
 800b07c:	9303      	str	r3, [sp, #12]
 800b07e:	688b      	ldr	r3, [r1, #8]
 800b080:	1e5a      	subs	r2, r3, #1
 800b082:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b086:	bf83      	ittte	hi
 800b088:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b08c:	195b      	addhi	r3, r3, r5
 800b08e:	9302      	strhi	r3, [sp, #8]
 800b090:	2300      	movls	r3, #0
 800b092:	bf86      	itte	hi
 800b094:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b098:	608b      	strhi	r3, [r1, #8]
 800b09a:	9302      	strls	r3, [sp, #8]
 800b09c:	680b      	ldr	r3, [r1, #0]
 800b09e:	468b      	mov	fp, r1
 800b0a0:	2500      	movs	r5, #0
 800b0a2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b0a6:	f84b 3b1c 	str.w	r3, [fp], #28
 800b0aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b0ae:	4680      	mov	r8, r0
 800b0b0:	460c      	mov	r4, r1
 800b0b2:	465e      	mov	r6, fp
 800b0b4:	46aa      	mov	sl, r5
 800b0b6:	46a9      	mov	r9, r5
 800b0b8:	9501      	str	r5, [sp, #4]
 800b0ba:	68a2      	ldr	r2, [r4, #8]
 800b0bc:	b152      	cbz	r2, 800b0d4 <_scanf_float+0x60>
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	2b4e      	cmp	r3, #78	; 0x4e
 800b0c4:	d864      	bhi.n	800b190 <_scanf_float+0x11c>
 800b0c6:	2b40      	cmp	r3, #64	; 0x40
 800b0c8:	d83c      	bhi.n	800b144 <_scanf_float+0xd0>
 800b0ca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b0ce:	b2c8      	uxtb	r0, r1
 800b0d0:	280e      	cmp	r0, #14
 800b0d2:	d93a      	bls.n	800b14a <_scanf_float+0xd6>
 800b0d4:	f1b9 0f00 	cmp.w	r9, #0
 800b0d8:	d003      	beq.n	800b0e2 <_scanf_float+0x6e>
 800b0da:	6823      	ldr	r3, [r4, #0]
 800b0dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0e0:	6023      	str	r3, [r4, #0]
 800b0e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0e6:	f1ba 0f01 	cmp.w	sl, #1
 800b0ea:	f200 8113 	bhi.w	800b314 <_scanf_float+0x2a0>
 800b0ee:	455e      	cmp	r6, fp
 800b0f0:	f200 8105 	bhi.w	800b2fe <_scanf_float+0x28a>
 800b0f4:	2501      	movs	r5, #1
 800b0f6:	4628      	mov	r0, r5
 800b0f8:	b007      	add	sp, #28
 800b0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0fe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b102:	2a0d      	cmp	r2, #13
 800b104:	d8e6      	bhi.n	800b0d4 <_scanf_float+0x60>
 800b106:	a101      	add	r1, pc, #4	; (adr r1, 800b10c <_scanf_float+0x98>)
 800b108:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b10c:	0800b24b 	.word	0x0800b24b
 800b110:	0800b0d5 	.word	0x0800b0d5
 800b114:	0800b0d5 	.word	0x0800b0d5
 800b118:	0800b0d5 	.word	0x0800b0d5
 800b11c:	0800b2ab 	.word	0x0800b2ab
 800b120:	0800b283 	.word	0x0800b283
 800b124:	0800b0d5 	.word	0x0800b0d5
 800b128:	0800b0d5 	.word	0x0800b0d5
 800b12c:	0800b259 	.word	0x0800b259
 800b130:	0800b0d5 	.word	0x0800b0d5
 800b134:	0800b0d5 	.word	0x0800b0d5
 800b138:	0800b0d5 	.word	0x0800b0d5
 800b13c:	0800b0d5 	.word	0x0800b0d5
 800b140:	0800b211 	.word	0x0800b211
 800b144:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b148:	e7db      	b.n	800b102 <_scanf_float+0x8e>
 800b14a:	290e      	cmp	r1, #14
 800b14c:	d8c2      	bhi.n	800b0d4 <_scanf_float+0x60>
 800b14e:	a001      	add	r0, pc, #4	; (adr r0, 800b154 <_scanf_float+0xe0>)
 800b150:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b154:	0800b203 	.word	0x0800b203
 800b158:	0800b0d5 	.word	0x0800b0d5
 800b15c:	0800b203 	.word	0x0800b203
 800b160:	0800b297 	.word	0x0800b297
 800b164:	0800b0d5 	.word	0x0800b0d5
 800b168:	0800b1b1 	.word	0x0800b1b1
 800b16c:	0800b1ed 	.word	0x0800b1ed
 800b170:	0800b1ed 	.word	0x0800b1ed
 800b174:	0800b1ed 	.word	0x0800b1ed
 800b178:	0800b1ed 	.word	0x0800b1ed
 800b17c:	0800b1ed 	.word	0x0800b1ed
 800b180:	0800b1ed 	.word	0x0800b1ed
 800b184:	0800b1ed 	.word	0x0800b1ed
 800b188:	0800b1ed 	.word	0x0800b1ed
 800b18c:	0800b1ed 	.word	0x0800b1ed
 800b190:	2b6e      	cmp	r3, #110	; 0x6e
 800b192:	d809      	bhi.n	800b1a8 <_scanf_float+0x134>
 800b194:	2b60      	cmp	r3, #96	; 0x60
 800b196:	d8b2      	bhi.n	800b0fe <_scanf_float+0x8a>
 800b198:	2b54      	cmp	r3, #84	; 0x54
 800b19a:	d077      	beq.n	800b28c <_scanf_float+0x218>
 800b19c:	2b59      	cmp	r3, #89	; 0x59
 800b19e:	d199      	bne.n	800b0d4 <_scanf_float+0x60>
 800b1a0:	2d07      	cmp	r5, #7
 800b1a2:	d197      	bne.n	800b0d4 <_scanf_float+0x60>
 800b1a4:	2508      	movs	r5, #8
 800b1a6:	e029      	b.n	800b1fc <_scanf_float+0x188>
 800b1a8:	2b74      	cmp	r3, #116	; 0x74
 800b1aa:	d06f      	beq.n	800b28c <_scanf_float+0x218>
 800b1ac:	2b79      	cmp	r3, #121	; 0x79
 800b1ae:	e7f6      	b.n	800b19e <_scanf_float+0x12a>
 800b1b0:	6821      	ldr	r1, [r4, #0]
 800b1b2:	05c8      	lsls	r0, r1, #23
 800b1b4:	d51a      	bpl.n	800b1ec <_scanf_float+0x178>
 800b1b6:	9b02      	ldr	r3, [sp, #8]
 800b1b8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b1bc:	6021      	str	r1, [r4, #0]
 800b1be:	f109 0901 	add.w	r9, r9, #1
 800b1c2:	b11b      	cbz	r3, 800b1cc <_scanf_float+0x158>
 800b1c4:	3b01      	subs	r3, #1
 800b1c6:	3201      	adds	r2, #1
 800b1c8:	9302      	str	r3, [sp, #8]
 800b1ca:	60a2      	str	r2, [r4, #8]
 800b1cc:	68a3      	ldr	r3, [r4, #8]
 800b1ce:	3b01      	subs	r3, #1
 800b1d0:	60a3      	str	r3, [r4, #8]
 800b1d2:	6923      	ldr	r3, [r4, #16]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	6123      	str	r3, [r4, #16]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	3b01      	subs	r3, #1
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	607b      	str	r3, [r7, #4]
 800b1e0:	f340 8084 	ble.w	800b2ec <_scanf_float+0x278>
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	603b      	str	r3, [r7, #0]
 800b1ea:	e766      	b.n	800b0ba <_scanf_float+0x46>
 800b1ec:	eb1a 0f05 	cmn.w	sl, r5
 800b1f0:	f47f af70 	bne.w	800b0d4 <_scanf_float+0x60>
 800b1f4:	6822      	ldr	r2, [r4, #0]
 800b1f6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b1fa:	6022      	str	r2, [r4, #0]
 800b1fc:	f806 3b01 	strb.w	r3, [r6], #1
 800b200:	e7e4      	b.n	800b1cc <_scanf_float+0x158>
 800b202:	6822      	ldr	r2, [r4, #0]
 800b204:	0610      	lsls	r0, r2, #24
 800b206:	f57f af65 	bpl.w	800b0d4 <_scanf_float+0x60>
 800b20a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b20e:	e7f4      	b.n	800b1fa <_scanf_float+0x186>
 800b210:	f1ba 0f00 	cmp.w	sl, #0
 800b214:	d10e      	bne.n	800b234 <_scanf_float+0x1c0>
 800b216:	f1b9 0f00 	cmp.w	r9, #0
 800b21a:	d10e      	bne.n	800b23a <_scanf_float+0x1c6>
 800b21c:	6822      	ldr	r2, [r4, #0]
 800b21e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b222:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b226:	d108      	bne.n	800b23a <_scanf_float+0x1c6>
 800b228:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b22c:	6022      	str	r2, [r4, #0]
 800b22e:	f04f 0a01 	mov.w	sl, #1
 800b232:	e7e3      	b.n	800b1fc <_scanf_float+0x188>
 800b234:	f1ba 0f02 	cmp.w	sl, #2
 800b238:	d055      	beq.n	800b2e6 <_scanf_float+0x272>
 800b23a:	2d01      	cmp	r5, #1
 800b23c:	d002      	beq.n	800b244 <_scanf_float+0x1d0>
 800b23e:	2d04      	cmp	r5, #4
 800b240:	f47f af48 	bne.w	800b0d4 <_scanf_float+0x60>
 800b244:	3501      	adds	r5, #1
 800b246:	b2ed      	uxtb	r5, r5
 800b248:	e7d8      	b.n	800b1fc <_scanf_float+0x188>
 800b24a:	f1ba 0f01 	cmp.w	sl, #1
 800b24e:	f47f af41 	bne.w	800b0d4 <_scanf_float+0x60>
 800b252:	f04f 0a02 	mov.w	sl, #2
 800b256:	e7d1      	b.n	800b1fc <_scanf_float+0x188>
 800b258:	b97d      	cbnz	r5, 800b27a <_scanf_float+0x206>
 800b25a:	f1b9 0f00 	cmp.w	r9, #0
 800b25e:	f47f af3c 	bne.w	800b0da <_scanf_float+0x66>
 800b262:	6822      	ldr	r2, [r4, #0]
 800b264:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b268:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b26c:	f47f af39 	bne.w	800b0e2 <_scanf_float+0x6e>
 800b270:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b274:	6022      	str	r2, [r4, #0]
 800b276:	2501      	movs	r5, #1
 800b278:	e7c0      	b.n	800b1fc <_scanf_float+0x188>
 800b27a:	2d03      	cmp	r5, #3
 800b27c:	d0e2      	beq.n	800b244 <_scanf_float+0x1d0>
 800b27e:	2d05      	cmp	r5, #5
 800b280:	e7de      	b.n	800b240 <_scanf_float+0x1cc>
 800b282:	2d02      	cmp	r5, #2
 800b284:	f47f af26 	bne.w	800b0d4 <_scanf_float+0x60>
 800b288:	2503      	movs	r5, #3
 800b28a:	e7b7      	b.n	800b1fc <_scanf_float+0x188>
 800b28c:	2d06      	cmp	r5, #6
 800b28e:	f47f af21 	bne.w	800b0d4 <_scanf_float+0x60>
 800b292:	2507      	movs	r5, #7
 800b294:	e7b2      	b.n	800b1fc <_scanf_float+0x188>
 800b296:	6822      	ldr	r2, [r4, #0]
 800b298:	0591      	lsls	r1, r2, #22
 800b29a:	f57f af1b 	bpl.w	800b0d4 <_scanf_float+0x60>
 800b29e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b2a2:	6022      	str	r2, [r4, #0]
 800b2a4:	f8cd 9004 	str.w	r9, [sp, #4]
 800b2a8:	e7a8      	b.n	800b1fc <_scanf_float+0x188>
 800b2aa:	6822      	ldr	r2, [r4, #0]
 800b2ac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b2b0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b2b4:	d006      	beq.n	800b2c4 <_scanf_float+0x250>
 800b2b6:	0550      	lsls	r0, r2, #21
 800b2b8:	f57f af0c 	bpl.w	800b0d4 <_scanf_float+0x60>
 800b2bc:	f1b9 0f00 	cmp.w	r9, #0
 800b2c0:	f43f af0f 	beq.w	800b0e2 <_scanf_float+0x6e>
 800b2c4:	0591      	lsls	r1, r2, #22
 800b2c6:	bf58      	it	pl
 800b2c8:	9901      	ldrpl	r1, [sp, #4]
 800b2ca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b2ce:	bf58      	it	pl
 800b2d0:	eba9 0101 	subpl.w	r1, r9, r1
 800b2d4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b2d8:	bf58      	it	pl
 800b2da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b2de:	6022      	str	r2, [r4, #0]
 800b2e0:	f04f 0900 	mov.w	r9, #0
 800b2e4:	e78a      	b.n	800b1fc <_scanf_float+0x188>
 800b2e6:	f04f 0a03 	mov.w	sl, #3
 800b2ea:	e787      	b.n	800b1fc <_scanf_float+0x188>
 800b2ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b2f0:	4639      	mov	r1, r7
 800b2f2:	4640      	mov	r0, r8
 800b2f4:	4798      	blx	r3
 800b2f6:	2800      	cmp	r0, #0
 800b2f8:	f43f aedf 	beq.w	800b0ba <_scanf_float+0x46>
 800b2fc:	e6ea      	b.n	800b0d4 <_scanf_float+0x60>
 800b2fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b302:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b306:	463a      	mov	r2, r7
 800b308:	4640      	mov	r0, r8
 800b30a:	4798      	blx	r3
 800b30c:	6923      	ldr	r3, [r4, #16]
 800b30e:	3b01      	subs	r3, #1
 800b310:	6123      	str	r3, [r4, #16]
 800b312:	e6ec      	b.n	800b0ee <_scanf_float+0x7a>
 800b314:	1e6b      	subs	r3, r5, #1
 800b316:	2b06      	cmp	r3, #6
 800b318:	d825      	bhi.n	800b366 <_scanf_float+0x2f2>
 800b31a:	2d02      	cmp	r5, #2
 800b31c:	d836      	bhi.n	800b38c <_scanf_float+0x318>
 800b31e:	455e      	cmp	r6, fp
 800b320:	f67f aee8 	bls.w	800b0f4 <_scanf_float+0x80>
 800b324:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b328:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b32c:	463a      	mov	r2, r7
 800b32e:	4640      	mov	r0, r8
 800b330:	4798      	blx	r3
 800b332:	6923      	ldr	r3, [r4, #16]
 800b334:	3b01      	subs	r3, #1
 800b336:	6123      	str	r3, [r4, #16]
 800b338:	e7f1      	b.n	800b31e <_scanf_float+0x2aa>
 800b33a:	9802      	ldr	r0, [sp, #8]
 800b33c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b340:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b344:	9002      	str	r0, [sp, #8]
 800b346:	463a      	mov	r2, r7
 800b348:	4640      	mov	r0, r8
 800b34a:	4798      	blx	r3
 800b34c:	6923      	ldr	r3, [r4, #16]
 800b34e:	3b01      	subs	r3, #1
 800b350:	6123      	str	r3, [r4, #16]
 800b352:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b356:	fa5f fa8a 	uxtb.w	sl, sl
 800b35a:	f1ba 0f02 	cmp.w	sl, #2
 800b35e:	d1ec      	bne.n	800b33a <_scanf_float+0x2c6>
 800b360:	3d03      	subs	r5, #3
 800b362:	b2ed      	uxtb	r5, r5
 800b364:	1b76      	subs	r6, r6, r5
 800b366:	6823      	ldr	r3, [r4, #0]
 800b368:	05da      	lsls	r2, r3, #23
 800b36a:	d52f      	bpl.n	800b3cc <_scanf_float+0x358>
 800b36c:	055b      	lsls	r3, r3, #21
 800b36e:	d510      	bpl.n	800b392 <_scanf_float+0x31e>
 800b370:	455e      	cmp	r6, fp
 800b372:	f67f aebf 	bls.w	800b0f4 <_scanf_float+0x80>
 800b376:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b37a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b37e:	463a      	mov	r2, r7
 800b380:	4640      	mov	r0, r8
 800b382:	4798      	blx	r3
 800b384:	6923      	ldr	r3, [r4, #16]
 800b386:	3b01      	subs	r3, #1
 800b388:	6123      	str	r3, [r4, #16]
 800b38a:	e7f1      	b.n	800b370 <_scanf_float+0x2fc>
 800b38c:	46aa      	mov	sl, r5
 800b38e:	9602      	str	r6, [sp, #8]
 800b390:	e7df      	b.n	800b352 <_scanf_float+0x2de>
 800b392:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b396:	6923      	ldr	r3, [r4, #16]
 800b398:	2965      	cmp	r1, #101	; 0x65
 800b39a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b39e:	f106 35ff 	add.w	r5, r6, #4294967295
 800b3a2:	6123      	str	r3, [r4, #16]
 800b3a4:	d00c      	beq.n	800b3c0 <_scanf_float+0x34c>
 800b3a6:	2945      	cmp	r1, #69	; 0x45
 800b3a8:	d00a      	beq.n	800b3c0 <_scanf_float+0x34c>
 800b3aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b3ae:	463a      	mov	r2, r7
 800b3b0:	4640      	mov	r0, r8
 800b3b2:	4798      	blx	r3
 800b3b4:	6923      	ldr	r3, [r4, #16]
 800b3b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b3ba:	3b01      	subs	r3, #1
 800b3bc:	1eb5      	subs	r5, r6, #2
 800b3be:	6123      	str	r3, [r4, #16]
 800b3c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b3c4:	463a      	mov	r2, r7
 800b3c6:	4640      	mov	r0, r8
 800b3c8:	4798      	blx	r3
 800b3ca:	462e      	mov	r6, r5
 800b3cc:	6825      	ldr	r5, [r4, #0]
 800b3ce:	f015 0510 	ands.w	r5, r5, #16
 800b3d2:	d158      	bne.n	800b486 <_scanf_float+0x412>
 800b3d4:	7035      	strb	r5, [r6, #0]
 800b3d6:	6823      	ldr	r3, [r4, #0]
 800b3d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b3dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3e0:	d11c      	bne.n	800b41c <_scanf_float+0x3a8>
 800b3e2:	9b01      	ldr	r3, [sp, #4]
 800b3e4:	454b      	cmp	r3, r9
 800b3e6:	eba3 0209 	sub.w	r2, r3, r9
 800b3ea:	d124      	bne.n	800b436 <_scanf_float+0x3c2>
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	4659      	mov	r1, fp
 800b3f0:	4640      	mov	r0, r8
 800b3f2:	f000 ff2b 	bl	800c24c <_strtod_r>
 800b3f6:	9b03      	ldr	r3, [sp, #12]
 800b3f8:	6821      	ldr	r1, [r4, #0]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f011 0f02 	tst.w	r1, #2
 800b400:	ec57 6b10 	vmov	r6, r7, d0
 800b404:	f103 0204 	add.w	r2, r3, #4
 800b408:	d020      	beq.n	800b44c <_scanf_float+0x3d8>
 800b40a:	9903      	ldr	r1, [sp, #12]
 800b40c:	600a      	str	r2, [r1, #0]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	e9c3 6700 	strd	r6, r7, [r3]
 800b414:	68e3      	ldr	r3, [r4, #12]
 800b416:	3301      	adds	r3, #1
 800b418:	60e3      	str	r3, [r4, #12]
 800b41a:	e66c      	b.n	800b0f6 <_scanf_float+0x82>
 800b41c:	9b04      	ldr	r3, [sp, #16]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d0e4      	beq.n	800b3ec <_scanf_float+0x378>
 800b422:	9905      	ldr	r1, [sp, #20]
 800b424:	230a      	movs	r3, #10
 800b426:	462a      	mov	r2, r5
 800b428:	3101      	adds	r1, #1
 800b42a:	4640      	mov	r0, r8
 800b42c:	f000 ff98 	bl	800c360 <_strtol_r>
 800b430:	9b04      	ldr	r3, [sp, #16]
 800b432:	9e05      	ldr	r6, [sp, #20]
 800b434:	1ac2      	subs	r2, r0, r3
 800b436:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b43a:	429e      	cmp	r6, r3
 800b43c:	bf28      	it	cs
 800b43e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b442:	4912      	ldr	r1, [pc, #72]	; (800b48c <_scanf_float+0x418>)
 800b444:	4630      	mov	r0, r6
 800b446:	f000 f8b9 	bl	800b5bc <siprintf>
 800b44a:	e7cf      	b.n	800b3ec <_scanf_float+0x378>
 800b44c:	f011 0f04 	tst.w	r1, #4
 800b450:	9903      	ldr	r1, [sp, #12]
 800b452:	600a      	str	r2, [r1, #0]
 800b454:	d1db      	bne.n	800b40e <_scanf_float+0x39a>
 800b456:	f8d3 8000 	ldr.w	r8, [r3]
 800b45a:	ee10 2a10 	vmov	r2, s0
 800b45e:	ee10 0a10 	vmov	r0, s0
 800b462:	463b      	mov	r3, r7
 800b464:	4639      	mov	r1, r7
 800b466:	f7f5 fb61 	bl	8000b2c <__aeabi_dcmpun>
 800b46a:	b128      	cbz	r0, 800b478 <_scanf_float+0x404>
 800b46c:	4808      	ldr	r0, [pc, #32]	; (800b490 <_scanf_float+0x41c>)
 800b46e:	f000 f89f 	bl	800b5b0 <nanf>
 800b472:	ed88 0a00 	vstr	s0, [r8]
 800b476:	e7cd      	b.n	800b414 <_scanf_float+0x3a0>
 800b478:	4630      	mov	r0, r6
 800b47a:	4639      	mov	r1, r7
 800b47c:	f7f5 fbb4 	bl	8000be8 <__aeabi_d2f>
 800b480:	f8c8 0000 	str.w	r0, [r8]
 800b484:	e7c6      	b.n	800b414 <_scanf_float+0x3a0>
 800b486:	2500      	movs	r5, #0
 800b488:	e635      	b.n	800b0f6 <_scanf_float+0x82>
 800b48a:	bf00      	nop
 800b48c:	0800f210 	.word	0x0800f210
 800b490:	0800f688 	.word	0x0800f688

0800b494 <iprintf>:
 800b494:	b40f      	push	{r0, r1, r2, r3}
 800b496:	4b0a      	ldr	r3, [pc, #40]	; (800b4c0 <iprintf+0x2c>)
 800b498:	b513      	push	{r0, r1, r4, lr}
 800b49a:	681c      	ldr	r4, [r3, #0]
 800b49c:	b124      	cbz	r4, 800b4a8 <iprintf+0x14>
 800b49e:	69a3      	ldr	r3, [r4, #24]
 800b4a0:	b913      	cbnz	r3, 800b4a8 <iprintf+0x14>
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	f001 ffb2 	bl	800d40c <__sinit>
 800b4a8:	ab05      	add	r3, sp, #20
 800b4aa:	9a04      	ldr	r2, [sp, #16]
 800b4ac:	68a1      	ldr	r1, [r4, #8]
 800b4ae:	9301      	str	r3, [sp, #4]
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	f003 fb37 	bl	800eb24 <_vfiprintf_r>
 800b4b6:	b002      	add	sp, #8
 800b4b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4bc:	b004      	add	sp, #16
 800b4be:	4770      	bx	lr
 800b4c0:	20000034 	.word	0x20000034

0800b4c4 <_puts_r>:
 800b4c4:	b570      	push	{r4, r5, r6, lr}
 800b4c6:	460e      	mov	r6, r1
 800b4c8:	4605      	mov	r5, r0
 800b4ca:	b118      	cbz	r0, 800b4d4 <_puts_r+0x10>
 800b4cc:	6983      	ldr	r3, [r0, #24]
 800b4ce:	b90b      	cbnz	r3, 800b4d4 <_puts_r+0x10>
 800b4d0:	f001 ff9c 	bl	800d40c <__sinit>
 800b4d4:	69ab      	ldr	r3, [r5, #24]
 800b4d6:	68ac      	ldr	r4, [r5, #8]
 800b4d8:	b913      	cbnz	r3, 800b4e0 <_puts_r+0x1c>
 800b4da:	4628      	mov	r0, r5
 800b4dc:	f001 ff96 	bl	800d40c <__sinit>
 800b4e0:	4b2c      	ldr	r3, [pc, #176]	; (800b594 <_puts_r+0xd0>)
 800b4e2:	429c      	cmp	r4, r3
 800b4e4:	d120      	bne.n	800b528 <_puts_r+0x64>
 800b4e6:	686c      	ldr	r4, [r5, #4]
 800b4e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4ea:	07db      	lsls	r3, r3, #31
 800b4ec:	d405      	bmi.n	800b4fa <_puts_r+0x36>
 800b4ee:	89a3      	ldrh	r3, [r4, #12]
 800b4f0:	0598      	lsls	r0, r3, #22
 800b4f2:	d402      	bmi.n	800b4fa <_puts_r+0x36>
 800b4f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4f6:	f002 fb9a 	bl	800dc2e <__retarget_lock_acquire_recursive>
 800b4fa:	89a3      	ldrh	r3, [r4, #12]
 800b4fc:	0719      	lsls	r1, r3, #28
 800b4fe:	d51d      	bpl.n	800b53c <_puts_r+0x78>
 800b500:	6923      	ldr	r3, [r4, #16]
 800b502:	b1db      	cbz	r3, 800b53c <_puts_r+0x78>
 800b504:	3e01      	subs	r6, #1
 800b506:	68a3      	ldr	r3, [r4, #8]
 800b508:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b50c:	3b01      	subs	r3, #1
 800b50e:	60a3      	str	r3, [r4, #8]
 800b510:	bb39      	cbnz	r1, 800b562 <_puts_r+0x9e>
 800b512:	2b00      	cmp	r3, #0
 800b514:	da38      	bge.n	800b588 <_puts_r+0xc4>
 800b516:	4622      	mov	r2, r4
 800b518:	210a      	movs	r1, #10
 800b51a:	4628      	mov	r0, r5
 800b51c:	f000 ff22 	bl	800c364 <__swbuf_r>
 800b520:	3001      	adds	r0, #1
 800b522:	d011      	beq.n	800b548 <_puts_r+0x84>
 800b524:	250a      	movs	r5, #10
 800b526:	e011      	b.n	800b54c <_puts_r+0x88>
 800b528:	4b1b      	ldr	r3, [pc, #108]	; (800b598 <_puts_r+0xd4>)
 800b52a:	429c      	cmp	r4, r3
 800b52c:	d101      	bne.n	800b532 <_puts_r+0x6e>
 800b52e:	68ac      	ldr	r4, [r5, #8]
 800b530:	e7da      	b.n	800b4e8 <_puts_r+0x24>
 800b532:	4b1a      	ldr	r3, [pc, #104]	; (800b59c <_puts_r+0xd8>)
 800b534:	429c      	cmp	r4, r3
 800b536:	bf08      	it	eq
 800b538:	68ec      	ldreq	r4, [r5, #12]
 800b53a:	e7d5      	b.n	800b4e8 <_puts_r+0x24>
 800b53c:	4621      	mov	r1, r4
 800b53e:	4628      	mov	r0, r5
 800b540:	f000 ff62 	bl	800c408 <__swsetup_r>
 800b544:	2800      	cmp	r0, #0
 800b546:	d0dd      	beq.n	800b504 <_puts_r+0x40>
 800b548:	f04f 35ff 	mov.w	r5, #4294967295
 800b54c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b54e:	07da      	lsls	r2, r3, #31
 800b550:	d405      	bmi.n	800b55e <_puts_r+0x9a>
 800b552:	89a3      	ldrh	r3, [r4, #12]
 800b554:	059b      	lsls	r3, r3, #22
 800b556:	d402      	bmi.n	800b55e <_puts_r+0x9a>
 800b558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b55a:	f002 fb69 	bl	800dc30 <__retarget_lock_release_recursive>
 800b55e:	4628      	mov	r0, r5
 800b560:	bd70      	pop	{r4, r5, r6, pc}
 800b562:	2b00      	cmp	r3, #0
 800b564:	da04      	bge.n	800b570 <_puts_r+0xac>
 800b566:	69a2      	ldr	r2, [r4, #24]
 800b568:	429a      	cmp	r2, r3
 800b56a:	dc06      	bgt.n	800b57a <_puts_r+0xb6>
 800b56c:	290a      	cmp	r1, #10
 800b56e:	d004      	beq.n	800b57a <_puts_r+0xb6>
 800b570:	6823      	ldr	r3, [r4, #0]
 800b572:	1c5a      	adds	r2, r3, #1
 800b574:	6022      	str	r2, [r4, #0]
 800b576:	7019      	strb	r1, [r3, #0]
 800b578:	e7c5      	b.n	800b506 <_puts_r+0x42>
 800b57a:	4622      	mov	r2, r4
 800b57c:	4628      	mov	r0, r5
 800b57e:	f000 fef1 	bl	800c364 <__swbuf_r>
 800b582:	3001      	adds	r0, #1
 800b584:	d1bf      	bne.n	800b506 <_puts_r+0x42>
 800b586:	e7df      	b.n	800b548 <_puts_r+0x84>
 800b588:	6823      	ldr	r3, [r4, #0]
 800b58a:	250a      	movs	r5, #10
 800b58c:	1c5a      	adds	r2, r3, #1
 800b58e:	6022      	str	r2, [r4, #0]
 800b590:	701d      	strb	r5, [r3, #0]
 800b592:	e7db      	b.n	800b54c <_puts_r+0x88>
 800b594:	0800f420 	.word	0x0800f420
 800b598:	0800f440 	.word	0x0800f440
 800b59c:	0800f400 	.word	0x0800f400

0800b5a0 <puts>:
 800b5a0:	4b02      	ldr	r3, [pc, #8]	; (800b5ac <puts+0xc>)
 800b5a2:	4601      	mov	r1, r0
 800b5a4:	6818      	ldr	r0, [r3, #0]
 800b5a6:	f7ff bf8d 	b.w	800b4c4 <_puts_r>
 800b5aa:	bf00      	nop
 800b5ac:	20000034 	.word	0x20000034

0800b5b0 <nanf>:
 800b5b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b5b8 <nanf+0x8>
 800b5b4:	4770      	bx	lr
 800b5b6:	bf00      	nop
 800b5b8:	7fc00000 	.word	0x7fc00000

0800b5bc <siprintf>:
 800b5bc:	b40e      	push	{r1, r2, r3}
 800b5be:	b500      	push	{lr}
 800b5c0:	b09c      	sub	sp, #112	; 0x70
 800b5c2:	ab1d      	add	r3, sp, #116	; 0x74
 800b5c4:	9002      	str	r0, [sp, #8]
 800b5c6:	9006      	str	r0, [sp, #24]
 800b5c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b5cc:	4809      	ldr	r0, [pc, #36]	; (800b5f4 <siprintf+0x38>)
 800b5ce:	9107      	str	r1, [sp, #28]
 800b5d0:	9104      	str	r1, [sp, #16]
 800b5d2:	4909      	ldr	r1, [pc, #36]	; (800b5f8 <siprintf+0x3c>)
 800b5d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5d8:	9105      	str	r1, [sp, #20]
 800b5da:	6800      	ldr	r0, [r0, #0]
 800b5dc:	9301      	str	r3, [sp, #4]
 800b5de:	a902      	add	r1, sp, #8
 800b5e0:	f003 f976 	bl	800e8d0 <_svfiprintf_r>
 800b5e4:	9b02      	ldr	r3, [sp, #8]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	701a      	strb	r2, [r3, #0]
 800b5ea:	b01c      	add	sp, #112	; 0x70
 800b5ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5f0:	b003      	add	sp, #12
 800b5f2:	4770      	bx	lr
 800b5f4:	20000034 	.word	0x20000034
 800b5f8:	ffff0208 	.word	0xffff0208

0800b5fc <sulp>:
 800b5fc:	b570      	push	{r4, r5, r6, lr}
 800b5fe:	4604      	mov	r4, r0
 800b600:	460d      	mov	r5, r1
 800b602:	ec45 4b10 	vmov	d0, r4, r5
 800b606:	4616      	mov	r6, r2
 800b608:	f002 fefe 	bl	800e408 <__ulp>
 800b60c:	ec51 0b10 	vmov	r0, r1, d0
 800b610:	b17e      	cbz	r6, 800b632 <sulp+0x36>
 800b612:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b616:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	dd09      	ble.n	800b632 <sulp+0x36>
 800b61e:	051b      	lsls	r3, r3, #20
 800b620:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b624:	2400      	movs	r4, #0
 800b626:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b62a:	4622      	mov	r2, r4
 800b62c:	462b      	mov	r3, r5
 800b62e:	f7f4 ffe3 	bl	80005f8 <__aeabi_dmul>
 800b632:	bd70      	pop	{r4, r5, r6, pc}
 800b634:	0000      	movs	r0, r0
	...

0800b638 <_strtod_l>:
 800b638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b63c:	b0a3      	sub	sp, #140	; 0x8c
 800b63e:	461f      	mov	r7, r3
 800b640:	2300      	movs	r3, #0
 800b642:	931e      	str	r3, [sp, #120]	; 0x78
 800b644:	4ba4      	ldr	r3, [pc, #656]	; (800b8d8 <_strtod_l+0x2a0>)
 800b646:	9219      	str	r2, [sp, #100]	; 0x64
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	9307      	str	r3, [sp, #28]
 800b64c:	4604      	mov	r4, r0
 800b64e:	4618      	mov	r0, r3
 800b650:	4688      	mov	r8, r1
 800b652:	f7f4 fdbd 	bl	80001d0 <strlen>
 800b656:	f04f 0a00 	mov.w	sl, #0
 800b65a:	4605      	mov	r5, r0
 800b65c:	f04f 0b00 	mov.w	fp, #0
 800b660:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b664:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b666:	781a      	ldrb	r2, [r3, #0]
 800b668:	2a2b      	cmp	r2, #43	; 0x2b
 800b66a:	d04c      	beq.n	800b706 <_strtod_l+0xce>
 800b66c:	d839      	bhi.n	800b6e2 <_strtod_l+0xaa>
 800b66e:	2a0d      	cmp	r2, #13
 800b670:	d832      	bhi.n	800b6d8 <_strtod_l+0xa0>
 800b672:	2a08      	cmp	r2, #8
 800b674:	d832      	bhi.n	800b6dc <_strtod_l+0xa4>
 800b676:	2a00      	cmp	r2, #0
 800b678:	d03c      	beq.n	800b6f4 <_strtod_l+0xbc>
 800b67a:	2300      	movs	r3, #0
 800b67c:	930e      	str	r3, [sp, #56]	; 0x38
 800b67e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b680:	7833      	ldrb	r3, [r6, #0]
 800b682:	2b30      	cmp	r3, #48	; 0x30
 800b684:	f040 80b4 	bne.w	800b7f0 <_strtod_l+0x1b8>
 800b688:	7873      	ldrb	r3, [r6, #1]
 800b68a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b68e:	2b58      	cmp	r3, #88	; 0x58
 800b690:	d16c      	bne.n	800b76c <_strtod_l+0x134>
 800b692:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b694:	9301      	str	r3, [sp, #4]
 800b696:	ab1e      	add	r3, sp, #120	; 0x78
 800b698:	9702      	str	r7, [sp, #8]
 800b69a:	9300      	str	r3, [sp, #0]
 800b69c:	4a8f      	ldr	r2, [pc, #572]	; (800b8dc <_strtod_l+0x2a4>)
 800b69e:	ab1f      	add	r3, sp, #124	; 0x7c
 800b6a0:	a91d      	add	r1, sp, #116	; 0x74
 800b6a2:	4620      	mov	r0, r4
 800b6a4:	f001 ffb6 	bl	800d614 <__gethex>
 800b6a8:	f010 0707 	ands.w	r7, r0, #7
 800b6ac:	4605      	mov	r5, r0
 800b6ae:	d005      	beq.n	800b6bc <_strtod_l+0x84>
 800b6b0:	2f06      	cmp	r7, #6
 800b6b2:	d12a      	bne.n	800b70a <_strtod_l+0xd2>
 800b6b4:	3601      	adds	r6, #1
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	961d      	str	r6, [sp, #116]	; 0x74
 800b6ba:	930e      	str	r3, [sp, #56]	; 0x38
 800b6bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	f040 8596 	bne.w	800c1f0 <_strtod_l+0xbb8>
 800b6c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6c6:	b1db      	cbz	r3, 800b700 <_strtod_l+0xc8>
 800b6c8:	4652      	mov	r2, sl
 800b6ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b6ce:	ec43 2b10 	vmov	d0, r2, r3
 800b6d2:	b023      	add	sp, #140	; 0x8c
 800b6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6d8:	2a20      	cmp	r2, #32
 800b6da:	d1ce      	bne.n	800b67a <_strtod_l+0x42>
 800b6dc:	3301      	adds	r3, #1
 800b6de:	931d      	str	r3, [sp, #116]	; 0x74
 800b6e0:	e7c0      	b.n	800b664 <_strtod_l+0x2c>
 800b6e2:	2a2d      	cmp	r2, #45	; 0x2d
 800b6e4:	d1c9      	bne.n	800b67a <_strtod_l+0x42>
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	920e      	str	r2, [sp, #56]	; 0x38
 800b6ea:	1c5a      	adds	r2, r3, #1
 800b6ec:	921d      	str	r2, [sp, #116]	; 0x74
 800b6ee:	785b      	ldrb	r3, [r3, #1]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d1c4      	bne.n	800b67e <_strtod_l+0x46>
 800b6f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b6f6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	f040 8576 	bne.w	800c1ec <_strtod_l+0xbb4>
 800b700:	4652      	mov	r2, sl
 800b702:	465b      	mov	r3, fp
 800b704:	e7e3      	b.n	800b6ce <_strtod_l+0x96>
 800b706:	2200      	movs	r2, #0
 800b708:	e7ee      	b.n	800b6e8 <_strtod_l+0xb0>
 800b70a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b70c:	b13a      	cbz	r2, 800b71e <_strtod_l+0xe6>
 800b70e:	2135      	movs	r1, #53	; 0x35
 800b710:	a820      	add	r0, sp, #128	; 0x80
 800b712:	f002 ff84 	bl	800e61e <__copybits>
 800b716:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b718:	4620      	mov	r0, r4
 800b71a:	f002 fb49 	bl	800ddb0 <_Bfree>
 800b71e:	3f01      	subs	r7, #1
 800b720:	2f05      	cmp	r7, #5
 800b722:	d807      	bhi.n	800b734 <_strtod_l+0xfc>
 800b724:	e8df f007 	tbb	[pc, r7]
 800b728:	1d180b0e 	.word	0x1d180b0e
 800b72c:	030e      	.short	0x030e
 800b72e:	f04f 0b00 	mov.w	fp, #0
 800b732:	46da      	mov	sl, fp
 800b734:	0728      	lsls	r0, r5, #28
 800b736:	d5c1      	bpl.n	800b6bc <_strtod_l+0x84>
 800b738:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b73c:	e7be      	b.n	800b6bc <_strtod_l+0x84>
 800b73e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800b742:	e7f7      	b.n	800b734 <_strtod_l+0xfc>
 800b744:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800b748:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b74a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b74e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b752:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b756:	e7ed      	b.n	800b734 <_strtod_l+0xfc>
 800b758:	f8df b184 	ldr.w	fp, [pc, #388]	; 800b8e0 <_strtod_l+0x2a8>
 800b75c:	f04f 0a00 	mov.w	sl, #0
 800b760:	e7e8      	b.n	800b734 <_strtod_l+0xfc>
 800b762:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b766:	f04f 3aff 	mov.w	sl, #4294967295
 800b76a:	e7e3      	b.n	800b734 <_strtod_l+0xfc>
 800b76c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b76e:	1c5a      	adds	r2, r3, #1
 800b770:	921d      	str	r2, [sp, #116]	; 0x74
 800b772:	785b      	ldrb	r3, [r3, #1]
 800b774:	2b30      	cmp	r3, #48	; 0x30
 800b776:	d0f9      	beq.n	800b76c <_strtod_l+0x134>
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d09f      	beq.n	800b6bc <_strtod_l+0x84>
 800b77c:	2301      	movs	r3, #1
 800b77e:	f04f 0900 	mov.w	r9, #0
 800b782:	9304      	str	r3, [sp, #16]
 800b784:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b786:	930a      	str	r3, [sp, #40]	; 0x28
 800b788:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b78c:	464f      	mov	r7, r9
 800b78e:	220a      	movs	r2, #10
 800b790:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b792:	7806      	ldrb	r6, [r0, #0]
 800b794:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b798:	b2d9      	uxtb	r1, r3
 800b79a:	2909      	cmp	r1, #9
 800b79c:	d92a      	bls.n	800b7f4 <_strtod_l+0x1bc>
 800b79e:	9907      	ldr	r1, [sp, #28]
 800b7a0:	462a      	mov	r2, r5
 800b7a2:	f003 fb4c 	bl	800ee3e <strncmp>
 800b7a6:	b398      	cbz	r0, 800b810 <_strtod_l+0x1d8>
 800b7a8:	2000      	movs	r0, #0
 800b7aa:	4633      	mov	r3, r6
 800b7ac:	463d      	mov	r5, r7
 800b7ae:	9007      	str	r0, [sp, #28]
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	2b65      	cmp	r3, #101	; 0x65
 800b7b4:	d001      	beq.n	800b7ba <_strtod_l+0x182>
 800b7b6:	2b45      	cmp	r3, #69	; 0x45
 800b7b8:	d118      	bne.n	800b7ec <_strtod_l+0x1b4>
 800b7ba:	b91d      	cbnz	r5, 800b7c4 <_strtod_l+0x18c>
 800b7bc:	9b04      	ldr	r3, [sp, #16]
 800b7be:	4303      	orrs	r3, r0
 800b7c0:	d098      	beq.n	800b6f4 <_strtod_l+0xbc>
 800b7c2:	2500      	movs	r5, #0
 800b7c4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800b7c8:	f108 0301 	add.w	r3, r8, #1
 800b7cc:	931d      	str	r3, [sp, #116]	; 0x74
 800b7ce:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b7d2:	2b2b      	cmp	r3, #43	; 0x2b
 800b7d4:	d075      	beq.n	800b8c2 <_strtod_l+0x28a>
 800b7d6:	2b2d      	cmp	r3, #45	; 0x2d
 800b7d8:	d07b      	beq.n	800b8d2 <_strtod_l+0x29a>
 800b7da:	f04f 0c00 	mov.w	ip, #0
 800b7de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b7e2:	2909      	cmp	r1, #9
 800b7e4:	f240 8082 	bls.w	800b8ec <_strtod_l+0x2b4>
 800b7e8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b7ec:	2600      	movs	r6, #0
 800b7ee:	e09d      	b.n	800b92c <_strtod_l+0x2f4>
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	e7c4      	b.n	800b77e <_strtod_l+0x146>
 800b7f4:	2f08      	cmp	r7, #8
 800b7f6:	bfd8      	it	le
 800b7f8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b7fa:	f100 0001 	add.w	r0, r0, #1
 800b7fe:	bfda      	itte	le
 800b800:	fb02 3301 	mlale	r3, r2, r1, r3
 800b804:	9309      	strle	r3, [sp, #36]	; 0x24
 800b806:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b80a:	3701      	adds	r7, #1
 800b80c:	901d      	str	r0, [sp, #116]	; 0x74
 800b80e:	e7bf      	b.n	800b790 <_strtod_l+0x158>
 800b810:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b812:	195a      	adds	r2, r3, r5
 800b814:	921d      	str	r2, [sp, #116]	; 0x74
 800b816:	5d5b      	ldrb	r3, [r3, r5]
 800b818:	2f00      	cmp	r7, #0
 800b81a:	d037      	beq.n	800b88c <_strtod_l+0x254>
 800b81c:	9007      	str	r0, [sp, #28]
 800b81e:	463d      	mov	r5, r7
 800b820:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b824:	2a09      	cmp	r2, #9
 800b826:	d912      	bls.n	800b84e <_strtod_l+0x216>
 800b828:	2201      	movs	r2, #1
 800b82a:	e7c2      	b.n	800b7b2 <_strtod_l+0x17a>
 800b82c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b82e:	1c5a      	adds	r2, r3, #1
 800b830:	921d      	str	r2, [sp, #116]	; 0x74
 800b832:	785b      	ldrb	r3, [r3, #1]
 800b834:	3001      	adds	r0, #1
 800b836:	2b30      	cmp	r3, #48	; 0x30
 800b838:	d0f8      	beq.n	800b82c <_strtod_l+0x1f4>
 800b83a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b83e:	2a08      	cmp	r2, #8
 800b840:	f200 84db 	bhi.w	800c1fa <_strtod_l+0xbc2>
 800b844:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b846:	9007      	str	r0, [sp, #28]
 800b848:	2000      	movs	r0, #0
 800b84a:	920a      	str	r2, [sp, #40]	; 0x28
 800b84c:	4605      	mov	r5, r0
 800b84e:	3b30      	subs	r3, #48	; 0x30
 800b850:	f100 0201 	add.w	r2, r0, #1
 800b854:	d014      	beq.n	800b880 <_strtod_l+0x248>
 800b856:	9907      	ldr	r1, [sp, #28]
 800b858:	4411      	add	r1, r2
 800b85a:	9107      	str	r1, [sp, #28]
 800b85c:	462a      	mov	r2, r5
 800b85e:	eb00 0e05 	add.w	lr, r0, r5
 800b862:	210a      	movs	r1, #10
 800b864:	4572      	cmp	r2, lr
 800b866:	d113      	bne.n	800b890 <_strtod_l+0x258>
 800b868:	182a      	adds	r2, r5, r0
 800b86a:	2a08      	cmp	r2, #8
 800b86c:	f105 0501 	add.w	r5, r5, #1
 800b870:	4405      	add	r5, r0
 800b872:	dc1c      	bgt.n	800b8ae <_strtod_l+0x276>
 800b874:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b876:	220a      	movs	r2, #10
 800b878:	fb02 3301 	mla	r3, r2, r1, r3
 800b87c:	9309      	str	r3, [sp, #36]	; 0x24
 800b87e:	2200      	movs	r2, #0
 800b880:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b882:	1c59      	adds	r1, r3, #1
 800b884:	911d      	str	r1, [sp, #116]	; 0x74
 800b886:	785b      	ldrb	r3, [r3, #1]
 800b888:	4610      	mov	r0, r2
 800b88a:	e7c9      	b.n	800b820 <_strtod_l+0x1e8>
 800b88c:	4638      	mov	r0, r7
 800b88e:	e7d2      	b.n	800b836 <_strtod_l+0x1fe>
 800b890:	2a08      	cmp	r2, #8
 800b892:	dc04      	bgt.n	800b89e <_strtod_l+0x266>
 800b894:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b896:	434e      	muls	r6, r1
 800b898:	9609      	str	r6, [sp, #36]	; 0x24
 800b89a:	3201      	adds	r2, #1
 800b89c:	e7e2      	b.n	800b864 <_strtod_l+0x22c>
 800b89e:	f102 0c01 	add.w	ip, r2, #1
 800b8a2:	f1bc 0f10 	cmp.w	ip, #16
 800b8a6:	bfd8      	it	le
 800b8a8:	fb01 f909 	mulle.w	r9, r1, r9
 800b8ac:	e7f5      	b.n	800b89a <_strtod_l+0x262>
 800b8ae:	2d10      	cmp	r5, #16
 800b8b0:	bfdc      	itt	le
 800b8b2:	220a      	movle	r2, #10
 800b8b4:	fb02 3909 	mlale	r9, r2, r9, r3
 800b8b8:	e7e1      	b.n	800b87e <_strtod_l+0x246>
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	9307      	str	r3, [sp, #28]
 800b8be:	2201      	movs	r2, #1
 800b8c0:	e77c      	b.n	800b7bc <_strtod_l+0x184>
 800b8c2:	f04f 0c00 	mov.w	ip, #0
 800b8c6:	f108 0302 	add.w	r3, r8, #2
 800b8ca:	931d      	str	r3, [sp, #116]	; 0x74
 800b8cc:	f898 3002 	ldrb.w	r3, [r8, #2]
 800b8d0:	e785      	b.n	800b7de <_strtod_l+0x1a6>
 800b8d2:	f04f 0c01 	mov.w	ip, #1
 800b8d6:	e7f6      	b.n	800b8c6 <_strtod_l+0x28e>
 800b8d8:	0800f4cc 	.word	0x0800f4cc
 800b8dc:	0800f218 	.word	0x0800f218
 800b8e0:	7ff00000 	.word	0x7ff00000
 800b8e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b8e6:	1c59      	adds	r1, r3, #1
 800b8e8:	911d      	str	r1, [sp, #116]	; 0x74
 800b8ea:	785b      	ldrb	r3, [r3, #1]
 800b8ec:	2b30      	cmp	r3, #48	; 0x30
 800b8ee:	d0f9      	beq.n	800b8e4 <_strtod_l+0x2ac>
 800b8f0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800b8f4:	2908      	cmp	r1, #8
 800b8f6:	f63f af79 	bhi.w	800b7ec <_strtod_l+0x1b4>
 800b8fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b8fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b900:	9308      	str	r3, [sp, #32]
 800b902:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b904:	1c59      	adds	r1, r3, #1
 800b906:	911d      	str	r1, [sp, #116]	; 0x74
 800b908:	785b      	ldrb	r3, [r3, #1]
 800b90a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800b90e:	2e09      	cmp	r6, #9
 800b910:	d937      	bls.n	800b982 <_strtod_l+0x34a>
 800b912:	9e08      	ldr	r6, [sp, #32]
 800b914:	1b89      	subs	r1, r1, r6
 800b916:	2908      	cmp	r1, #8
 800b918:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b91c:	dc02      	bgt.n	800b924 <_strtod_l+0x2ec>
 800b91e:	4576      	cmp	r6, lr
 800b920:	bfa8      	it	ge
 800b922:	4676      	movge	r6, lr
 800b924:	f1bc 0f00 	cmp.w	ip, #0
 800b928:	d000      	beq.n	800b92c <_strtod_l+0x2f4>
 800b92a:	4276      	negs	r6, r6
 800b92c:	2d00      	cmp	r5, #0
 800b92e:	d14f      	bne.n	800b9d0 <_strtod_l+0x398>
 800b930:	9904      	ldr	r1, [sp, #16]
 800b932:	4301      	orrs	r1, r0
 800b934:	f47f aec2 	bne.w	800b6bc <_strtod_l+0x84>
 800b938:	2a00      	cmp	r2, #0
 800b93a:	f47f aedb 	bne.w	800b6f4 <_strtod_l+0xbc>
 800b93e:	2b69      	cmp	r3, #105	; 0x69
 800b940:	d027      	beq.n	800b992 <_strtod_l+0x35a>
 800b942:	dc24      	bgt.n	800b98e <_strtod_l+0x356>
 800b944:	2b49      	cmp	r3, #73	; 0x49
 800b946:	d024      	beq.n	800b992 <_strtod_l+0x35a>
 800b948:	2b4e      	cmp	r3, #78	; 0x4e
 800b94a:	f47f aed3 	bne.w	800b6f4 <_strtod_l+0xbc>
 800b94e:	499e      	ldr	r1, [pc, #632]	; (800bbc8 <_strtod_l+0x590>)
 800b950:	a81d      	add	r0, sp, #116	; 0x74
 800b952:	f002 f8b7 	bl	800dac4 <__match>
 800b956:	2800      	cmp	r0, #0
 800b958:	f43f aecc 	beq.w	800b6f4 <_strtod_l+0xbc>
 800b95c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	2b28      	cmp	r3, #40	; 0x28
 800b962:	d12d      	bne.n	800b9c0 <_strtod_l+0x388>
 800b964:	4999      	ldr	r1, [pc, #612]	; (800bbcc <_strtod_l+0x594>)
 800b966:	aa20      	add	r2, sp, #128	; 0x80
 800b968:	a81d      	add	r0, sp, #116	; 0x74
 800b96a:	f002 f8bf 	bl	800daec <__hexnan>
 800b96e:	2805      	cmp	r0, #5
 800b970:	d126      	bne.n	800b9c0 <_strtod_l+0x388>
 800b972:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b974:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800b978:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b97c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b980:	e69c      	b.n	800b6bc <_strtod_l+0x84>
 800b982:	210a      	movs	r1, #10
 800b984:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b988:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b98c:	e7b9      	b.n	800b902 <_strtod_l+0x2ca>
 800b98e:	2b6e      	cmp	r3, #110	; 0x6e
 800b990:	e7db      	b.n	800b94a <_strtod_l+0x312>
 800b992:	498f      	ldr	r1, [pc, #572]	; (800bbd0 <_strtod_l+0x598>)
 800b994:	a81d      	add	r0, sp, #116	; 0x74
 800b996:	f002 f895 	bl	800dac4 <__match>
 800b99a:	2800      	cmp	r0, #0
 800b99c:	f43f aeaa 	beq.w	800b6f4 <_strtod_l+0xbc>
 800b9a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b9a2:	498c      	ldr	r1, [pc, #560]	; (800bbd4 <_strtod_l+0x59c>)
 800b9a4:	3b01      	subs	r3, #1
 800b9a6:	a81d      	add	r0, sp, #116	; 0x74
 800b9a8:	931d      	str	r3, [sp, #116]	; 0x74
 800b9aa:	f002 f88b 	bl	800dac4 <__match>
 800b9ae:	b910      	cbnz	r0, 800b9b6 <_strtod_l+0x37e>
 800b9b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	931d      	str	r3, [sp, #116]	; 0x74
 800b9b6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800bbe4 <_strtod_l+0x5ac>
 800b9ba:	f04f 0a00 	mov.w	sl, #0
 800b9be:	e67d      	b.n	800b6bc <_strtod_l+0x84>
 800b9c0:	4885      	ldr	r0, [pc, #532]	; (800bbd8 <_strtod_l+0x5a0>)
 800b9c2:	f003 f9e1 	bl	800ed88 <nan>
 800b9c6:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b9ca:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b9ce:	e675      	b.n	800b6bc <_strtod_l+0x84>
 800b9d0:	9b07      	ldr	r3, [sp, #28]
 800b9d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9d4:	1af3      	subs	r3, r6, r3
 800b9d6:	2f00      	cmp	r7, #0
 800b9d8:	bf08      	it	eq
 800b9da:	462f      	moveq	r7, r5
 800b9dc:	2d10      	cmp	r5, #16
 800b9de:	9308      	str	r3, [sp, #32]
 800b9e0:	46a8      	mov	r8, r5
 800b9e2:	bfa8      	it	ge
 800b9e4:	f04f 0810 	movge.w	r8, #16
 800b9e8:	f7f4 fd8c 	bl	8000504 <__aeabi_ui2d>
 800b9ec:	2d09      	cmp	r5, #9
 800b9ee:	4682      	mov	sl, r0
 800b9f0:	468b      	mov	fp, r1
 800b9f2:	dd13      	ble.n	800ba1c <_strtod_l+0x3e4>
 800b9f4:	4b79      	ldr	r3, [pc, #484]	; (800bbdc <_strtod_l+0x5a4>)
 800b9f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b9fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b9fe:	f7f4 fdfb 	bl	80005f8 <__aeabi_dmul>
 800ba02:	4682      	mov	sl, r0
 800ba04:	4648      	mov	r0, r9
 800ba06:	468b      	mov	fp, r1
 800ba08:	f7f4 fd7c 	bl	8000504 <__aeabi_ui2d>
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	460b      	mov	r3, r1
 800ba10:	4650      	mov	r0, sl
 800ba12:	4659      	mov	r1, fp
 800ba14:	f7f4 fc3a 	bl	800028c <__adddf3>
 800ba18:	4682      	mov	sl, r0
 800ba1a:	468b      	mov	fp, r1
 800ba1c:	2d0f      	cmp	r5, #15
 800ba1e:	dc38      	bgt.n	800ba92 <_strtod_l+0x45a>
 800ba20:	9b08      	ldr	r3, [sp, #32]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	f43f ae4a 	beq.w	800b6bc <_strtod_l+0x84>
 800ba28:	dd24      	ble.n	800ba74 <_strtod_l+0x43c>
 800ba2a:	2b16      	cmp	r3, #22
 800ba2c:	dc0b      	bgt.n	800ba46 <_strtod_l+0x40e>
 800ba2e:	4d6b      	ldr	r5, [pc, #428]	; (800bbdc <_strtod_l+0x5a4>)
 800ba30:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800ba34:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ba38:	4652      	mov	r2, sl
 800ba3a:	465b      	mov	r3, fp
 800ba3c:	f7f4 fddc 	bl	80005f8 <__aeabi_dmul>
 800ba40:	4682      	mov	sl, r0
 800ba42:	468b      	mov	fp, r1
 800ba44:	e63a      	b.n	800b6bc <_strtod_l+0x84>
 800ba46:	9a08      	ldr	r2, [sp, #32]
 800ba48:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	db20      	blt.n	800ba92 <_strtod_l+0x45a>
 800ba50:	4c62      	ldr	r4, [pc, #392]	; (800bbdc <_strtod_l+0x5a4>)
 800ba52:	f1c5 050f 	rsb	r5, r5, #15
 800ba56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ba5a:	4652      	mov	r2, sl
 800ba5c:	465b      	mov	r3, fp
 800ba5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba62:	f7f4 fdc9 	bl	80005f8 <__aeabi_dmul>
 800ba66:	9b08      	ldr	r3, [sp, #32]
 800ba68:	1b5d      	subs	r5, r3, r5
 800ba6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ba6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ba72:	e7e3      	b.n	800ba3c <_strtod_l+0x404>
 800ba74:	9b08      	ldr	r3, [sp, #32]
 800ba76:	3316      	adds	r3, #22
 800ba78:	db0b      	blt.n	800ba92 <_strtod_l+0x45a>
 800ba7a:	9b07      	ldr	r3, [sp, #28]
 800ba7c:	4a57      	ldr	r2, [pc, #348]	; (800bbdc <_strtod_l+0x5a4>)
 800ba7e:	1b9e      	subs	r6, r3, r6
 800ba80:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800ba84:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ba88:	4650      	mov	r0, sl
 800ba8a:	4659      	mov	r1, fp
 800ba8c:	f7f4 fede 	bl	800084c <__aeabi_ddiv>
 800ba90:	e7d6      	b.n	800ba40 <_strtod_l+0x408>
 800ba92:	9b08      	ldr	r3, [sp, #32]
 800ba94:	eba5 0808 	sub.w	r8, r5, r8
 800ba98:	4498      	add	r8, r3
 800ba9a:	f1b8 0f00 	cmp.w	r8, #0
 800ba9e:	dd71      	ble.n	800bb84 <_strtod_l+0x54c>
 800baa0:	f018 030f 	ands.w	r3, r8, #15
 800baa4:	d00a      	beq.n	800babc <_strtod_l+0x484>
 800baa6:	494d      	ldr	r1, [pc, #308]	; (800bbdc <_strtod_l+0x5a4>)
 800baa8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800baac:	4652      	mov	r2, sl
 800baae:	465b      	mov	r3, fp
 800bab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bab4:	f7f4 fda0 	bl	80005f8 <__aeabi_dmul>
 800bab8:	4682      	mov	sl, r0
 800baba:	468b      	mov	fp, r1
 800babc:	f038 080f 	bics.w	r8, r8, #15
 800bac0:	d04d      	beq.n	800bb5e <_strtod_l+0x526>
 800bac2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bac6:	dd22      	ble.n	800bb0e <_strtod_l+0x4d6>
 800bac8:	2500      	movs	r5, #0
 800baca:	462e      	mov	r6, r5
 800bacc:	9509      	str	r5, [sp, #36]	; 0x24
 800bace:	9507      	str	r5, [sp, #28]
 800bad0:	2322      	movs	r3, #34	; 0x22
 800bad2:	f8df b110 	ldr.w	fp, [pc, #272]	; 800bbe4 <_strtod_l+0x5ac>
 800bad6:	6023      	str	r3, [r4, #0]
 800bad8:	f04f 0a00 	mov.w	sl, #0
 800badc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bade:	2b00      	cmp	r3, #0
 800bae0:	f43f adec 	beq.w	800b6bc <_strtod_l+0x84>
 800bae4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bae6:	4620      	mov	r0, r4
 800bae8:	f002 f962 	bl	800ddb0 <_Bfree>
 800baec:	9907      	ldr	r1, [sp, #28]
 800baee:	4620      	mov	r0, r4
 800baf0:	f002 f95e 	bl	800ddb0 <_Bfree>
 800baf4:	4631      	mov	r1, r6
 800baf6:	4620      	mov	r0, r4
 800baf8:	f002 f95a 	bl	800ddb0 <_Bfree>
 800bafc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bafe:	4620      	mov	r0, r4
 800bb00:	f002 f956 	bl	800ddb0 <_Bfree>
 800bb04:	4629      	mov	r1, r5
 800bb06:	4620      	mov	r0, r4
 800bb08:	f002 f952 	bl	800ddb0 <_Bfree>
 800bb0c:	e5d6      	b.n	800b6bc <_strtod_l+0x84>
 800bb0e:	2300      	movs	r3, #0
 800bb10:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bb14:	4650      	mov	r0, sl
 800bb16:	4659      	mov	r1, fp
 800bb18:	4699      	mov	r9, r3
 800bb1a:	f1b8 0f01 	cmp.w	r8, #1
 800bb1e:	dc21      	bgt.n	800bb64 <_strtod_l+0x52c>
 800bb20:	b10b      	cbz	r3, 800bb26 <_strtod_l+0x4ee>
 800bb22:	4682      	mov	sl, r0
 800bb24:	468b      	mov	fp, r1
 800bb26:	4b2e      	ldr	r3, [pc, #184]	; (800bbe0 <_strtod_l+0x5a8>)
 800bb28:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800bb2c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800bb30:	4652      	mov	r2, sl
 800bb32:	465b      	mov	r3, fp
 800bb34:	e9d9 0100 	ldrd	r0, r1, [r9]
 800bb38:	f7f4 fd5e 	bl	80005f8 <__aeabi_dmul>
 800bb3c:	4b29      	ldr	r3, [pc, #164]	; (800bbe4 <_strtod_l+0x5ac>)
 800bb3e:	460a      	mov	r2, r1
 800bb40:	400b      	ands	r3, r1
 800bb42:	4929      	ldr	r1, [pc, #164]	; (800bbe8 <_strtod_l+0x5b0>)
 800bb44:	428b      	cmp	r3, r1
 800bb46:	4682      	mov	sl, r0
 800bb48:	d8be      	bhi.n	800bac8 <_strtod_l+0x490>
 800bb4a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bb4e:	428b      	cmp	r3, r1
 800bb50:	bf86      	itte	hi
 800bb52:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800bbec <_strtod_l+0x5b4>
 800bb56:	f04f 3aff 	movhi.w	sl, #4294967295
 800bb5a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800bb5e:	2300      	movs	r3, #0
 800bb60:	9304      	str	r3, [sp, #16]
 800bb62:	e081      	b.n	800bc68 <_strtod_l+0x630>
 800bb64:	f018 0f01 	tst.w	r8, #1
 800bb68:	d007      	beq.n	800bb7a <_strtod_l+0x542>
 800bb6a:	4b1d      	ldr	r3, [pc, #116]	; (800bbe0 <_strtod_l+0x5a8>)
 800bb6c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800bb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb74:	f7f4 fd40 	bl	80005f8 <__aeabi_dmul>
 800bb78:	2301      	movs	r3, #1
 800bb7a:	f109 0901 	add.w	r9, r9, #1
 800bb7e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bb82:	e7ca      	b.n	800bb1a <_strtod_l+0x4e2>
 800bb84:	d0eb      	beq.n	800bb5e <_strtod_l+0x526>
 800bb86:	f1c8 0800 	rsb	r8, r8, #0
 800bb8a:	f018 020f 	ands.w	r2, r8, #15
 800bb8e:	d00a      	beq.n	800bba6 <_strtod_l+0x56e>
 800bb90:	4b12      	ldr	r3, [pc, #72]	; (800bbdc <_strtod_l+0x5a4>)
 800bb92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb96:	4650      	mov	r0, sl
 800bb98:	4659      	mov	r1, fp
 800bb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb9e:	f7f4 fe55 	bl	800084c <__aeabi_ddiv>
 800bba2:	4682      	mov	sl, r0
 800bba4:	468b      	mov	fp, r1
 800bba6:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bbaa:	d0d8      	beq.n	800bb5e <_strtod_l+0x526>
 800bbac:	f1b8 0f1f 	cmp.w	r8, #31
 800bbb0:	dd1e      	ble.n	800bbf0 <_strtod_l+0x5b8>
 800bbb2:	2500      	movs	r5, #0
 800bbb4:	462e      	mov	r6, r5
 800bbb6:	9509      	str	r5, [sp, #36]	; 0x24
 800bbb8:	9507      	str	r5, [sp, #28]
 800bbba:	2322      	movs	r3, #34	; 0x22
 800bbbc:	f04f 0a00 	mov.w	sl, #0
 800bbc0:	f04f 0b00 	mov.w	fp, #0
 800bbc4:	6023      	str	r3, [r4, #0]
 800bbc6:	e789      	b.n	800badc <_strtod_l+0x4a4>
 800bbc8:	0800f1e9 	.word	0x0800f1e9
 800bbcc:	0800f22c 	.word	0x0800f22c
 800bbd0:	0800f1e1 	.word	0x0800f1e1
 800bbd4:	0800f36c 	.word	0x0800f36c
 800bbd8:	0800f688 	.word	0x0800f688
 800bbdc:	0800f568 	.word	0x0800f568
 800bbe0:	0800f540 	.word	0x0800f540
 800bbe4:	7ff00000 	.word	0x7ff00000
 800bbe8:	7ca00000 	.word	0x7ca00000
 800bbec:	7fefffff 	.word	0x7fefffff
 800bbf0:	f018 0310 	ands.w	r3, r8, #16
 800bbf4:	bf18      	it	ne
 800bbf6:	236a      	movne	r3, #106	; 0x6a
 800bbf8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800bfb0 <_strtod_l+0x978>
 800bbfc:	9304      	str	r3, [sp, #16]
 800bbfe:	4650      	mov	r0, sl
 800bc00:	4659      	mov	r1, fp
 800bc02:	2300      	movs	r3, #0
 800bc04:	f018 0f01 	tst.w	r8, #1
 800bc08:	d004      	beq.n	800bc14 <_strtod_l+0x5dc>
 800bc0a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bc0e:	f7f4 fcf3 	bl	80005f8 <__aeabi_dmul>
 800bc12:	2301      	movs	r3, #1
 800bc14:	ea5f 0868 	movs.w	r8, r8, asr #1
 800bc18:	f109 0908 	add.w	r9, r9, #8
 800bc1c:	d1f2      	bne.n	800bc04 <_strtod_l+0x5cc>
 800bc1e:	b10b      	cbz	r3, 800bc24 <_strtod_l+0x5ec>
 800bc20:	4682      	mov	sl, r0
 800bc22:	468b      	mov	fp, r1
 800bc24:	9b04      	ldr	r3, [sp, #16]
 800bc26:	b1bb      	cbz	r3, 800bc58 <_strtod_l+0x620>
 800bc28:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800bc2c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	4659      	mov	r1, fp
 800bc34:	dd10      	ble.n	800bc58 <_strtod_l+0x620>
 800bc36:	2b1f      	cmp	r3, #31
 800bc38:	f340 8128 	ble.w	800be8c <_strtod_l+0x854>
 800bc3c:	2b34      	cmp	r3, #52	; 0x34
 800bc3e:	bfde      	ittt	le
 800bc40:	3b20      	suble	r3, #32
 800bc42:	f04f 32ff 	movle.w	r2, #4294967295
 800bc46:	fa02 f303 	lslle.w	r3, r2, r3
 800bc4a:	f04f 0a00 	mov.w	sl, #0
 800bc4e:	bfcc      	ite	gt
 800bc50:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800bc54:	ea03 0b01 	andle.w	fp, r3, r1
 800bc58:	2200      	movs	r2, #0
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	4650      	mov	r0, sl
 800bc5e:	4659      	mov	r1, fp
 800bc60:	f7f4 ff32 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	d1a4      	bne.n	800bbb2 <_strtod_l+0x57a>
 800bc68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc6a:	9300      	str	r3, [sp, #0]
 800bc6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bc6e:	462b      	mov	r3, r5
 800bc70:	463a      	mov	r2, r7
 800bc72:	4620      	mov	r0, r4
 800bc74:	f002 f908 	bl	800de88 <__s2b>
 800bc78:	9009      	str	r0, [sp, #36]	; 0x24
 800bc7a:	2800      	cmp	r0, #0
 800bc7c:	f43f af24 	beq.w	800bac8 <_strtod_l+0x490>
 800bc80:	9b07      	ldr	r3, [sp, #28]
 800bc82:	1b9e      	subs	r6, r3, r6
 800bc84:	9b08      	ldr	r3, [sp, #32]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	bfb4      	ite	lt
 800bc8a:	4633      	movlt	r3, r6
 800bc8c:	2300      	movge	r3, #0
 800bc8e:	9310      	str	r3, [sp, #64]	; 0x40
 800bc90:	9b08      	ldr	r3, [sp, #32]
 800bc92:	2500      	movs	r5, #0
 800bc94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bc98:	9318      	str	r3, [sp, #96]	; 0x60
 800bc9a:	462e      	mov	r6, r5
 800bc9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc9e:	4620      	mov	r0, r4
 800bca0:	6859      	ldr	r1, [r3, #4]
 800bca2:	f002 f845 	bl	800dd30 <_Balloc>
 800bca6:	9007      	str	r0, [sp, #28]
 800bca8:	2800      	cmp	r0, #0
 800bcaa:	f43f af11 	beq.w	800bad0 <_strtod_l+0x498>
 800bcae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcb0:	691a      	ldr	r2, [r3, #16]
 800bcb2:	3202      	adds	r2, #2
 800bcb4:	f103 010c 	add.w	r1, r3, #12
 800bcb8:	0092      	lsls	r2, r2, #2
 800bcba:	300c      	adds	r0, #12
 800bcbc:	f7fe fd5a 	bl	800a774 <memcpy>
 800bcc0:	ec4b ab10 	vmov	d0, sl, fp
 800bcc4:	aa20      	add	r2, sp, #128	; 0x80
 800bcc6:	a91f      	add	r1, sp, #124	; 0x7c
 800bcc8:	4620      	mov	r0, r4
 800bcca:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800bcce:	f002 fc17 	bl	800e500 <__d2b>
 800bcd2:	901e      	str	r0, [sp, #120]	; 0x78
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	f43f aefb 	beq.w	800bad0 <_strtod_l+0x498>
 800bcda:	2101      	movs	r1, #1
 800bcdc:	4620      	mov	r0, r4
 800bcde:	f002 f96d 	bl	800dfbc <__i2b>
 800bce2:	4606      	mov	r6, r0
 800bce4:	2800      	cmp	r0, #0
 800bce6:	f43f aef3 	beq.w	800bad0 <_strtod_l+0x498>
 800bcea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bcec:	9904      	ldr	r1, [sp, #16]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	bfab      	itete	ge
 800bcf2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800bcf4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800bcf6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800bcf8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800bcfc:	bfac      	ite	ge
 800bcfe:	eb03 0902 	addge.w	r9, r3, r2
 800bd02:	1ad7      	sublt	r7, r2, r3
 800bd04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bd06:	eba3 0801 	sub.w	r8, r3, r1
 800bd0a:	4490      	add	r8, r2
 800bd0c:	4ba3      	ldr	r3, [pc, #652]	; (800bf9c <_strtod_l+0x964>)
 800bd0e:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd12:	4598      	cmp	r8, r3
 800bd14:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bd18:	f280 80cc 	bge.w	800beb4 <_strtod_l+0x87c>
 800bd1c:	eba3 0308 	sub.w	r3, r3, r8
 800bd20:	2b1f      	cmp	r3, #31
 800bd22:	eba2 0203 	sub.w	r2, r2, r3
 800bd26:	f04f 0101 	mov.w	r1, #1
 800bd2a:	f300 80b6 	bgt.w	800be9a <_strtod_l+0x862>
 800bd2e:	fa01 f303 	lsl.w	r3, r1, r3
 800bd32:	9311      	str	r3, [sp, #68]	; 0x44
 800bd34:	2300      	movs	r3, #0
 800bd36:	930c      	str	r3, [sp, #48]	; 0x30
 800bd38:	eb09 0802 	add.w	r8, r9, r2
 800bd3c:	9b04      	ldr	r3, [sp, #16]
 800bd3e:	45c1      	cmp	r9, r8
 800bd40:	4417      	add	r7, r2
 800bd42:	441f      	add	r7, r3
 800bd44:	464b      	mov	r3, r9
 800bd46:	bfa8      	it	ge
 800bd48:	4643      	movge	r3, r8
 800bd4a:	42bb      	cmp	r3, r7
 800bd4c:	bfa8      	it	ge
 800bd4e:	463b      	movge	r3, r7
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	bfc2      	ittt	gt
 800bd54:	eba8 0803 	subgt.w	r8, r8, r3
 800bd58:	1aff      	subgt	r7, r7, r3
 800bd5a:	eba9 0903 	subgt.w	r9, r9, r3
 800bd5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	dd17      	ble.n	800bd94 <_strtod_l+0x75c>
 800bd64:	4631      	mov	r1, r6
 800bd66:	461a      	mov	r2, r3
 800bd68:	4620      	mov	r0, r4
 800bd6a:	f002 f9e3 	bl	800e134 <__pow5mult>
 800bd6e:	4606      	mov	r6, r0
 800bd70:	2800      	cmp	r0, #0
 800bd72:	f43f aead 	beq.w	800bad0 <_strtod_l+0x498>
 800bd76:	4601      	mov	r1, r0
 800bd78:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	f002 f934 	bl	800dfe8 <__multiply>
 800bd80:	900f      	str	r0, [sp, #60]	; 0x3c
 800bd82:	2800      	cmp	r0, #0
 800bd84:	f43f aea4 	beq.w	800bad0 <_strtod_l+0x498>
 800bd88:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	f002 f810 	bl	800ddb0 <_Bfree>
 800bd90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd92:	931e      	str	r3, [sp, #120]	; 0x78
 800bd94:	f1b8 0f00 	cmp.w	r8, #0
 800bd98:	f300 8091 	bgt.w	800bebe <_strtod_l+0x886>
 800bd9c:	9b08      	ldr	r3, [sp, #32]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	dd08      	ble.n	800bdb4 <_strtod_l+0x77c>
 800bda2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bda4:	9907      	ldr	r1, [sp, #28]
 800bda6:	4620      	mov	r0, r4
 800bda8:	f002 f9c4 	bl	800e134 <__pow5mult>
 800bdac:	9007      	str	r0, [sp, #28]
 800bdae:	2800      	cmp	r0, #0
 800bdb0:	f43f ae8e 	beq.w	800bad0 <_strtod_l+0x498>
 800bdb4:	2f00      	cmp	r7, #0
 800bdb6:	dd08      	ble.n	800bdca <_strtod_l+0x792>
 800bdb8:	9907      	ldr	r1, [sp, #28]
 800bdba:	463a      	mov	r2, r7
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	f002 fa13 	bl	800e1e8 <__lshift>
 800bdc2:	9007      	str	r0, [sp, #28]
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	f43f ae83 	beq.w	800bad0 <_strtod_l+0x498>
 800bdca:	f1b9 0f00 	cmp.w	r9, #0
 800bdce:	dd08      	ble.n	800bde2 <_strtod_l+0x7aa>
 800bdd0:	4631      	mov	r1, r6
 800bdd2:	464a      	mov	r2, r9
 800bdd4:	4620      	mov	r0, r4
 800bdd6:	f002 fa07 	bl	800e1e8 <__lshift>
 800bdda:	4606      	mov	r6, r0
 800bddc:	2800      	cmp	r0, #0
 800bdde:	f43f ae77 	beq.w	800bad0 <_strtod_l+0x498>
 800bde2:	9a07      	ldr	r2, [sp, #28]
 800bde4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bde6:	4620      	mov	r0, r4
 800bde8:	f002 fa86 	bl	800e2f8 <__mdiff>
 800bdec:	4605      	mov	r5, r0
 800bdee:	2800      	cmp	r0, #0
 800bdf0:	f43f ae6e 	beq.w	800bad0 <_strtod_l+0x498>
 800bdf4:	68c3      	ldr	r3, [r0, #12]
 800bdf6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	60c3      	str	r3, [r0, #12]
 800bdfc:	4631      	mov	r1, r6
 800bdfe:	f002 fa5f 	bl	800e2c0 <__mcmp>
 800be02:	2800      	cmp	r0, #0
 800be04:	da65      	bge.n	800bed2 <_strtod_l+0x89a>
 800be06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be08:	ea53 030a 	orrs.w	r3, r3, sl
 800be0c:	f040 8087 	bne.w	800bf1e <_strtod_l+0x8e6>
 800be10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be14:	2b00      	cmp	r3, #0
 800be16:	f040 8082 	bne.w	800bf1e <_strtod_l+0x8e6>
 800be1a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800be1e:	0d1b      	lsrs	r3, r3, #20
 800be20:	051b      	lsls	r3, r3, #20
 800be22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800be26:	d97a      	bls.n	800bf1e <_strtod_l+0x8e6>
 800be28:	696b      	ldr	r3, [r5, #20]
 800be2a:	b913      	cbnz	r3, 800be32 <_strtod_l+0x7fa>
 800be2c:	692b      	ldr	r3, [r5, #16]
 800be2e:	2b01      	cmp	r3, #1
 800be30:	dd75      	ble.n	800bf1e <_strtod_l+0x8e6>
 800be32:	4629      	mov	r1, r5
 800be34:	2201      	movs	r2, #1
 800be36:	4620      	mov	r0, r4
 800be38:	f002 f9d6 	bl	800e1e8 <__lshift>
 800be3c:	4631      	mov	r1, r6
 800be3e:	4605      	mov	r5, r0
 800be40:	f002 fa3e 	bl	800e2c0 <__mcmp>
 800be44:	2800      	cmp	r0, #0
 800be46:	dd6a      	ble.n	800bf1e <_strtod_l+0x8e6>
 800be48:	9904      	ldr	r1, [sp, #16]
 800be4a:	4a55      	ldr	r2, [pc, #340]	; (800bfa0 <_strtod_l+0x968>)
 800be4c:	465b      	mov	r3, fp
 800be4e:	2900      	cmp	r1, #0
 800be50:	f000 8085 	beq.w	800bf5e <_strtod_l+0x926>
 800be54:	ea02 010b 	and.w	r1, r2, fp
 800be58:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800be5c:	dc7f      	bgt.n	800bf5e <_strtod_l+0x926>
 800be5e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800be62:	f77f aeaa 	ble.w	800bbba <_strtod_l+0x582>
 800be66:	4a4f      	ldr	r2, [pc, #316]	; (800bfa4 <_strtod_l+0x96c>)
 800be68:	2300      	movs	r3, #0
 800be6a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800be6e:	4650      	mov	r0, sl
 800be70:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800be74:	4659      	mov	r1, fp
 800be76:	f7f4 fbbf 	bl	80005f8 <__aeabi_dmul>
 800be7a:	460b      	mov	r3, r1
 800be7c:	4303      	orrs	r3, r0
 800be7e:	bf08      	it	eq
 800be80:	2322      	moveq	r3, #34	; 0x22
 800be82:	4682      	mov	sl, r0
 800be84:	468b      	mov	fp, r1
 800be86:	bf08      	it	eq
 800be88:	6023      	streq	r3, [r4, #0]
 800be8a:	e62b      	b.n	800bae4 <_strtod_l+0x4ac>
 800be8c:	f04f 32ff 	mov.w	r2, #4294967295
 800be90:	fa02 f303 	lsl.w	r3, r2, r3
 800be94:	ea03 0a0a 	and.w	sl, r3, sl
 800be98:	e6de      	b.n	800bc58 <_strtod_l+0x620>
 800be9a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800be9e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800bea2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800bea6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800beaa:	fa01 f308 	lsl.w	r3, r1, r8
 800beae:	930c      	str	r3, [sp, #48]	; 0x30
 800beb0:	9111      	str	r1, [sp, #68]	; 0x44
 800beb2:	e741      	b.n	800bd38 <_strtod_l+0x700>
 800beb4:	2300      	movs	r3, #0
 800beb6:	930c      	str	r3, [sp, #48]	; 0x30
 800beb8:	2301      	movs	r3, #1
 800beba:	9311      	str	r3, [sp, #68]	; 0x44
 800bebc:	e73c      	b.n	800bd38 <_strtod_l+0x700>
 800bebe:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bec0:	4642      	mov	r2, r8
 800bec2:	4620      	mov	r0, r4
 800bec4:	f002 f990 	bl	800e1e8 <__lshift>
 800bec8:	901e      	str	r0, [sp, #120]	; 0x78
 800beca:	2800      	cmp	r0, #0
 800becc:	f47f af66 	bne.w	800bd9c <_strtod_l+0x764>
 800bed0:	e5fe      	b.n	800bad0 <_strtod_l+0x498>
 800bed2:	465f      	mov	r7, fp
 800bed4:	d16e      	bne.n	800bfb4 <_strtod_l+0x97c>
 800bed6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bed8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bedc:	b342      	cbz	r2, 800bf30 <_strtod_l+0x8f8>
 800bede:	4a32      	ldr	r2, [pc, #200]	; (800bfa8 <_strtod_l+0x970>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d128      	bne.n	800bf36 <_strtod_l+0x8fe>
 800bee4:	9b04      	ldr	r3, [sp, #16]
 800bee6:	4650      	mov	r0, sl
 800bee8:	b1eb      	cbz	r3, 800bf26 <_strtod_l+0x8ee>
 800beea:	4a2d      	ldr	r2, [pc, #180]	; (800bfa0 <_strtod_l+0x968>)
 800beec:	403a      	ands	r2, r7
 800beee:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800bef2:	f04f 31ff 	mov.w	r1, #4294967295
 800bef6:	d819      	bhi.n	800bf2c <_strtod_l+0x8f4>
 800bef8:	0d12      	lsrs	r2, r2, #20
 800befa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800befe:	fa01 f303 	lsl.w	r3, r1, r3
 800bf02:	4298      	cmp	r0, r3
 800bf04:	d117      	bne.n	800bf36 <_strtod_l+0x8fe>
 800bf06:	4b29      	ldr	r3, [pc, #164]	; (800bfac <_strtod_l+0x974>)
 800bf08:	429f      	cmp	r7, r3
 800bf0a:	d102      	bne.n	800bf12 <_strtod_l+0x8da>
 800bf0c:	3001      	adds	r0, #1
 800bf0e:	f43f addf 	beq.w	800bad0 <_strtod_l+0x498>
 800bf12:	4b23      	ldr	r3, [pc, #140]	; (800bfa0 <_strtod_l+0x968>)
 800bf14:	403b      	ands	r3, r7
 800bf16:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800bf1a:	f04f 0a00 	mov.w	sl, #0
 800bf1e:	9b04      	ldr	r3, [sp, #16]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d1a0      	bne.n	800be66 <_strtod_l+0x82e>
 800bf24:	e5de      	b.n	800bae4 <_strtod_l+0x4ac>
 800bf26:	f04f 33ff 	mov.w	r3, #4294967295
 800bf2a:	e7ea      	b.n	800bf02 <_strtod_l+0x8ca>
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	e7e8      	b.n	800bf02 <_strtod_l+0x8ca>
 800bf30:	ea53 030a 	orrs.w	r3, r3, sl
 800bf34:	d088      	beq.n	800be48 <_strtod_l+0x810>
 800bf36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf38:	b1db      	cbz	r3, 800bf72 <_strtod_l+0x93a>
 800bf3a:	423b      	tst	r3, r7
 800bf3c:	d0ef      	beq.n	800bf1e <_strtod_l+0x8e6>
 800bf3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf40:	9a04      	ldr	r2, [sp, #16]
 800bf42:	4650      	mov	r0, sl
 800bf44:	4659      	mov	r1, fp
 800bf46:	b1c3      	cbz	r3, 800bf7a <_strtod_l+0x942>
 800bf48:	f7ff fb58 	bl	800b5fc <sulp>
 800bf4c:	4602      	mov	r2, r0
 800bf4e:	460b      	mov	r3, r1
 800bf50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bf54:	f7f4 f99a 	bl	800028c <__adddf3>
 800bf58:	4682      	mov	sl, r0
 800bf5a:	468b      	mov	fp, r1
 800bf5c:	e7df      	b.n	800bf1e <_strtod_l+0x8e6>
 800bf5e:	4013      	ands	r3, r2
 800bf60:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bf64:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bf68:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bf6c:	f04f 3aff 	mov.w	sl, #4294967295
 800bf70:	e7d5      	b.n	800bf1e <_strtod_l+0x8e6>
 800bf72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf74:	ea13 0f0a 	tst.w	r3, sl
 800bf78:	e7e0      	b.n	800bf3c <_strtod_l+0x904>
 800bf7a:	f7ff fb3f 	bl	800b5fc <sulp>
 800bf7e:	4602      	mov	r2, r0
 800bf80:	460b      	mov	r3, r1
 800bf82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bf86:	f7f4 f97f 	bl	8000288 <__aeabi_dsub>
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	4682      	mov	sl, r0
 800bf90:	468b      	mov	fp, r1
 800bf92:	f7f4 fd99 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf96:	2800      	cmp	r0, #0
 800bf98:	d0c1      	beq.n	800bf1e <_strtod_l+0x8e6>
 800bf9a:	e60e      	b.n	800bbba <_strtod_l+0x582>
 800bf9c:	fffffc02 	.word	0xfffffc02
 800bfa0:	7ff00000 	.word	0x7ff00000
 800bfa4:	39500000 	.word	0x39500000
 800bfa8:	000fffff 	.word	0x000fffff
 800bfac:	7fefffff 	.word	0x7fefffff
 800bfb0:	0800f240 	.word	0x0800f240
 800bfb4:	4631      	mov	r1, r6
 800bfb6:	4628      	mov	r0, r5
 800bfb8:	f002 fafe 	bl	800e5b8 <__ratio>
 800bfbc:	ec59 8b10 	vmov	r8, r9, d0
 800bfc0:	ee10 0a10 	vmov	r0, s0
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bfca:	4649      	mov	r1, r9
 800bfcc:	f7f4 fd90 	bl	8000af0 <__aeabi_dcmple>
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	d07c      	beq.n	800c0ce <_strtod_l+0xa96>
 800bfd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d04c      	beq.n	800c074 <_strtod_l+0xa3c>
 800bfda:	4b95      	ldr	r3, [pc, #596]	; (800c230 <_strtod_l+0xbf8>)
 800bfdc:	2200      	movs	r2, #0
 800bfde:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800bfe2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c230 <_strtod_l+0xbf8>
 800bfe6:	f04f 0800 	mov.w	r8, #0
 800bfea:	4b92      	ldr	r3, [pc, #584]	; (800c234 <_strtod_l+0xbfc>)
 800bfec:	403b      	ands	r3, r7
 800bfee:	9311      	str	r3, [sp, #68]	; 0x44
 800bff0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bff2:	4b91      	ldr	r3, [pc, #580]	; (800c238 <_strtod_l+0xc00>)
 800bff4:	429a      	cmp	r2, r3
 800bff6:	f040 80b2 	bne.w	800c15e <_strtod_l+0xb26>
 800bffa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bffe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c002:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c006:	ec4b ab10 	vmov	d0, sl, fp
 800c00a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800c00e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c012:	f002 f9f9 	bl	800e408 <__ulp>
 800c016:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c01a:	ec53 2b10 	vmov	r2, r3, d0
 800c01e:	f7f4 faeb 	bl	80005f8 <__aeabi_dmul>
 800c022:	4652      	mov	r2, sl
 800c024:	465b      	mov	r3, fp
 800c026:	f7f4 f931 	bl	800028c <__adddf3>
 800c02a:	460b      	mov	r3, r1
 800c02c:	4981      	ldr	r1, [pc, #516]	; (800c234 <_strtod_l+0xbfc>)
 800c02e:	4a83      	ldr	r2, [pc, #524]	; (800c23c <_strtod_l+0xc04>)
 800c030:	4019      	ands	r1, r3
 800c032:	4291      	cmp	r1, r2
 800c034:	4682      	mov	sl, r0
 800c036:	d95e      	bls.n	800c0f6 <_strtod_l+0xabe>
 800c038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c03a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c03e:	4293      	cmp	r3, r2
 800c040:	d103      	bne.n	800c04a <_strtod_l+0xa12>
 800c042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c044:	3301      	adds	r3, #1
 800c046:	f43f ad43 	beq.w	800bad0 <_strtod_l+0x498>
 800c04a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800c248 <_strtod_l+0xc10>
 800c04e:	f04f 3aff 	mov.w	sl, #4294967295
 800c052:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c054:	4620      	mov	r0, r4
 800c056:	f001 feab 	bl	800ddb0 <_Bfree>
 800c05a:	9907      	ldr	r1, [sp, #28]
 800c05c:	4620      	mov	r0, r4
 800c05e:	f001 fea7 	bl	800ddb0 <_Bfree>
 800c062:	4631      	mov	r1, r6
 800c064:	4620      	mov	r0, r4
 800c066:	f001 fea3 	bl	800ddb0 <_Bfree>
 800c06a:	4629      	mov	r1, r5
 800c06c:	4620      	mov	r0, r4
 800c06e:	f001 fe9f 	bl	800ddb0 <_Bfree>
 800c072:	e613      	b.n	800bc9c <_strtod_l+0x664>
 800c074:	f1ba 0f00 	cmp.w	sl, #0
 800c078:	d11b      	bne.n	800c0b2 <_strtod_l+0xa7a>
 800c07a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c07e:	b9f3      	cbnz	r3, 800c0be <_strtod_l+0xa86>
 800c080:	4b6b      	ldr	r3, [pc, #428]	; (800c230 <_strtod_l+0xbf8>)
 800c082:	2200      	movs	r2, #0
 800c084:	4640      	mov	r0, r8
 800c086:	4649      	mov	r1, r9
 800c088:	f7f4 fd28 	bl	8000adc <__aeabi_dcmplt>
 800c08c:	b9d0      	cbnz	r0, 800c0c4 <_strtod_l+0xa8c>
 800c08e:	4640      	mov	r0, r8
 800c090:	4649      	mov	r1, r9
 800c092:	4b6b      	ldr	r3, [pc, #428]	; (800c240 <_strtod_l+0xc08>)
 800c094:	2200      	movs	r2, #0
 800c096:	f7f4 faaf 	bl	80005f8 <__aeabi_dmul>
 800c09a:	4680      	mov	r8, r0
 800c09c:	4689      	mov	r9, r1
 800c09e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c0a2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800c0a6:	931b      	str	r3, [sp, #108]	; 0x6c
 800c0a8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800c0ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c0b0:	e79b      	b.n	800bfea <_strtod_l+0x9b2>
 800c0b2:	f1ba 0f01 	cmp.w	sl, #1
 800c0b6:	d102      	bne.n	800c0be <_strtod_l+0xa86>
 800c0b8:	2f00      	cmp	r7, #0
 800c0ba:	f43f ad7e 	beq.w	800bbba <_strtod_l+0x582>
 800c0be:	4b61      	ldr	r3, [pc, #388]	; (800c244 <_strtod_l+0xc0c>)
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	e78c      	b.n	800bfde <_strtod_l+0x9a6>
 800c0c4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c240 <_strtod_l+0xc08>
 800c0c8:	f04f 0800 	mov.w	r8, #0
 800c0cc:	e7e7      	b.n	800c09e <_strtod_l+0xa66>
 800c0ce:	4b5c      	ldr	r3, [pc, #368]	; (800c240 <_strtod_l+0xc08>)
 800c0d0:	4640      	mov	r0, r8
 800c0d2:	4649      	mov	r1, r9
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	f7f4 fa8f 	bl	80005f8 <__aeabi_dmul>
 800c0da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c0dc:	4680      	mov	r8, r0
 800c0de:	4689      	mov	r9, r1
 800c0e0:	b933      	cbnz	r3, 800c0f0 <_strtod_l+0xab8>
 800c0e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0e6:	9012      	str	r0, [sp, #72]	; 0x48
 800c0e8:	9313      	str	r3, [sp, #76]	; 0x4c
 800c0ea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c0ee:	e7dd      	b.n	800c0ac <_strtod_l+0xa74>
 800c0f0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800c0f4:	e7f9      	b.n	800c0ea <_strtod_l+0xab2>
 800c0f6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c0fa:	9b04      	ldr	r3, [sp, #16]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d1a8      	bne.n	800c052 <_strtod_l+0xa1a>
 800c100:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c104:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c106:	0d1b      	lsrs	r3, r3, #20
 800c108:	051b      	lsls	r3, r3, #20
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d1a1      	bne.n	800c052 <_strtod_l+0xa1a>
 800c10e:	4640      	mov	r0, r8
 800c110:	4649      	mov	r1, r9
 800c112:	f7f4 fdd1 	bl	8000cb8 <__aeabi_d2lz>
 800c116:	f7f4 fa41 	bl	800059c <__aeabi_l2d>
 800c11a:	4602      	mov	r2, r0
 800c11c:	460b      	mov	r3, r1
 800c11e:	4640      	mov	r0, r8
 800c120:	4649      	mov	r1, r9
 800c122:	f7f4 f8b1 	bl	8000288 <__aeabi_dsub>
 800c126:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c128:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c12c:	ea43 030a 	orr.w	r3, r3, sl
 800c130:	4313      	orrs	r3, r2
 800c132:	4680      	mov	r8, r0
 800c134:	4689      	mov	r9, r1
 800c136:	d053      	beq.n	800c1e0 <_strtod_l+0xba8>
 800c138:	a335      	add	r3, pc, #212	; (adr r3, 800c210 <_strtod_l+0xbd8>)
 800c13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13e:	f7f4 fccd 	bl	8000adc <__aeabi_dcmplt>
 800c142:	2800      	cmp	r0, #0
 800c144:	f47f acce 	bne.w	800bae4 <_strtod_l+0x4ac>
 800c148:	a333      	add	r3, pc, #204	; (adr r3, 800c218 <_strtod_l+0xbe0>)
 800c14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14e:	4640      	mov	r0, r8
 800c150:	4649      	mov	r1, r9
 800c152:	f7f4 fce1 	bl	8000b18 <__aeabi_dcmpgt>
 800c156:	2800      	cmp	r0, #0
 800c158:	f43f af7b 	beq.w	800c052 <_strtod_l+0xa1a>
 800c15c:	e4c2      	b.n	800bae4 <_strtod_l+0x4ac>
 800c15e:	9b04      	ldr	r3, [sp, #16]
 800c160:	b333      	cbz	r3, 800c1b0 <_strtod_l+0xb78>
 800c162:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c164:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c168:	d822      	bhi.n	800c1b0 <_strtod_l+0xb78>
 800c16a:	a32d      	add	r3, pc, #180	; (adr r3, 800c220 <_strtod_l+0xbe8>)
 800c16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c170:	4640      	mov	r0, r8
 800c172:	4649      	mov	r1, r9
 800c174:	f7f4 fcbc 	bl	8000af0 <__aeabi_dcmple>
 800c178:	b1a0      	cbz	r0, 800c1a4 <_strtod_l+0xb6c>
 800c17a:	4649      	mov	r1, r9
 800c17c:	4640      	mov	r0, r8
 800c17e:	f7f4 fd13 	bl	8000ba8 <__aeabi_d2uiz>
 800c182:	2801      	cmp	r0, #1
 800c184:	bf38      	it	cc
 800c186:	2001      	movcc	r0, #1
 800c188:	f7f4 f9bc 	bl	8000504 <__aeabi_ui2d>
 800c18c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c18e:	4680      	mov	r8, r0
 800c190:	4689      	mov	r9, r1
 800c192:	bb13      	cbnz	r3, 800c1da <_strtod_l+0xba2>
 800c194:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c198:	9014      	str	r0, [sp, #80]	; 0x50
 800c19a:	9315      	str	r3, [sp, #84]	; 0x54
 800c19c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c1a0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c1a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c1a8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c1ac:	1a9b      	subs	r3, r3, r2
 800c1ae:	930d      	str	r3, [sp, #52]	; 0x34
 800c1b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c1b4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c1b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c1bc:	f002 f924 	bl	800e408 <__ulp>
 800c1c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c1c4:	ec53 2b10 	vmov	r2, r3, d0
 800c1c8:	f7f4 fa16 	bl	80005f8 <__aeabi_dmul>
 800c1cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c1d0:	f7f4 f85c 	bl	800028c <__adddf3>
 800c1d4:	4682      	mov	sl, r0
 800c1d6:	468b      	mov	fp, r1
 800c1d8:	e78f      	b.n	800c0fa <_strtod_l+0xac2>
 800c1da:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800c1de:	e7dd      	b.n	800c19c <_strtod_l+0xb64>
 800c1e0:	a311      	add	r3, pc, #68	; (adr r3, 800c228 <_strtod_l+0xbf0>)
 800c1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e6:	f7f4 fc79 	bl	8000adc <__aeabi_dcmplt>
 800c1ea:	e7b4      	b.n	800c156 <_strtod_l+0xb1e>
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	930e      	str	r3, [sp, #56]	; 0x38
 800c1f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c1f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c1f4:	6013      	str	r3, [r2, #0]
 800c1f6:	f7ff ba65 	b.w	800b6c4 <_strtod_l+0x8c>
 800c1fa:	2b65      	cmp	r3, #101	; 0x65
 800c1fc:	f43f ab5d 	beq.w	800b8ba <_strtod_l+0x282>
 800c200:	2b45      	cmp	r3, #69	; 0x45
 800c202:	f43f ab5a 	beq.w	800b8ba <_strtod_l+0x282>
 800c206:	2201      	movs	r2, #1
 800c208:	f7ff bb92 	b.w	800b930 <_strtod_l+0x2f8>
 800c20c:	f3af 8000 	nop.w
 800c210:	94a03595 	.word	0x94a03595
 800c214:	3fdfffff 	.word	0x3fdfffff
 800c218:	35afe535 	.word	0x35afe535
 800c21c:	3fe00000 	.word	0x3fe00000
 800c220:	ffc00000 	.word	0xffc00000
 800c224:	41dfffff 	.word	0x41dfffff
 800c228:	94a03595 	.word	0x94a03595
 800c22c:	3fcfffff 	.word	0x3fcfffff
 800c230:	3ff00000 	.word	0x3ff00000
 800c234:	7ff00000 	.word	0x7ff00000
 800c238:	7fe00000 	.word	0x7fe00000
 800c23c:	7c9fffff 	.word	0x7c9fffff
 800c240:	3fe00000 	.word	0x3fe00000
 800c244:	bff00000 	.word	0xbff00000
 800c248:	7fefffff 	.word	0x7fefffff

0800c24c <_strtod_r>:
 800c24c:	4b01      	ldr	r3, [pc, #4]	; (800c254 <_strtod_r+0x8>)
 800c24e:	f7ff b9f3 	b.w	800b638 <_strtod_l>
 800c252:	bf00      	nop
 800c254:	2000009c 	.word	0x2000009c

0800c258 <_strtol_l.isra.0>:
 800c258:	2b01      	cmp	r3, #1
 800c25a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c25e:	d001      	beq.n	800c264 <_strtol_l.isra.0+0xc>
 800c260:	2b24      	cmp	r3, #36	; 0x24
 800c262:	d906      	bls.n	800c272 <_strtol_l.isra.0+0x1a>
 800c264:	f7fe fa5c 	bl	800a720 <__errno>
 800c268:	2316      	movs	r3, #22
 800c26a:	6003      	str	r3, [r0, #0]
 800c26c:	2000      	movs	r0, #0
 800c26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c272:	4f3a      	ldr	r7, [pc, #232]	; (800c35c <_strtol_l.isra.0+0x104>)
 800c274:	468e      	mov	lr, r1
 800c276:	4676      	mov	r6, lr
 800c278:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c27c:	5de5      	ldrb	r5, [r4, r7]
 800c27e:	f015 0508 	ands.w	r5, r5, #8
 800c282:	d1f8      	bne.n	800c276 <_strtol_l.isra.0+0x1e>
 800c284:	2c2d      	cmp	r4, #45	; 0x2d
 800c286:	d134      	bne.n	800c2f2 <_strtol_l.isra.0+0x9a>
 800c288:	f89e 4000 	ldrb.w	r4, [lr]
 800c28c:	f04f 0801 	mov.w	r8, #1
 800c290:	f106 0e02 	add.w	lr, r6, #2
 800c294:	2b00      	cmp	r3, #0
 800c296:	d05c      	beq.n	800c352 <_strtol_l.isra.0+0xfa>
 800c298:	2b10      	cmp	r3, #16
 800c29a:	d10c      	bne.n	800c2b6 <_strtol_l.isra.0+0x5e>
 800c29c:	2c30      	cmp	r4, #48	; 0x30
 800c29e:	d10a      	bne.n	800c2b6 <_strtol_l.isra.0+0x5e>
 800c2a0:	f89e 4000 	ldrb.w	r4, [lr]
 800c2a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c2a8:	2c58      	cmp	r4, #88	; 0x58
 800c2aa:	d14d      	bne.n	800c348 <_strtol_l.isra.0+0xf0>
 800c2ac:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800c2b0:	2310      	movs	r3, #16
 800c2b2:	f10e 0e02 	add.w	lr, lr, #2
 800c2b6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800c2ba:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c2be:	2600      	movs	r6, #0
 800c2c0:	fbbc f9f3 	udiv	r9, ip, r3
 800c2c4:	4635      	mov	r5, r6
 800c2c6:	fb03 ca19 	mls	sl, r3, r9, ip
 800c2ca:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c2ce:	2f09      	cmp	r7, #9
 800c2d0:	d818      	bhi.n	800c304 <_strtol_l.isra.0+0xac>
 800c2d2:	463c      	mov	r4, r7
 800c2d4:	42a3      	cmp	r3, r4
 800c2d6:	dd24      	ble.n	800c322 <_strtol_l.isra.0+0xca>
 800c2d8:	2e00      	cmp	r6, #0
 800c2da:	db1f      	blt.n	800c31c <_strtol_l.isra.0+0xc4>
 800c2dc:	45a9      	cmp	r9, r5
 800c2de:	d31d      	bcc.n	800c31c <_strtol_l.isra.0+0xc4>
 800c2e0:	d101      	bne.n	800c2e6 <_strtol_l.isra.0+0x8e>
 800c2e2:	45a2      	cmp	sl, r4
 800c2e4:	db1a      	blt.n	800c31c <_strtol_l.isra.0+0xc4>
 800c2e6:	fb05 4503 	mla	r5, r5, r3, r4
 800c2ea:	2601      	movs	r6, #1
 800c2ec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c2f0:	e7eb      	b.n	800c2ca <_strtol_l.isra.0+0x72>
 800c2f2:	2c2b      	cmp	r4, #43	; 0x2b
 800c2f4:	bf08      	it	eq
 800c2f6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800c2fa:	46a8      	mov	r8, r5
 800c2fc:	bf08      	it	eq
 800c2fe:	f106 0e02 	addeq.w	lr, r6, #2
 800c302:	e7c7      	b.n	800c294 <_strtol_l.isra.0+0x3c>
 800c304:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c308:	2f19      	cmp	r7, #25
 800c30a:	d801      	bhi.n	800c310 <_strtol_l.isra.0+0xb8>
 800c30c:	3c37      	subs	r4, #55	; 0x37
 800c30e:	e7e1      	b.n	800c2d4 <_strtol_l.isra.0+0x7c>
 800c310:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c314:	2f19      	cmp	r7, #25
 800c316:	d804      	bhi.n	800c322 <_strtol_l.isra.0+0xca>
 800c318:	3c57      	subs	r4, #87	; 0x57
 800c31a:	e7db      	b.n	800c2d4 <_strtol_l.isra.0+0x7c>
 800c31c:	f04f 36ff 	mov.w	r6, #4294967295
 800c320:	e7e4      	b.n	800c2ec <_strtol_l.isra.0+0x94>
 800c322:	2e00      	cmp	r6, #0
 800c324:	da05      	bge.n	800c332 <_strtol_l.isra.0+0xda>
 800c326:	2322      	movs	r3, #34	; 0x22
 800c328:	6003      	str	r3, [r0, #0]
 800c32a:	4665      	mov	r5, ip
 800c32c:	b942      	cbnz	r2, 800c340 <_strtol_l.isra.0+0xe8>
 800c32e:	4628      	mov	r0, r5
 800c330:	e79d      	b.n	800c26e <_strtol_l.isra.0+0x16>
 800c332:	f1b8 0f00 	cmp.w	r8, #0
 800c336:	d000      	beq.n	800c33a <_strtol_l.isra.0+0xe2>
 800c338:	426d      	negs	r5, r5
 800c33a:	2a00      	cmp	r2, #0
 800c33c:	d0f7      	beq.n	800c32e <_strtol_l.isra.0+0xd6>
 800c33e:	b10e      	cbz	r6, 800c344 <_strtol_l.isra.0+0xec>
 800c340:	f10e 31ff 	add.w	r1, lr, #4294967295
 800c344:	6011      	str	r1, [r2, #0]
 800c346:	e7f2      	b.n	800c32e <_strtol_l.isra.0+0xd6>
 800c348:	2430      	movs	r4, #48	; 0x30
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d1b3      	bne.n	800c2b6 <_strtol_l.isra.0+0x5e>
 800c34e:	2308      	movs	r3, #8
 800c350:	e7b1      	b.n	800c2b6 <_strtol_l.isra.0+0x5e>
 800c352:	2c30      	cmp	r4, #48	; 0x30
 800c354:	d0a4      	beq.n	800c2a0 <_strtol_l.isra.0+0x48>
 800c356:	230a      	movs	r3, #10
 800c358:	e7ad      	b.n	800c2b6 <_strtol_l.isra.0+0x5e>
 800c35a:	bf00      	nop
 800c35c:	0800f269 	.word	0x0800f269

0800c360 <_strtol_r>:
 800c360:	f7ff bf7a 	b.w	800c258 <_strtol_l.isra.0>

0800c364 <__swbuf_r>:
 800c364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c366:	460e      	mov	r6, r1
 800c368:	4614      	mov	r4, r2
 800c36a:	4605      	mov	r5, r0
 800c36c:	b118      	cbz	r0, 800c376 <__swbuf_r+0x12>
 800c36e:	6983      	ldr	r3, [r0, #24]
 800c370:	b90b      	cbnz	r3, 800c376 <__swbuf_r+0x12>
 800c372:	f001 f84b 	bl	800d40c <__sinit>
 800c376:	4b21      	ldr	r3, [pc, #132]	; (800c3fc <__swbuf_r+0x98>)
 800c378:	429c      	cmp	r4, r3
 800c37a:	d12b      	bne.n	800c3d4 <__swbuf_r+0x70>
 800c37c:	686c      	ldr	r4, [r5, #4]
 800c37e:	69a3      	ldr	r3, [r4, #24]
 800c380:	60a3      	str	r3, [r4, #8]
 800c382:	89a3      	ldrh	r3, [r4, #12]
 800c384:	071a      	lsls	r2, r3, #28
 800c386:	d52f      	bpl.n	800c3e8 <__swbuf_r+0x84>
 800c388:	6923      	ldr	r3, [r4, #16]
 800c38a:	b36b      	cbz	r3, 800c3e8 <__swbuf_r+0x84>
 800c38c:	6923      	ldr	r3, [r4, #16]
 800c38e:	6820      	ldr	r0, [r4, #0]
 800c390:	1ac0      	subs	r0, r0, r3
 800c392:	6963      	ldr	r3, [r4, #20]
 800c394:	b2f6      	uxtb	r6, r6
 800c396:	4283      	cmp	r3, r0
 800c398:	4637      	mov	r7, r6
 800c39a:	dc04      	bgt.n	800c3a6 <__swbuf_r+0x42>
 800c39c:	4621      	mov	r1, r4
 800c39e:	4628      	mov	r0, r5
 800c3a0:	f000 ffa0 	bl	800d2e4 <_fflush_r>
 800c3a4:	bb30      	cbnz	r0, 800c3f4 <__swbuf_r+0x90>
 800c3a6:	68a3      	ldr	r3, [r4, #8]
 800c3a8:	3b01      	subs	r3, #1
 800c3aa:	60a3      	str	r3, [r4, #8]
 800c3ac:	6823      	ldr	r3, [r4, #0]
 800c3ae:	1c5a      	adds	r2, r3, #1
 800c3b0:	6022      	str	r2, [r4, #0]
 800c3b2:	701e      	strb	r6, [r3, #0]
 800c3b4:	6963      	ldr	r3, [r4, #20]
 800c3b6:	3001      	adds	r0, #1
 800c3b8:	4283      	cmp	r3, r0
 800c3ba:	d004      	beq.n	800c3c6 <__swbuf_r+0x62>
 800c3bc:	89a3      	ldrh	r3, [r4, #12]
 800c3be:	07db      	lsls	r3, r3, #31
 800c3c0:	d506      	bpl.n	800c3d0 <__swbuf_r+0x6c>
 800c3c2:	2e0a      	cmp	r6, #10
 800c3c4:	d104      	bne.n	800c3d0 <__swbuf_r+0x6c>
 800c3c6:	4621      	mov	r1, r4
 800c3c8:	4628      	mov	r0, r5
 800c3ca:	f000 ff8b 	bl	800d2e4 <_fflush_r>
 800c3ce:	b988      	cbnz	r0, 800c3f4 <__swbuf_r+0x90>
 800c3d0:	4638      	mov	r0, r7
 800c3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3d4:	4b0a      	ldr	r3, [pc, #40]	; (800c400 <__swbuf_r+0x9c>)
 800c3d6:	429c      	cmp	r4, r3
 800c3d8:	d101      	bne.n	800c3de <__swbuf_r+0x7a>
 800c3da:	68ac      	ldr	r4, [r5, #8]
 800c3dc:	e7cf      	b.n	800c37e <__swbuf_r+0x1a>
 800c3de:	4b09      	ldr	r3, [pc, #36]	; (800c404 <__swbuf_r+0xa0>)
 800c3e0:	429c      	cmp	r4, r3
 800c3e2:	bf08      	it	eq
 800c3e4:	68ec      	ldreq	r4, [r5, #12]
 800c3e6:	e7ca      	b.n	800c37e <__swbuf_r+0x1a>
 800c3e8:	4621      	mov	r1, r4
 800c3ea:	4628      	mov	r0, r5
 800c3ec:	f000 f80c 	bl	800c408 <__swsetup_r>
 800c3f0:	2800      	cmp	r0, #0
 800c3f2:	d0cb      	beq.n	800c38c <__swbuf_r+0x28>
 800c3f4:	f04f 37ff 	mov.w	r7, #4294967295
 800c3f8:	e7ea      	b.n	800c3d0 <__swbuf_r+0x6c>
 800c3fa:	bf00      	nop
 800c3fc:	0800f420 	.word	0x0800f420
 800c400:	0800f440 	.word	0x0800f440
 800c404:	0800f400 	.word	0x0800f400

0800c408 <__swsetup_r>:
 800c408:	4b32      	ldr	r3, [pc, #200]	; (800c4d4 <__swsetup_r+0xcc>)
 800c40a:	b570      	push	{r4, r5, r6, lr}
 800c40c:	681d      	ldr	r5, [r3, #0]
 800c40e:	4606      	mov	r6, r0
 800c410:	460c      	mov	r4, r1
 800c412:	b125      	cbz	r5, 800c41e <__swsetup_r+0x16>
 800c414:	69ab      	ldr	r3, [r5, #24]
 800c416:	b913      	cbnz	r3, 800c41e <__swsetup_r+0x16>
 800c418:	4628      	mov	r0, r5
 800c41a:	f000 fff7 	bl	800d40c <__sinit>
 800c41e:	4b2e      	ldr	r3, [pc, #184]	; (800c4d8 <__swsetup_r+0xd0>)
 800c420:	429c      	cmp	r4, r3
 800c422:	d10f      	bne.n	800c444 <__swsetup_r+0x3c>
 800c424:	686c      	ldr	r4, [r5, #4]
 800c426:	89a3      	ldrh	r3, [r4, #12]
 800c428:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c42c:	0719      	lsls	r1, r3, #28
 800c42e:	d42c      	bmi.n	800c48a <__swsetup_r+0x82>
 800c430:	06dd      	lsls	r5, r3, #27
 800c432:	d411      	bmi.n	800c458 <__swsetup_r+0x50>
 800c434:	2309      	movs	r3, #9
 800c436:	6033      	str	r3, [r6, #0]
 800c438:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c43c:	81a3      	strh	r3, [r4, #12]
 800c43e:	f04f 30ff 	mov.w	r0, #4294967295
 800c442:	e03e      	b.n	800c4c2 <__swsetup_r+0xba>
 800c444:	4b25      	ldr	r3, [pc, #148]	; (800c4dc <__swsetup_r+0xd4>)
 800c446:	429c      	cmp	r4, r3
 800c448:	d101      	bne.n	800c44e <__swsetup_r+0x46>
 800c44a:	68ac      	ldr	r4, [r5, #8]
 800c44c:	e7eb      	b.n	800c426 <__swsetup_r+0x1e>
 800c44e:	4b24      	ldr	r3, [pc, #144]	; (800c4e0 <__swsetup_r+0xd8>)
 800c450:	429c      	cmp	r4, r3
 800c452:	bf08      	it	eq
 800c454:	68ec      	ldreq	r4, [r5, #12]
 800c456:	e7e6      	b.n	800c426 <__swsetup_r+0x1e>
 800c458:	0758      	lsls	r0, r3, #29
 800c45a:	d512      	bpl.n	800c482 <__swsetup_r+0x7a>
 800c45c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c45e:	b141      	cbz	r1, 800c472 <__swsetup_r+0x6a>
 800c460:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c464:	4299      	cmp	r1, r3
 800c466:	d002      	beq.n	800c46e <__swsetup_r+0x66>
 800c468:	4630      	mov	r0, r6
 800c46a:	f002 f92b 	bl	800e6c4 <_free_r>
 800c46e:	2300      	movs	r3, #0
 800c470:	6363      	str	r3, [r4, #52]	; 0x34
 800c472:	89a3      	ldrh	r3, [r4, #12]
 800c474:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c478:	81a3      	strh	r3, [r4, #12]
 800c47a:	2300      	movs	r3, #0
 800c47c:	6063      	str	r3, [r4, #4]
 800c47e:	6923      	ldr	r3, [r4, #16]
 800c480:	6023      	str	r3, [r4, #0]
 800c482:	89a3      	ldrh	r3, [r4, #12]
 800c484:	f043 0308 	orr.w	r3, r3, #8
 800c488:	81a3      	strh	r3, [r4, #12]
 800c48a:	6923      	ldr	r3, [r4, #16]
 800c48c:	b94b      	cbnz	r3, 800c4a2 <__swsetup_r+0x9a>
 800c48e:	89a3      	ldrh	r3, [r4, #12]
 800c490:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c498:	d003      	beq.n	800c4a2 <__swsetup_r+0x9a>
 800c49a:	4621      	mov	r1, r4
 800c49c:	4630      	mov	r0, r6
 800c49e:	f001 fbed 	bl	800dc7c <__smakebuf_r>
 800c4a2:	89a0      	ldrh	r0, [r4, #12]
 800c4a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c4a8:	f010 0301 	ands.w	r3, r0, #1
 800c4ac:	d00a      	beq.n	800c4c4 <__swsetup_r+0xbc>
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	60a3      	str	r3, [r4, #8]
 800c4b2:	6963      	ldr	r3, [r4, #20]
 800c4b4:	425b      	negs	r3, r3
 800c4b6:	61a3      	str	r3, [r4, #24]
 800c4b8:	6923      	ldr	r3, [r4, #16]
 800c4ba:	b943      	cbnz	r3, 800c4ce <__swsetup_r+0xc6>
 800c4bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c4c0:	d1ba      	bne.n	800c438 <__swsetup_r+0x30>
 800c4c2:	bd70      	pop	{r4, r5, r6, pc}
 800c4c4:	0781      	lsls	r1, r0, #30
 800c4c6:	bf58      	it	pl
 800c4c8:	6963      	ldrpl	r3, [r4, #20]
 800c4ca:	60a3      	str	r3, [r4, #8]
 800c4cc:	e7f4      	b.n	800c4b8 <__swsetup_r+0xb0>
 800c4ce:	2000      	movs	r0, #0
 800c4d0:	e7f7      	b.n	800c4c2 <__swsetup_r+0xba>
 800c4d2:	bf00      	nop
 800c4d4:	20000034 	.word	0x20000034
 800c4d8:	0800f420 	.word	0x0800f420
 800c4dc:	0800f440 	.word	0x0800f440
 800c4e0:	0800f400 	.word	0x0800f400

0800c4e4 <quorem>:
 800c4e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4e8:	6903      	ldr	r3, [r0, #16]
 800c4ea:	690c      	ldr	r4, [r1, #16]
 800c4ec:	42a3      	cmp	r3, r4
 800c4ee:	4607      	mov	r7, r0
 800c4f0:	f2c0 8081 	blt.w	800c5f6 <quorem+0x112>
 800c4f4:	3c01      	subs	r4, #1
 800c4f6:	f101 0814 	add.w	r8, r1, #20
 800c4fa:	f100 0514 	add.w	r5, r0, #20
 800c4fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c502:	9301      	str	r3, [sp, #4]
 800c504:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c508:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c50c:	3301      	adds	r3, #1
 800c50e:	429a      	cmp	r2, r3
 800c510:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c514:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c518:	fbb2 f6f3 	udiv	r6, r2, r3
 800c51c:	d331      	bcc.n	800c582 <quorem+0x9e>
 800c51e:	f04f 0e00 	mov.w	lr, #0
 800c522:	4640      	mov	r0, r8
 800c524:	46ac      	mov	ip, r5
 800c526:	46f2      	mov	sl, lr
 800c528:	f850 2b04 	ldr.w	r2, [r0], #4
 800c52c:	b293      	uxth	r3, r2
 800c52e:	fb06 e303 	mla	r3, r6, r3, lr
 800c532:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c536:	b29b      	uxth	r3, r3
 800c538:	ebaa 0303 	sub.w	r3, sl, r3
 800c53c:	0c12      	lsrs	r2, r2, #16
 800c53e:	f8dc a000 	ldr.w	sl, [ip]
 800c542:	fb06 e202 	mla	r2, r6, r2, lr
 800c546:	fa13 f38a 	uxtah	r3, r3, sl
 800c54a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c54e:	fa1f fa82 	uxth.w	sl, r2
 800c552:	f8dc 2000 	ldr.w	r2, [ip]
 800c556:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c55a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c55e:	b29b      	uxth	r3, r3
 800c560:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c564:	4581      	cmp	r9, r0
 800c566:	f84c 3b04 	str.w	r3, [ip], #4
 800c56a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c56e:	d2db      	bcs.n	800c528 <quorem+0x44>
 800c570:	f855 300b 	ldr.w	r3, [r5, fp]
 800c574:	b92b      	cbnz	r3, 800c582 <quorem+0x9e>
 800c576:	9b01      	ldr	r3, [sp, #4]
 800c578:	3b04      	subs	r3, #4
 800c57a:	429d      	cmp	r5, r3
 800c57c:	461a      	mov	r2, r3
 800c57e:	d32e      	bcc.n	800c5de <quorem+0xfa>
 800c580:	613c      	str	r4, [r7, #16]
 800c582:	4638      	mov	r0, r7
 800c584:	f001 fe9c 	bl	800e2c0 <__mcmp>
 800c588:	2800      	cmp	r0, #0
 800c58a:	db24      	blt.n	800c5d6 <quorem+0xf2>
 800c58c:	3601      	adds	r6, #1
 800c58e:	4628      	mov	r0, r5
 800c590:	f04f 0c00 	mov.w	ip, #0
 800c594:	f858 2b04 	ldr.w	r2, [r8], #4
 800c598:	f8d0 e000 	ldr.w	lr, [r0]
 800c59c:	b293      	uxth	r3, r2
 800c59e:	ebac 0303 	sub.w	r3, ip, r3
 800c5a2:	0c12      	lsrs	r2, r2, #16
 800c5a4:	fa13 f38e 	uxtah	r3, r3, lr
 800c5a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c5ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c5b0:	b29b      	uxth	r3, r3
 800c5b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5b6:	45c1      	cmp	r9, r8
 800c5b8:	f840 3b04 	str.w	r3, [r0], #4
 800c5bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c5c0:	d2e8      	bcs.n	800c594 <quorem+0xb0>
 800c5c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5ca:	b922      	cbnz	r2, 800c5d6 <quorem+0xf2>
 800c5cc:	3b04      	subs	r3, #4
 800c5ce:	429d      	cmp	r5, r3
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	d30a      	bcc.n	800c5ea <quorem+0x106>
 800c5d4:	613c      	str	r4, [r7, #16]
 800c5d6:	4630      	mov	r0, r6
 800c5d8:	b003      	add	sp, #12
 800c5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5de:	6812      	ldr	r2, [r2, #0]
 800c5e0:	3b04      	subs	r3, #4
 800c5e2:	2a00      	cmp	r2, #0
 800c5e4:	d1cc      	bne.n	800c580 <quorem+0x9c>
 800c5e6:	3c01      	subs	r4, #1
 800c5e8:	e7c7      	b.n	800c57a <quorem+0x96>
 800c5ea:	6812      	ldr	r2, [r2, #0]
 800c5ec:	3b04      	subs	r3, #4
 800c5ee:	2a00      	cmp	r2, #0
 800c5f0:	d1f0      	bne.n	800c5d4 <quorem+0xf0>
 800c5f2:	3c01      	subs	r4, #1
 800c5f4:	e7eb      	b.n	800c5ce <quorem+0xea>
 800c5f6:	2000      	movs	r0, #0
 800c5f8:	e7ee      	b.n	800c5d8 <quorem+0xf4>
 800c5fa:	0000      	movs	r0, r0
 800c5fc:	0000      	movs	r0, r0
	...

0800c600 <_dtoa_r>:
 800c600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c604:	ed2d 8b02 	vpush	{d8}
 800c608:	ec57 6b10 	vmov	r6, r7, d0
 800c60c:	b095      	sub	sp, #84	; 0x54
 800c60e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c610:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c614:	9105      	str	r1, [sp, #20]
 800c616:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c61a:	4604      	mov	r4, r0
 800c61c:	9209      	str	r2, [sp, #36]	; 0x24
 800c61e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c620:	b975      	cbnz	r5, 800c640 <_dtoa_r+0x40>
 800c622:	2010      	movs	r0, #16
 800c624:	f001 fb6a 	bl	800dcfc <malloc>
 800c628:	4602      	mov	r2, r0
 800c62a:	6260      	str	r0, [r4, #36]	; 0x24
 800c62c:	b920      	cbnz	r0, 800c638 <_dtoa_r+0x38>
 800c62e:	4bb2      	ldr	r3, [pc, #712]	; (800c8f8 <_dtoa_r+0x2f8>)
 800c630:	21ea      	movs	r1, #234	; 0xea
 800c632:	48b2      	ldr	r0, [pc, #712]	; (800c8fc <_dtoa_r+0x2fc>)
 800c634:	f002 fc34 	bl	800eea0 <__assert_func>
 800c638:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c63c:	6005      	str	r5, [r0, #0]
 800c63e:	60c5      	str	r5, [r0, #12]
 800c640:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c642:	6819      	ldr	r1, [r3, #0]
 800c644:	b151      	cbz	r1, 800c65c <_dtoa_r+0x5c>
 800c646:	685a      	ldr	r2, [r3, #4]
 800c648:	604a      	str	r2, [r1, #4]
 800c64a:	2301      	movs	r3, #1
 800c64c:	4093      	lsls	r3, r2
 800c64e:	608b      	str	r3, [r1, #8]
 800c650:	4620      	mov	r0, r4
 800c652:	f001 fbad 	bl	800ddb0 <_Bfree>
 800c656:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c658:	2200      	movs	r2, #0
 800c65a:	601a      	str	r2, [r3, #0]
 800c65c:	1e3b      	subs	r3, r7, #0
 800c65e:	bfb9      	ittee	lt
 800c660:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c664:	9303      	strlt	r3, [sp, #12]
 800c666:	2300      	movge	r3, #0
 800c668:	f8c8 3000 	strge.w	r3, [r8]
 800c66c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c670:	4ba3      	ldr	r3, [pc, #652]	; (800c900 <_dtoa_r+0x300>)
 800c672:	bfbc      	itt	lt
 800c674:	2201      	movlt	r2, #1
 800c676:	f8c8 2000 	strlt.w	r2, [r8]
 800c67a:	ea33 0309 	bics.w	r3, r3, r9
 800c67e:	d11b      	bne.n	800c6b8 <_dtoa_r+0xb8>
 800c680:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c682:	f242 730f 	movw	r3, #9999	; 0x270f
 800c686:	6013      	str	r3, [r2, #0]
 800c688:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c68c:	4333      	orrs	r3, r6
 800c68e:	f000 857a 	beq.w	800d186 <_dtoa_r+0xb86>
 800c692:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c694:	b963      	cbnz	r3, 800c6b0 <_dtoa_r+0xb0>
 800c696:	4b9b      	ldr	r3, [pc, #620]	; (800c904 <_dtoa_r+0x304>)
 800c698:	e024      	b.n	800c6e4 <_dtoa_r+0xe4>
 800c69a:	4b9b      	ldr	r3, [pc, #620]	; (800c908 <_dtoa_r+0x308>)
 800c69c:	9300      	str	r3, [sp, #0]
 800c69e:	3308      	adds	r3, #8
 800c6a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c6a2:	6013      	str	r3, [r2, #0]
 800c6a4:	9800      	ldr	r0, [sp, #0]
 800c6a6:	b015      	add	sp, #84	; 0x54
 800c6a8:	ecbd 8b02 	vpop	{d8}
 800c6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6b0:	4b94      	ldr	r3, [pc, #592]	; (800c904 <_dtoa_r+0x304>)
 800c6b2:	9300      	str	r3, [sp, #0]
 800c6b4:	3303      	adds	r3, #3
 800c6b6:	e7f3      	b.n	800c6a0 <_dtoa_r+0xa0>
 800c6b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	ec51 0b17 	vmov	r0, r1, d7
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c6c8:	f7f4 f9fe 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6cc:	4680      	mov	r8, r0
 800c6ce:	b158      	cbz	r0, 800c6e8 <_dtoa_r+0xe8>
 800c6d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	6013      	str	r3, [r2, #0]
 800c6d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	f000 8551 	beq.w	800d180 <_dtoa_r+0xb80>
 800c6de:	488b      	ldr	r0, [pc, #556]	; (800c90c <_dtoa_r+0x30c>)
 800c6e0:	6018      	str	r0, [r3, #0]
 800c6e2:	1e43      	subs	r3, r0, #1
 800c6e4:	9300      	str	r3, [sp, #0]
 800c6e6:	e7dd      	b.n	800c6a4 <_dtoa_r+0xa4>
 800c6e8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c6ec:	aa12      	add	r2, sp, #72	; 0x48
 800c6ee:	a913      	add	r1, sp, #76	; 0x4c
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	f001 ff05 	bl	800e500 <__d2b>
 800c6f6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c6fa:	4683      	mov	fp, r0
 800c6fc:	2d00      	cmp	r5, #0
 800c6fe:	d07c      	beq.n	800c7fa <_dtoa_r+0x1fa>
 800c700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c702:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800c706:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c70a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800c70e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c712:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c716:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c71a:	4b7d      	ldr	r3, [pc, #500]	; (800c910 <_dtoa_r+0x310>)
 800c71c:	2200      	movs	r2, #0
 800c71e:	4630      	mov	r0, r6
 800c720:	4639      	mov	r1, r7
 800c722:	f7f3 fdb1 	bl	8000288 <__aeabi_dsub>
 800c726:	a36e      	add	r3, pc, #440	; (adr r3, 800c8e0 <_dtoa_r+0x2e0>)
 800c728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72c:	f7f3 ff64 	bl	80005f8 <__aeabi_dmul>
 800c730:	a36d      	add	r3, pc, #436	; (adr r3, 800c8e8 <_dtoa_r+0x2e8>)
 800c732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c736:	f7f3 fda9 	bl	800028c <__adddf3>
 800c73a:	4606      	mov	r6, r0
 800c73c:	4628      	mov	r0, r5
 800c73e:	460f      	mov	r7, r1
 800c740:	f7f3 fef0 	bl	8000524 <__aeabi_i2d>
 800c744:	a36a      	add	r3, pc, #424	; (adr r3, 800c8f0 <_dtoa_r+0x2f0>)
 800c746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74a:	f7f3 ff55 	bl	80005f8 <__aeabi_dmul>
 800c74e:	4602      	mov	r2, r0
 800c750:	460b      	mov	r3, r1
 800c752:	4630      	mov	r0, r6
 800c754:	4639      	mov	r1, r7
 800c756:	f7f3 fd99 	bl	800028c <__adddf3>
 800c75a:	4606      	mov	r6, r0
 800c75c:	460f      	mov	r7, r1
 800c75e:	f7f4 f9fb 	bl	8000b58 <__aeabi_d2iz>
 800c762:	2200      	movs	r2, #0
 800c764:	4682      	mov	sl, r0
 800c766:	2300      	movs	r3, #0
 800c768:	4630      	mov	r0, r6
 800c76a:	4639      	mov	r1, r7
 800c76c:	f7f4 f9b6 	bl	8000adc <__aeabi_dcmplt>
 800c770:	b148      	cbz	r0, 800c786 <_dtoa_r+0x186>
 800c772:	4650      	mov	r0, sl
 800c774:	f7f3 fed6 	bl	8000524 <__aeabi_i2d>
 800c778:	4632      	mov	r2, r6
 800c77a:	463b      	mov	r3, r7
 800c77c:	f7f4 f9a4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c780:	b908      	cbnz	r0, 800c786 <_dtoa_r+0x186>
 800c782:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c786:	f1ba 0f16 	cmp.w	sl, #22
 800c78a:	d854      	bhi.n	800c836 <_dtoa_r+0x236>
 800c78c:	4b61      	ldr	r3, [pc, #388]	; (800c914 <_dtoa_r+0x314>)
 800c78e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c796:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c79a:	f7f4 f99f 	bl	8000adc <__aeabi_dcmplt>
 800c79e:	2800      	cmp	r0, #0
 800c7a0:	d04b      	beq.n	800c83a <_dtoa_r+0x23a>
 800c7a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	930e      	str	r3, [sp, #56]	; 0x38
 800c7aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c7ac:	1b5d      	subs	r5, r3, r5
 800c7ae:	1e6b      	subs	r3, r5, #1
 800c7b0:	9304      	str	r3, [sp, #16]
 800c7b2:	bf43      	ittte	mi
 800c7b4:	2300      	movmi	r3, #0
 800c7b6:	f1c5 0801 	rsbmi	r8, r5, #1
 800c7ba:	9304      	strmi	r3, [sp, #16]
 800c7bc:	f04f 0800 	movpl.w	r8, #0
 800c7c0:	f1ba 0f00 	cmp.w	sl, #0
 800c7c4:	db3b      	blt.n	800c83e <_dtoa_r+0x23e>
 800c7c6:	9b04      	ldr	r3, [sp, #16]
 800c7c8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c7cc:	4453      	add	r3, sl
 800c7ce:	9304      	str	r3, [sp, #16]
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	9306      	str	r3, [sp, #24]
 800c7d4:	9b05      	ldr	r3, [sp, #20]
 800c7d6:	2b09      	cmp	r3, #9
 800c7d8:	d869      	bhi.n	800c8ae <_dtoa_r+0x2ae>
 800c7da:	2b05      	cmp	r3, #5
 800c7dc:	bfc4      	itt	gt
 800c7de:	3b04      	subgt	r3, #4
 800c7e0:	9305      	strgt	r3, [sp, #20]
 800c7e2:	9b05      	ldr	r3, [sp, #20]
 800c7e4:	f1a3 0302 	sub.w	r3, r3, #2
 800c7e8:	bfcc      	ite	gt
 800c7ea:	2500      	movgt	r5, #0
 800c7ec:	2501      	movle	r5, #1
 800c7ee:	2b03      	cmp	r3, #3
 800c7f0:	d869      	bhi.n	800c8c6 <_dtoa_r+0x2c6>
 800c7f2:	e8df f003 	tbb	[pc, r3]
 800c7f6:	4e2c      	.short	0x4e2c
 800c7f8:	5a4c      	.short	0x5a4c
 800c7fa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c7fe:	441d      	add	r5, r3
 800c800:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c804:	2b20      	cmp	r3, #32
 800c806:	bfc1      	itttt	gt
 800c808:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c80c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c810:	fa09 f303 	lslgt.w	r3, r9, r3
 800c814:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c818:	bfda      	itte	le
 800c81a:	f1c3 0320 	rsble	r3, r3, #32
 800c81e:	fa06 f003 	lslle.w	r0, r6, r3
 800c822:	4318      	orrgt	r0, r3
 800c824:	f7f3 fe6e 	bl	8000504 <__aeabi_ui2d>
 800c828:	2301      	movs	r3, #1
 800c82a:	4606      	mov	r6, r0
 800c82c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c830:	3d01      	subs	r5, #1
 800c832:	9310      	str	r3, [sp, #64]	; 0x40
 800c834:	e771      	b.n	800c71a <_dtoa_r+0x11a>
 800c836:	2301      	movs	r3, #1
 800c838:	e7b6      	b.n	800c7a8 <_dtoa_r+0x1a8>
 800c83a:	900e      	str	r0, [sp, #56]	; 0x38
 800c83c:	e7b5      	b.n	800c7aa <_dtoa_r+0x1aa>
 800c83e:	f1ca 0300 	rsb	r3, sl, #0
 800c842:	9306      	str	r3, [sp, #24]
 800c844:	2300      	movs	r3, #0
 800c846:	eba8 080a 	sub.w	r8, r8, sl
 800c84a:	930d      	str	r3, [sp, #52]	; 0x34
 800c84c:	e7c2      	b.n	800c7d4 <_dtoa_r+0x1d4>
 800c84e:	2300      	movs	r3, #0
 800c850:	9308      	str	r3, [sp, #32]
 800c852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c854:	2b00      	cmp	r3, #0
 800c856:	dc39      	bgt.n	800c8cc <_dtoa_r+0x2cc>
 800c858:	f04f 0901 	mov.w	r9, #1
 800c85c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c860:	464b      	mov	r3, r9
 800c862:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c866:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c868:	2200      	movs	r2, #0
 800c86a:	6042      	str	r2, [r0, #4]
 800c86c:	2204      	movs	r2, #4
 800c86e:	f102 0614 	add.w	r6, r2, #20
 800c872:	429e      	cmp	r6, r3
 800c874:	6841      	ldr	r1, [r0, #4]
 800c876:	d92f      	bls.n	800c8d8 <_dtoa_r+0x2d8>
 800c878:	4620      	mov	r0, r4
 800c87a:	f001 fa59 	bl	800dd30 <_Balloc>
 800c87e:	9000      	str	r0, [sp, #0]
 800c880:	2800      	cmp	r0, #0
 800c882:	d14b      	bne.n	800c91c <_dtoa_r+0x31c>
 800c884:	4b24      	ldr	r3, [pc, #144]	; (800c918 <_dtoa_r+0x318>)
 800c886:	4602      	mov	r2, r0
 800c888:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c88c:	e6d1      	b.n	800c632 <_dtoa_r+0x32>
 800c88e:	2301      	movs	r3, #1
 800c890:	e7de      	b.n	800c850 <_dtoa_r+0x250>
 800c892:	2300      	movs	r3, #0
 800c894:	9308      	str	r3, [sp, #32]
 800c896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c898:	eb0a 0903 	add.w	r9, sl, r3
 800c89c:	f109 0301 	add.w	r3, r9, #1
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	9301      	str	r3, [sp, #4]
 800c8a4:	bfb8      	it	lt
 800c8a6:	2301      	movlt	r3, #1
 800c8a8:	e7dd      	b.n	800c866 <_dtoa_r+0x266>
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	e7f2      	b.n	800c894 <_dtoa_r+0x294>
 800c8ae:	2501      	movs	r5, #1
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	9305      	str	r3, [sp, #20]
 800c8b4:	9508      	str	r5, [sp, #32]
 800c8b6:	f04f 39ff 	mov.w	r9, #4294967295
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	f8cd 9004 	str.w	r9, [sp, #4]
 800c8c0:	2312      	movs	r3, #18
 800c8c2:	9209      	str	r2, [sp, #36]	; 0x24
 800c8c4:	e7cf      	b.n	800c866 <_dtoa_r+0x266>
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	9308      	str	r3, [sp, #32]
 800c8ca:	e7f4      	b.n	800c8b6 <_dtoa_r+0x2b6>
 800c8cc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c8d0:	f8cd 9004 	str.w	r9, [sp, #4]
 800c8d4:	464b      	mov	r3, r9
 800c8d6:	e7c6      	b.n	800c866 <_dtoa_r+0x266>
 800c8d8:	3101      	adds	r1, #1
 800c8da:	6041      	str	r1, [r0, #4]
 800c8dc:	0052      	lsls	r2, r2, #1
 800c8de:	e7c6      	b.n	800c86e <_dtoa_r+0x26e>
 800c8e0:	636f4361 	.word	0x636f4361
 800c8e4:	3fd287a7 	.word	0x3fd287a7
 800c8e8:	8b60c8b3 	.word	0x8b60c8b3
 800c8ec:	3fc68a28 	.word	0x3fc68a28
 800c8f0:	509f79fb 	.word	0x509f79fb
 800c8f4:	3fd34413 	.word	0x3fd34413
 800c8f8:	0800f376 	.word	0x0800f376
 800c8fc:	0800f38d 	.word	0x0800f38d
 800c900:	7ff00000 	.word	0x7ff00000
 800c904:	0800f372 	.word	0x0800f372
 800c908:	0800f369 	.word	0x0800f369
 800c90c:	0800f1ed 	.word	0x0800f1ed
 800c910:	3ff80000 	.word	0x3ff80000
 800c914:	0800f568 	.word	0x0800f568
 800c918:	0800f3ec 	.word	0x0800f3ec
 800c91c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c91e:	9a00      	ldr	r2, [sp, #0]
 800c920:	601a      	str	r2, [r3, #0]
 800c922:	9b01      	ldr	r3, [sp, #4]
 800c924:	2b0e      	cmp	r3, #14
 800c926:	f200 80ad 	bhi.w	800ca84 <_dtoa_r+0x484>
 800c92a:	2d00      	cmp	r5, #0
 800c92c:	f000 80aa 	beq.w	800ca84 <_dtoa_r+0x484>
 800c930:	f1ba 0f00 	cmp.w	sl, #0
 800c934:	dd36      	ble.n	800c9a4 <_dtoa_r+0x3a4>
 800c936:	4ac3      	ldr	r2, [pc, #780]	; (800cc44 <_dtoa_r+0x644>)
 800c938:	f00a 030f 	and.w	r3, sl, #15
 800c93c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c940:	ed93 7b00 	vldr	d7, [r3]
 800c944:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c948:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c94c:	eeb0 8a47 	vmov.f32	s16, s14
 800c950:	eef0 8a67 	vmov.f32	s17, s15
 800c954:	d016      	beq.n	800c984 <_dtoa_r+0x384>
 800c956:	4bbc      	ldr	r3, [pc, #752]	; (800cc48 <_dtoa_r+0x648>)
 800c958:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c95c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c960:	f7f3 ff74 	bl	800084c <__aeabi_ddiv>
 800c964:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c968:	f007 070f 	and.w	r7, r7, #15
 800c96c:	2503      	movs	r5, #3
 800c96e:	4eb6      	ldr	r6, [pc, #728]	; (800cc48 <_dtoa_r+0x648>)
 800c970:	b957      	cbnz	r7, 800c988 <_dtoa_r+0x388>
 800c972:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c976:	ec53 2b18 	vmov	r2, r3, d8
 800c97a:	f7f3 ff67 	bl	800084c <__aeabi_ddiv>
 800c97e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c982:	e029      	b.n	800c9d8 <_dtoa_r+0x3d8>
 800c984:	2502      	movs	r5, #2
 800c986:	e7f2      	b.n	800c96e <_dtoa_r+0x36e>
 800c988:	07f9      	lsls	r1, r7, #31
 800c98a:	d508      	bpl.n	800c99e <_dtoa_r+0x39e>
 800c98c:	ec51 0b18 	vmov	r0, r1, d8
 800c990:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c994:	f7f3 fe30 	bl	80005f8 <__aeabi_dmul>
 800c998:	ec41 0b18 	vmov	d8, r0, r1
 800c99c:	3501      	adds	r5, #1
 800c99e:	107f      	asrs	r7, r7, #1
 800c9a0:	3608      	adds	r6, #8
 800c9a2:	e7e5      	b.n	800c970 <_dtoa_r+0x370>
 800c9a4:	f000 80a6 	beq.w	800caf4 <_dtoa_r+0x4f4>
 800c9a8:	f1ca 0600 	rsb	r6, sl, #0
 800c9ac:	4ba5      	ldr	r3, [pc, #660]	; (800cc44 <_dtoa_r+0x644>)
 800c9ae:	4fa6      	ldr	r7, [pc, #664]	; (800cc48 <_dtoa_r+0x648>)
 800c9b0:	f006 020f 	and.w	r2, r6, #15
 800c9b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c9c0:	f7f3 fe1a 	bl	80005f8 <__aeabi_dmul>
 800c9c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9c8:	1136      	asrs	r6, r6, #4
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	2502      	movs	r5, #2
 800c9ce:	2e00      	cmp	r6, #0
 800c9d0:	f040 8085 	bne.w	800cade <_dtoa_r+0x4de>
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d1d2      	bne.n	800c97e <_dtoa_r+0x37e>
 800c9d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	f000 808c 	beq.w	800caf8 <_dtoa_r+0x4f8>
 800c9e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c9e4:	4b99      	ldr	r3, [pc, #612]	; (800cc4c <_dtoa_r+0x64c>)
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	4630      	mov	r0, r6
 800c9ea:	4639      	mov	r1, r7
 800c9ec:	f7f4 f876 	bl	8000adc <__aeabi_dcmplt>
 800c9f0:	2800      	cmp	r0, #0
 800c9f2:	f000 8081 	beq.w	800caf8 <_dtoa_r+0x4f8>
 800c9f6:	9b01      	ldr	r3, [sp, #4]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d07d      	beq.n	800caf8 <_dtoa_r+0x4f8>
 800c9fc:	f1b9 0f00 	cmp.w	r9, #0
 800ca00:	dd3c      	ble.n	800ca7c <_dtoa_r+0x47c>
 800ca02:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ca06:	9307      	str	r3, [sp, #28]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	4b91      	ldr	r3, [pc, #580]	; (800cc50 <_dtoa_r+0x650>)
 800ca0c:	4630      	mov	r0, r6
 800ca0e:	4639      	mov	r1, r7
 800ca10:	f7f3 fdf2 	bl	80005f8 <__aeabi_dmul>
 800ca14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca18:	3501      	adds	r5, #1
 800ca1a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ca1e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ca22:	4628      	mov	r0, r5
 800ca24:	f7f3 fd7e 	bl	8000524 <__aeabi_i2d>
 800ca28:	4632      	mov	r2, r6
 800ca2a:	463b      	mov	r3, r7
 800ca2c:	f7f3 fde4 	bl	80005f8 <__aeabi_dmul>
 800ca30:	4b88      	ldr	r3, [pc, #544]	; (800cc54 <_dtoa_r+0x654>)
 800ca32:	2200      	movs	r2, #0
 800ca34:	f7f3 fc2a 	bl	800028c <__adddf3>
 800ca38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ca3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca40:	9303      	str	r3, [sp, #12]
 800ca42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d15c      	bne.n	800cb02 <_dtoa_r+0x502>
 800ca48:	4b83      	ldr	r3, [pc, #524]	; (800cc58 <_dtoa_r+0x658>)
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	4630      	mov	r0, r6
 800ca4e:	4639      	mov	r1, r7
 800ca50:	f7f3 fc1a 	bl	8000288 <__aeabi_dsub>
 800ca54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca58:	4606      	mov	r6, r0
 800ca5a:	460f      	mov	r7, r1
 800ca5c:	f7f4 f85c 	bl	8000b18 <__aeabi_dcmpgt>
 800ca60:	2800      	cmp	r0, #0
 800ca62:	f040 8296 	bne.w	800cf92 <_dtoa_r+0x992>
 800ca66:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ca6a:	4630      	mov	r0, r6
 800ca6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca70:	4639      	mov	r1, r7
 800ca72:	f7f4 f833 	bl	8000adc <__aeabi_dcmplt>
 800ca76:	2800      	cmp	r0, #0
 800ca78:	f040 8288 	bne.w	800cf8c <_dtoa_r+0x98c>
 800ca7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ca80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ca84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	f2c0 8158 	blt.w	800cd3c <_dtoa_r+0x73c>
 800ca8c:	f1ba 0f0e 	cmp.w	sl, #14
 800ca90:	f300 8154 	bgt.w	800cd3c <_dtoa_r+0x73c>
 800ca94:	4b6b      	ldr	r3, [pc, #428]	; (800cc44 <_dtoa_r+0x644>)
 800ca96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ca9a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ca9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	f280 80e3 	bge.w	800cc6c <_dtoa_r+0x66c>
 800caa6:	9b01      	ldr	r3, [sp, #4]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	f300 80df 	bgt.w	800cc6c <_dtoa_r+0x66c>
 800caae:	f040 826d 	bne.w	800cf8c <_dtoa_r+0x98c>
 800cab2:	4b69      	ldr	r3, [pc, #420]	; (800cc58 <_dtoa_r+0x658>)
 800cab4:	2200      	movs	r2, #0
 800cab6:	4640      	mov	r0, r8
 800cab8:	4649      	mov	r1, r9
 800caba:	f7f3 fd9d 	bl	80005f8 <__aeabi_dmul>
 800cabe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cac2:	f7f4 f81f 	bl	8000b04 <__aeabi_dcmpge>
 800cac6:	9e01      	ldr	r6, [sp, #4]
 800cac8:	4637      	mov	r7, r6
 800caca:	2800      	cmp	r0, #0
 800cacc:	f040 8243 	bne.w	800cf56 <_dtoa_r+0x956>
 800cad0:	9d00      	ldr	r5, [sp, #0]
 800cad2:	2331      	movs	r3, #49	; 0x31
 800cad4:	f805 3b01 	strb.w	r3, [r5], #1
 800cad8:	f10a 0a01 	add.w	sl, sl, #1
 800cadc:	e23f      	b.n	800cf5e <_dtoa_r+0x95e>
 800cade:	07f2      	lsls	r2, r6, #31
 800cae0:	d505      	bpl.n	800caee <_dtoa_r+0x4ee>
 800cae2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cae6:	f7f3 fd87 	bl	80005f8 <__aeabi_dmul>
 800caea:	3501      	adds	r5, #1
 800caec:	2301      	movs	r3, #1
 800caee:	1076      	asrs	r6, r6, #1
 800caf0:	3708      	adds	r7, #8
 800caf2:	e76c      	b.n	800c9ce <_dtoa_r+0x3ce>
 800caf4:	2502      	movs	r5, #2
 800caf6:	e76f      	b.n	800c9d8 <_dtoa_r+0x3d8>
 800caf8:	9b01      	ldr	r3, [sp, #4]
 800cafa:	f8cd a01c 	str.w	sl, [sp, #28]
 800cafe:	930c      	str	r3, [sp, #48]	; 0x30
 800cb00:	e78d      	b.n	800ca1e <_dtoa_r+0x41e>
 800cb02:	9900      	ldr	r1, [sp, #0]
 800cb04:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cb06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb08:	4b4e      	ldr	r3, [pc, #312]	; (800cc44 <_dtoa_r+0x644>)
 800cb0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cb0e:	4401      	add	r1, r0
 800cb10:	9102      	str	r1, [sp, #8]
 800cb12:	9908      	ldr	r1, [sp, #32]
 800cb14:	eeb0 8a47 	vmov.f32	s16, s14
 800cb18:	eef0 8a67 	vmov.f32	s17, s15
 800cb1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cb24:	2900      	cmp	r1, #0
 800cb26:	d045      	beq.n	800cbb4 <_dtoa_r+0x5b4>
 800cb28:	494c      	ldr	r1, [pc, #304]	; (800cc5c <_dtoa_r+0x65c>)
 800cb2a:	2000      	movs	r0, #0
 800cb2c:	f7f3 fe8e 	bl	800084c <__aeabi_ddiv>
 800cb30:	ec53 2b18 	vmov	r2, r3, d8
 800cb34:	f7f3 fba8 	bl	8000288 <__aeabi_dsub>
 800cb38:	9d00      	ldr	r5, [sp, #0]
 800cb3a:	ec41 0b18 	vmov	d8, r0, r1
 800cb3e:	4639      	mov	r1, r7
 800cb40:	4630      	mov	r0, r6
 800cb42:	f7f4 f809 	bl	8000b58 <__aeabi_d2iz>
 800cb46:	900c      	str	r0, [sp, #48]	; 0x30
 800cb48:	f7f3 fcec 	bl	8000524 <__aeabi_i2d>
 800cb4c:	4602      	mov	r2, r0
 800cb4e:	460b      	mov	r3, r1
 800cb50:	4630      	mov	r0, r6
 800cb52:	4639      	mov	r1, r7
 800cb54:	f7f3 fb98 	bl	8000288 <__aeabi_dsub>
 800cb58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb5a:	3330      	adds	r3, #48	; 0x30
 800cb5c:	f805 3b01 	strb.w	r3, [r5], #1
 800cb60:	ec53 2b18 	vmov	r2, r3, d8
 800cb64:	4606      	mov	r6, r0
 800cb66:	460f      	mov	r7, r1
 800cb68:	f7f3 ffb8 	bl	8000adc <__aeabi_dcmplt>
 800cb6c:	2800      	cmp	r0, #0
 800cb6e:	d165      	bne.n	800cc3c <_dtoa_r+0x63c>
 800cb70:	4632      	mov	r2, r6
 800cb72:	463b      	mov	r3, r7
 800cb74:	4935      	ldr	r1, [pc, #212]	; (800cc4c <_dtoa_r+0x64c>)
 800cb76:	2000      	movs	r0, #0
 800cb78:	f7f3 fb86 	bl	8000288 <__aeabi_dsub>
 800cb7c:	ec53 2b18 	vmov	r2, r3, d8
 800cb80:	f7f3 ffac 	bl	8000adc <__aeabi_dcmplt>
 800cb84:	2800      	cmp	r0, #0
 800cb86:	f040 80b9 	bne.w	800ccfc <_dtoa_r+0x6fc>
 800cb8a:	9b02      	ldr	r3, [sp, #8]
 800cb8c:	429d      	cmp	r5, r3
 800cb8e:	f43f af75 	beq.w	800ca7c <_dtoa_r+0x47c>
 800cb92:	4b2f      	ldr	r3, [pc, #188]	; (800cc50 <_dtoa_r+0x650>)
 800cb94:	ec51 0b18 	vmov	r0, r1, d8
 800cb98:	2200      	movs	r2, #0
 800cb9a:	f7f3 fd2d 	bl	80005f8 <__aeabi_dmul>
 800cb9e:	4b2c      	ldr	r3, [pc, #176]	; (800cc50 <_dtoa_r+0x650>)
 800cba0:	ec41 0b18 	vmov	d8, r0, r1
 800cba4:	2200      	movs	r2, #0
 800cba6:	4630      	mov	r0, r6
 800cba8:	4639      	mov	r1, r7
 800cbaa:	f7f3 fd25 	bl	80005f8 <__aeabi_dmul>
 800cbae:	4606      	mov	r6, r0
 800cbb0:	460f      	mov	r7, r1
 800cbb2:	e7c4      	b.n	800cb3e <_dtoa_r+0x53e>
 800cbb4:	ec51 0b17 	vmov	r0, r1, d7
 800cbb8:	f7f3 fd1e 	bl	80005f8 <__aeabi_dmul>
 800cbbc:	9b02      	ldr	r3, [sp, #8]
 800cbbe:	9d00      	ldr	r5, [sp, #0]
 800cbc0:	930c      	str	r3, [sp, #48]	; 0x30
 800cbc2:	ec41 0b18 	vmov	d8, r0, r1
 800cbc6:	4639      	mov	r1, r7
 800cbc8:	4630      	mov	r0, r6
 800cbca:	f7f3 ffc5 	bl	8000b58 <__aeabi_d2iz>
 800cbce:	9011      	str	r0, [sp, #68]	; 0x44
 800cbd0:	f7f3 fca8 	bl	8000524 <__aeabi_i2d>
 800cbd4:	4602      	mov	r2, r0
 800cbd6:	460b      	mov	r3, r1
 800cbd8:	4630      	mov	r0, r6
 800cbda:	4639      	mov	r1, r7
 800cbdc:	f7f3 fb54 	bl	8000288 <__aeabi_dsub>
 800cbe0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cbe2:	3330      	adds	r3, #48	; 0x30
 800cbe4:	f805 3b01 	strb.w	r3, [r5], #1
 800cbe8:	9b02      	ldr	r3, [sp, #8]
 800cbea:	429d      	cmp	r5, r3
 800cbec:	4606      	mov	r6, r0
 800cbee:	460f      	mov	r7, r1
 800cbf0:	f04f 0200 	mov.w	r2, #0
 800cbf4:	d134      	bne.n	800cc60 <_dtoa_r+0x660>
 800cbf6:	4b19      	ldr	r3, [pc, #100]	; (800cc5c <_dtoa_r+0x65c>)
 800cbf8:	ec51 0b18 	vmov	r0, r1, d8
 800cbfc:	f7f3 fb46 	bl	800028c <__adddf3>
 800cc00:	4602      	mov	r2, r0
 800cc02:	460b      	mov	r3, r1
 800cc04:	4630      	mov	r0, r6
 800cc06:	4639      	mov	r1, r7
 800cc08:	f7f3 ff86 	bl	8000b18 <__aeabi_dcmpgt>
 800cc0c:	2800      	cmp	r0, #0
 800cc0e:	d175      	bne.n	800ccfc <_dtoa_r+0x6fc>
 800cc10:	ec53 2b18 	vmov	r2, r3, d8
 800cc14:	4911      	ldr	r1, [pc, #68]	; (800cc5c <_dtoa_r+0x65c>)
 800cc16:	2000      	movs	r0, #0
 800cc18:	f7f3 fb36 	bl	8000288 <__aeabi_dsub>
 800cc1c:	4602      	mov	r2, r0
 800cc1e:	460b      	mov	r3, r1
 800cc20:	4630      	mov	r0, r6
 800cc22:	4639      	mov	r1, r7
 800cc24:	f7f3 ff5a 	bl	8000adc <__aeabi_dcmplt>
 800cc28:	2800      	cmp	r0, #0
 800cc2a:	f43f af27 	beq.w	800ca7c <_dtoa_r+0x47c>
 800cc2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cc30:	1e6b      	subs	r3, r5, #1
 800cc32:	930c      	str	r3, [sp, #48]	; 0x30
 800cc34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cc38:	2b30      	cmp	r3, #48	; 0x30
 800cc3a:	d0f8      	beq.n	800cc2e <_dtoa_r+0x62e>
 800cc3c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800cc40:	e04a      	b.n	800ccd8 <_dtoa_r+0x6d8>
 800cc42:	bf00      	nop
 800cc44:	0800f568 	.word	0x0800f568
 800cc48:	0800f540 	.word	0x0800f540
 800cc4c:	3ff00000 	.word	0x3ff00000
 800cc50:	40240000 	.word	0x40240000
 800cc54:	401c0000 	.word	0x401c0000
 800cc58:	40140000 	.word	0x40140000
 800cc5c:	3fe00000 	.word	0x3fe00000
 800cc60:	4baf      	ldr	r3, [pc, #700]	; (800cf20 <_dtoa_r+0x920>)
 800cc62:	f7f3 fcc9 	bl	80005f8 <__aeabi_dmul>
 800cc66:	4606      	mov	r6, r0
 800cc68:	460f      	mov	r7, r1
 800cc6a:	e7ac      	b.n	800cbc6 <_dtoa_r+0x5c6>
 800cc6c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cc70:	9d00      	ldr	r5, [sp, #0]
 800cc72:	4642      	mov	r2, r8
 800cc74:	464b      	mov	r3, r9
 800cc76:	4630      	mov	r0, r6
 800cc78:	4639      	mov	r1, r7
 800cc7a:	f7f3 fde7 	bl	800084c <__aeabi_ddiv>
 800cc7e:	f7f3 ff6b 	bl	8000b58 <__aeabi_d2iz>
 800cc82:	9002      	str	r0, [sp, #8]
 800cc84:	f7f3 fc4e 	bl	8000524 <__aeabi_i2d>
 800cc88:	4642      	mov	r2, r8
 800cc8a:	464b      	mov	r3, r9
 800cc8c:	f7f3 fcb4 	bl	80005f8 <__aeabi_dmul>
 800cc90:	4602      	mov	r2, r0
 800cc92:	460b      	mov	r3, r1
 800cc94:	4630      	mov	r0, r6
 800cc96:	4639      	mov	r1, r7
 800cc98:	f7f3 faf6 	bl	8000288 <__aeabi_dsub>
 800cc9c:	9e02      	ldr	r6, [sp, #8]
 800cc9e:	9f01      	ldr	r7, [sp, #4]
 800cca0:	3630      	adds	r6, #48	; 0x30
 800cca2:	f805 6b01 	strb.w	r6, [r5], #1
 800cca6:	9e00      	ldr	r6, [sp, #0]
 800cca8:	1bae      	subs	r6, r5, r6
 800ccaa:	42b7      	cmp	r7, r6
 800ccac:	4602      	mov	r2, r0
 800ccae:	460b      	mov	r3, r1
 800ccb0:	d137      	bne.n	800cd22 <_dtoa_r+0x722>
 800ccb2:	f7f3 faeb 	bl	800028c <__adddf3>
 800ccb6:	4642      	mov	r2, r8
 800ccb8:	464b      	mov	r3, r9
 800ccba:	4606      	mov	r6, r0
 800ccbc:	460f      	mov	r7, r1
 800ccbe:	f7f3 ff2b 	bl	8000b18 <__aeabi_dcmpgt>
 800ccc2:	b9c8      	cbnz	r0, 800ccf8 <_dtoa_r+0x6f8>
 800ccc4:	4642      	mov	r2, r8
 800ccc6:	464b      	mov	r3, r9
 800ccc8:	4630      	mov	r0, r6
 800ccca:	4639      	mov	r1, r7
 800cccc:	f7f3 fefc 	bl	8000ac8 <__aeabi_dcmpeq>
 800ccd0:	b110      	cbz	r0, 800ccd8 <_dtoa_r+0x6d8>
 800ccd2:	9b02      	ldr	r3, [sp, #8]
 800ccd4:	07d9      	lsls	r1, r3, #31
 800ccd6:	d40f      	bmi.n	800ccf8 <_dtoa_r+0x6f8>
 800ccd8:	4620      	mov	r0, r4
 800ccda:	4659      	mov	r1, fp
 800ccdc:	f001 f868 	bl	800ddb0 <_Bfree>
 800cce0:	2300      	movs	r3, #0
 800cce2:	702b      	strb	r3, [r5, #0]
 800cce4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cce6:	f10a 0001 	add.w	r0, sl, #1
 800ccea:	6018      	str	r0, [r3, #0]
 800ccec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	f43f acd8 	beq.w	800c6a4 <_dtoa_r+0xa4>
 800ccf4:	601d      	str	r5, [r3, #0]
 800ccf6:	e4d5      	b.n	800c6a4 <_dtoa_r+0xa4>
 800ccf8:	f8cd a01c 	str.w	sl, [sp, #28]
 800ccfc:	462b      	mov	r3, r5
 800ccfe:	461d      	mov	r5, r3
 800cd00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd04:	2a39      	cmp	r2, #57	; 0x39
 800cd06:	d108      	bne.n	800cd1a <_dtoa_r+0x71a>
 800cd08:	9a00      	ldr	r2, [sp, #0]
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d1f7      	bne.n	800ccfe <_dtoa_r+0x6fe>
 800cd0e:	9a07      	ldr	r2, [sp, #28]
 800cd10:	9900      	ldr	r1, [sp, #0]
 800cd12:	3201      	adds	r2, #1
 800cd14:	9207      	str	r2, [sp, #28]
 800cd16:	2230      	movs	r2, #48	; 0x30
 800cd18:	700a      	strb	r2, [r1, #0]
 800cd1a:	781a      	ldrb	r2, [r3, #0]
 800cd1c:	3201      	adds	r2, #1
 800cd1e:	701a      	strb	r2, [r3, #0]
 800cd20:	e78c      	b.n	800cc3c <_dtoa_r+0x63c>
 800cd22:	4b7f      	ldr	r3, [pc, #508]	; (800cf20 <_dtoa_r+0x920>)
 800cd24:	2200      	movs	r2, #0
 800cd26:	f7f3 fc67 	bl	80005f8 <__aeabi_dmul>
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	4606      	mov	r6, r0
 800cd30:	460f      	mov	r7, r1
 800cd32:	f7f3 fec9 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd36:	2800      	cmp	r0, #0
 800cd38:	d09b      	beq.n	800cc72 <_dtoa_r+0x672>
 800cd3a:	e7cd      	b.n	800ccd8 <_dtoa_r+0x6d8>
 800cd3c:	9a08      	ldr	r2, [sp, #32]
 800cd3e:	2a00      	cmp	r2, #0
 800cd40:	f000 80c4 	beq.w	800cecc <_dtoa_r+0x8cc>
 800cd44:	9a05      	ldr	r2, [sp, #20]
 800cd46:	2a01      	cmp	r2, #1
 800cd48:	f300 80a8 	bgt.w	800ce9c <_dtoa_r+0x89c>
 800cd4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cd4e:	2a00      	cmp	r2, #0
 800cd50:	f000 80a0 	beq.w	800ce94 <_dtoa_r+0x894>
 800cd54:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cd58:	9e06      	ldr	r6, [sp, #24]
 800cd5a:	4645      	mov	r5, r8
 800cd5c:	9a04      	ldr	r2, [sp, #16]
 800cd5e:	2101      	movs	r1, #1
 800cd60:	441a      	add	r2, r3
 800cd62:	4620      	mov	r0, r4
 800cd64:	4498      	add	r8, r3
 800cd66:	9204      	str	r2, [sp, #16]
 800cd68:	f001 f928 	bl	800dfbc <__i2b>
 800cd6c:	4607      	mov	r7, r0
 800cd6e:	2d00      	cmp	r5, #0
 800cd70:	dd0b      	ble.n	800cd8a <_dtoa_r+0x78a>
 800cd72:	9b04      	ldr	r3, [sp, #16]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	dd08      	ble.n	800cd8a <_dtoa_r+0x78a>
 800cd78:	42ab      	cmp	r3, r5
 800cd7a:	9a04      	ldr	r2, [sp, #16]
 800cd7c:	bfa8      	it	ge
 800cd7e:	462b      	movge	r3, r5
 800cd80:	eba8 0803 	sub.w	r8, r8, r3
 800cd84:	1aed      	subs	r5, r5, r3
 800cd86:	1ad3      	subs	r3, r2, r3
 800cd88:	9304      	str	r3, [sp, #16]
 800cd8a:	9b06      	ldr	r3, [sp, #24]
 800cd8c:	b1fb      	cbz	r3, 800cdce <_dtoa_r+0x7ce>
 800cd8e:	9b08      	ldr	r3, [sp, #32]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	f000 809f 	beq.w	800ced4 <_dtoa_r+0x8d4>
 800cd96:	2e00      	cmp	r6, #0
 800cd98:	dd11      	ble.n	800cdbe <_dtoa_r+0x7be>
 800cd9a:	4639      	mov	r1, r7
 800cd9c:	4632      	mov	r2, r6
 800cd9e:	4620      	mov	r0, r4
 800cda0:	f001 f9c8 	bl	800e134 <__pow5mult>
 800cda4:	465a      	mov	r2, fp
 800cda6:	4601      	mov	r1, r0
 800cda8:	4607      	mov	r7, r0
 800cdaa:	4620      	mov	r0, r4
 800cdac:	f001 f91c 	bl	800dfe8 <__multiply>
 800cdb0:	4659      	mov	r1, fp
 800cdb2:	9007      	str	r0, [sp, #28]
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	f000 fffb 	bl	800ddb0 <_Bfree>
 800cdba:	9b07      	ldr	r3, [sp, #28]
 800cdbc:	469b      	mov	fp, r3
 800cdbe:	9b06      	ldr	r3, [sp, #24]
 800cdc0:	1b9a      	subs	r2, r3, r6
 800cdc2:	d004      	beq.n	800cdce <_dtoa_r+0x7ce>
 800cdc4:	4659      	mov	r1, fp
 800cdc6:	4620      	mov	r0, r4
 800cdc8:	f001 f9b4 	bl	800e134 <__pow5mult>
 800cdcc:	4683      	mov	fp, r0
 800cdce:	2101      	movs	r1, #1
 800cdd0:	4620      	mov	r0, r4
 800cdd2:	f001 f8f3 	bl	800dfbc <__i2b>
 800cdd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	4606      	mov	r6, r0
 800cddc:	dd7c      	ble.n	800ced8 <_dtoa_r+0x8d8>
 800cdde:	461a      	mov	r2, r3
 800cde0:	4601      	mov	r1, r0
 800cde2:	4620      	mov	r0, r4
 800cde4:	f001 f9a6 	bl	800e134 <__pow5mult>
 800cde8:	9b05      	ldr	r3, [sp, #20]
 800cdea:	2b01      	cmp	r3, #1
 800cdec:	4606      	mov	r6, r0
 800cdee:	dd76      	ble.n	800cede <_dtoa_r+0x8de>
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	9306      	str	r3, [sp, #24]
 800cdf4:	6933      	ldr	r3, [r6, #16]
 800cdf6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cdfa:	6918      	ldr	r0, [r3, #16]
 800cdfc:	f001 f88e 	bl	800df1c <__hi0bits>
 800ce00:	f1c0 0020 	rsb	r0, r0, #32
 800ce04:	9b04      	ldr	r3, [sp, #16]
 800ce06:	4418      	add	r0, r3
 800ce08:	f010 001f 	ands.w	r0, r0, #31
 800ce0c:	f000 8086 	beq.w	800cf1c <_dtoa_r+0x91c>
 800ce10:	f1c0 0320 	rsb	r3, r0, #32
 800ce14:	2b04      	cmp	r3, #4
 800ce16:	dd7f      	ble.n	800cf18 <_dtoa_r+0x918>
 800ce18:	f1c0 001c 	rsb	r0, r0, #28
 800ce1c:	9b04      	ldr	r3, [sp, #16]
 800ce1e:	4403      	add	r3, r0
 800ce20:	4480      	add	r8, r0
 800ce22:	4405      	add	r5, r0
 800ce24:	9304      	str	r3, [sp, #16]
 800ce26:	f1b8 0f00 	cmp.w	r8, #0
 800ce2a:	dd05      	ble.n	800ce38 <_dtoa_r+0x838>
 800ce2c:	4659      	mov	r1, fp
 800ce2e:	4642      	mov	r2, r8
 800ce30:	4620      	mov	r0, r4
 800ce32:	f001 f9d9 	bl	800e1e8 <__lshift>
 800ce36:	4683      	mov	fp, r0
 800ce38:	9b04      	ldr	r3, [sp, #16]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	dd05      	ble.n	800ce4a <_dtoa_r+0x84a>
 800ce3e:	4631      	mov	r1, r6
 800ce40:	461a      	mov	r2, r3
 800ce42:	4620      	mov	r0, r4
 800ce44:	f001 f9d0 	bl	800e1e8 <__lshift>
 800ce48:	4606      	mov	r6, r0
 800ce4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d069      	beq.n	800cf24 <_dtoa_r+0x924>
 800ce50:	4631      	mov	r1, r6
 800ce52:	4658      	mov	r0, fp
 800ce54:	f001 fa34 	bl	800e2c0 <__mcmp>
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	da63      	bge.n	800cf24 <_dtoa_r+0x924>
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	4659      	mov	r1, fp
 800ce60:	220a      	movs	r2, #10
 800ce62:	4620      	mov	r0, r4
 800ce64:	f000 ffc6 	bl	800ddf4 <__multadd>
 800ce68:	9b08      	ldr	r3, [sp, #32]
 800ce6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce6e:	4683      	mov	fp, r0
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	f000 818f 	beq.w	800d194 <_dtoa_r+0xb94>
 800ce76:	4639      	mov	r1, r7
 800ce78:	2300      	movs	r3, #0
 800ce7a:	220a      	movs	r2, #10
 800ce7c:	4620      	mov	r0, r4
 800ce7e:	f000 ffb9 	bl	800ddf4 <__multadd>
 800ce82:	f1b9 0f00 	cmp.w	r9, #0
 800ce86:	4607      	mov	r7, r0
 800ce88:	f300 808e 	bgt.w	800cfa8 <_dtoa_r+0x9a8>
 800ce8c:	9b05      	ldr	r3, [sp, #20]
 800ce8e:	2b02      	cmp	r3, #2
 800ce90:	dc50      	bgt.n	800cf34 <_dtoa_r+0x934>
 800ce92:	e089      	b.n	800cfa8 <_dtoa_r+0x9a8>
 800ce94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ce96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ce9a:	e75d      	b.n	800cd58 <_dtoa_r+0x758>
 800ce9c:	9b01      	ldr	r3, [sp, #4]
 800ce9e:	1e5e      	subs	r6, r3, #1
 800cea0:	9b06      	ldr	r3, [sp, #24]
 800cea2:	42b3      	cmp	r3, r6
 800cea4:	bfbf      	itttt	lt
 800cea6:	9b06      	ldrlt	r3, [sp, #24]
 800cea8:	9606      	strlt	r6, [sp, #24]
 800ceaa:	1af2      	sublt	r2, r6, r3
 800ceac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ceae:	bfb6      	itet	lt
 800ceb0:	189b      	addlt	r3, r3, r2
 800ceb2:	1b9e      	subge	r6, r3, r6
 800ceb4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800ceb6:	9b01      	ldr	r3, [sp, #4]
 800ceb8:	bfb8      	it	lt
 800ceba:	2600      	movlt	r6, #0
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	bfb5      	itete	lt
 800cec0:	eba8 0503 	sublt.w	r5, r8, r3
 800cec4:	9b01      	ldrge	r3, [sp, #4]
 800cec6:	2300      	movlt	r3, #0
 800cec8:	4645      	movge	r5, r8
 800ceca:	e747      	b.n	800cd5c <_dtoa_r+0x75c>
 800cecc:	9e06      	ldr	r6, [sp, #24]
 800cece:	9f08      	ldr	r7, [sp, #32]
 800ced0:	4645      	mov	r5, r8
 800ced2:	e74c      	b.n	800cd6e <_dtoa_r+0x76e>
 800ced4:	9a06      	ldr	r2, [sp, #24]
 800ced6:	e775      	b.n	800cdc4 <_dtoa_r+0x7c4>
 800ced8:	9b05      	ldr	r3, [sp, #20]
 800ceda:	2b01      	cmp	r3, #1
 800cedc:	dc18      	bgt.n	800cf10 <_dtoa_r+0x910>
 800cede:	9b02      	ldr	r3, [sp, #8]
 800cee0:	b9b3      	cbnz	r3, 800cf10 <_dtoa_r+0x910>
 800cee2:	9b03      	ldr	r3, [sp, #12]
 800cee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cee8:	b9a3      	cbnz	r3, 800cf14 <_dtoa_r+0x914>
 800ceea:	9b03      	ldr	r3, [sp, #12]
 800ceec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cef0:	0d1b      	lsrs	r3, r3, #20
 800cef2:	051b      	lsls	r3, r3, #20
 800cef4:	b12b      	cbz	r3, 800cf02 <_dtoa_r+0x902>
 800cef6:	9b04      	ldr	r3, [sp, #16]
 800cef8:	3301      	adds	r3, #1
 800cefa:	9304      	str	r3, [sp, #16]
 800cefc:	f108 0801 	add.w	r8, r8, #1
 800cf00:	2301      	movs	r3, #1
 800cf02:	9306      	str	r3, [sp, #24]
 800cf04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	f47f af74 	bne.w	800cdf4 <_dtoa_r+0x7f4>
 800cf0c:	2001      	movs	r0, #1
 800cf0e:	e779      	b.n	800ce04 <_dtoa_r+0x804>
 800cf10:	2300      	movs	r3, #0
 800cf12:	e7f6      	b.n	800cf02 <_dtoa_r+0x902>
 800cf14:	9b02      	ldr	r3, [sp, #8]
 800cf16:	e7f4      	b.n	800cf02 <_dtoa_r+0x902>
 800cf18:	d085      	beq.n	800ce26 <_dtoa_r+0x826>
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	301c      	adds	r0, #28
 800cf1e:	e77d      	b.n	800ce1c <_dtoa_r+0x81c>
 800cf20:	40240000 	.word	0x40240000
 800cf24:	9b01      	ldr	r3, [sp, #4]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	dc38      	bgt.n	800cf9c <_dtoa_r+0x99c>
 800cf2a:	9b05      	ldr	r3, [sp, #20]
 800cf2c:	2b02      	cmp	r3, #2
 800cf2e:	dd35      	ble.n	800cf9c <_dtoa_r+0x99c>
 800cf30:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800cf34:	f1b9 0f00 	cmp.w	r9, #0
 800cf38:	d10d      	bne.n	800cf56 <_dtoa_r+0x956>
 800cf3a:	4631      	mov	r1, r6
 800cf3c:	464b      	mov	r3, r9
 800cf3e:	2205      	movs	r2, #5
 800cf40:	4620      	mov	r0, r4
 800cf42:	f000 ff57 	bl	800ddf4 <__multadd>
 800cf46:	4601      	mov	r1, r0
 800cf48:	4606      	mov	r6, r0
 800cf4a:	4658      	mov	r0, fp
 800cf4c:	f001 f9b8 	bl	800e2c0 <__mcmp>
 800cf50:	2800      	cmp	r0, #0
 800cf52:	f73f adbd 	bgt.w	800cad0 <_dtoa_r+0x4d0>
 800cf56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf58:	9d00      	ldr	r5, [sp, #0]
 800cf5a:	ea6f 0a03 	mvn.w	sl, r3
 800cf5e:	f04f 0800 	mov.w	r8, #0
 800cf62:	4631      	mov	r1, r6
 800cf64:	4620      	mov	r0, r4
 800cf66:	f000 ff23 	bl	800ddb0 <_Bfree>
 800cf6a:	2f00      	cmp	r7, #0
 800cf6c:	f43f aeb4 	beq.w	800ccd8 <_dtoa_r+0x6d8>
 800cf70:	f1b8 0f00 	cmp.w	r8, #0
 800cf74:	d005      	beq.n	800cf82 <_dtoa_r+0x982>
 800cf76:	45b8      	cmp	r8, r7
 800cf78:	d003      	beq.n	800cf82 <_dtoa_r+0x982>
 800cf7a:	4641      	mov	r1, r8
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	f000 ff17 	bl	800ddb0 <_Bfree>
 800cf82:	4639      	mov	r1, r7
 800cf84:	4620      	mov	r0, r4
 800cf86:	f000 ff13 	bl	800ddb0 <_Bfree>
 800cf8a:	e6a5      	b.n	800ccd8 <_dtoa_r+0x6d8>
 800cf8c:	2600      	movs	r6, #0
 800cf8e:	4637      	mov	r7, r6
 800cf90:	e7e1      	b.n	800cf56 <_dtoa_r+0x956>
 800cf92:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cf94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800cf98:	4637      	mov	r7, r6
 800cf9a:	e599      	b.n	800cad0 <_dtoa_r+0x4d0>
 800cf9c:	9b08      	ldr	r3, [sp, #32]
 800cf9e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	f000 80fd 	beq.w	800d1a2 <_dtoa_r+0xba2>
 800cfa8:	2d00      	cmp	r5, #0
 800cfaa:	dd05      	ble.n	800cfb8 <_dtoa_r+0x9b8>
 800cfac:	4639      	mov	r1, r7
 800cfae:	462a      	mov	r2, r5
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	f001 f919 	bl	800e1e8 <__lshift>
 800cfb6:	4607      	mov	r7, r0
 800cfb8:	9b06      	ldr	r3, [sp, #24]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d05c      	beq.n	800d078 <_dtoa_r+0xa78>
 800cfbe:	6879      	ldr	r1, [r7, #4]
 800cfc0:	4620      	mov	r0, r4
 800cfc2:	f000 feb5 	bl	800dd30 <_Balloc>
 800cfc6:	4605      	mov	r5, r0
 800cfc8:	b928      	cbnz	r0, 800cfd6 <_dtoa_r+0x9d6>
 800cfca:	4b80      	ldr	r3, [pc, #512]	; (800d1cc <_dtoa_r+0xbcc>)
 800cfcc:	4602      	mov	r2, r0
 800cfce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cfd2:	f7ff bb2e 	b.w	800c632 <_dtoa_r+0x32>
 800cfd6:	693a      	ldr	r2, [r7, #16]
 800cfd8:	3202      	adds	r2, #2
 800cfda:	0092      	lsls	r2, r2, #2
 800cfdc:	f107 010c 	add.w	r1, r7, #12
 800cfe0:	300c      	adds	r0, #12
 800cfe2:	f7fd fbc7 	bl	800a774 <memcpy>
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	4629      	mov	r1, r5
 800cfea:	4620      	mov	r0, r4
 800cfec:	f001 f8fc 	bl	800e1e8 <__lshift>
 800cff0:	9b00      	ldr	r3, [sp, #0]
 800cff2:	3301      	adds	r3, #1
 800cff4:	9301      	str	r3, [sp, #4]
 800cff6:	9b00      	ldr	r3, [sp, #0]
 800cff8:	444b      	add	r3, r9
 800cffa:	9307      	str	r3, [sp, #28]
 800cffc:	9b02      	ldr	r3, [sp, #8]
 800cffe:	f003 0301 	and.w	r3, r3, #1
 800d002:	46b8      	mov	r8, r7
 800d004:	9306      	str	r3, [sp, #24]
 800d006:	4607      	mov	r7, r0
 800d008:	9b01      	ldr	r3, [sp, #4]
 800d00a:	4631      	mov	r1, r6
 800d00c:	3b01      	subs	r3, #1
 800d00e:	4658      	mov	r0, fp
 800d010:	9302      	str	r3, [sp, #8]
 800d012:	f7ff fa67 	bl	800c4e4 <quorem>
 800d016:	4603      	mov	r3, r0
 800d018:	3330      	adds	r3, #48	; 0x30
 800d01a:	9004      	str	r0, [sp, #16]
 800d01c:	4641      	mov	r1, r8
 800d01e:	4658      	mov	r0, fp
 800d020:	9308      	str	r3, [sp, #32]
 800d022:	f001 f94d 	bl	800e2c0 <__mcmp>
 800d026:	463a      	mov	r2, r7
 800d028:	4681      	mov	r9, r0
 800d02a:	4631      	mov	r1, r6
 800d02c:	4620      	mov	r0, r4
 800d02e:	f001 f963 	bl	800e2f8 <__mdiff>
 800d032:	68c2      	ldr	r2, [r0, #12]
 800d034:	9b08      	ldr	r3, [sp, #32]
 800d036:	4605      	mov	r5, r0
 800d038:	bb02      	cbnz	r2, 800d07c <_dtoa_r+0xa7c>
 800d03a:	4601      	mov	r1, r0
 800d03c:	4658      	mov	r0, fp
 800d03e:	f001 f93f 	bl	800e2c0 <__mcmp>
 800d042:	9b08      	ldr	r3, [sp, #32]
 800d044:	4602      	mov	r2, r0
 800d046:	4629      	mov	r1, r5
 800d048:	4620      	mov	r0, r4
 800d04a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800d04e:	f000 feaf 	bl	800ddb0 <_Bfree>
 800d052:	9b05      	ldr	r3, [sp, #20]
 800d054:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d056:	9d01      	ldr	r5, [sp, #4]
 800d058:	ea43 0102 	orr.w	r1, r3, r2
 800d05c:	9b06      	ldr	r3, [sp, #24]
 800d05e:	430b      	orrs	r3, r1
 800d060:	9b08      	ldr	r3, [sp, #32]
 800d062:	d10d      	bne.n	800d080 <_dtoa_r+0xa80>
 800d064:	2b39      	cmp	r3, #57	; 0x39
 800d066:	d029      	beq.n	800d0bc <_dtoa_r+0xabc>
 800d068:	f1b9 0f00 	cmp.w	r9, #0
 800d06c:	dd01      	ble.n	800d072 <_dtoa_r+0xa72>
 800d06e:	9b04      	ldr	r3, [sp, #16]
 800d070:	3331      	adds	r3, #49	; 0x31
 800d072:	9a02      	ldr	r2, [sp, #8]
 800d074:	7013      	strb	r3, [r2, #0]
 800d076:	e774      	b.n	800cf62 <_dtoa_r+0x962>
 800d078:	4638      	mov	r0, r7
 800d07a:	e7b9      	b.n	800cff0 <_dtoa_r+0x9f0>
 800d07c:	2201      	movs	r2, #1
 800d07e:	e7e2      	b.n	800d046 <_dtoa_r+0xa46>
 800d080:	f1b9 0f00 	cmp.w	r9, #0
 800d084:	db06      	blt.n	800d094 <_dtoa_r+0xa94>
 800d086:	9905      	ldr	r1, [sp, #20]
 800d088:	ea41 0909 	orr.w	r9, r1, r9
 800d08c:	9906      	ldr	r1, [sp, #24]
 800d08e:	ea59 0101 	orrs.w	r1, r9, r1
 800d092:	d120      	bne.n	800d0d6 <_dtoa_r+0xad6>
 800d094:	2a00      	cmp	r2, #0
 800d096:	ddec      	ble.n	800d072 <_dtoa_r+0xa72>
 800d098:	4659      	mov	r1, fp
 800d09a:	2201      	movs	r2, #1
 800d09c:	4620      	mov	r0, r4
 800d09e:	9301      	str	r3, [sp, #4]
 800d0a0:	f001 f8a2 	bl	800e1e8 <__lshift>
 800d0a4:	4631      	mov	r1, r6
 800d0a6:	4683      	mov	fp, r0
 800d0a8:	f001 f90a 	bl	800e2c0 <__mcmp>
 800d0ac:	2800      	cmp	r0, #0
 800d0ae:	9b01      	ldr	r3, [sp, #4]
 800d0b0:	dc02      	bgt.n	800d0b8 <_dtoa_r+0xab8>
 800d0b2:	d1de      	bne.n	800d072 <_dtoa_r+0xa72>
 800d0b4:	07da      	lsls	r2, r3, #31
 800d0b6:	d5dc      	bpl.n	800d072 <_dtoa_r+0xa72>
 800d0b8:	2b39      	cmp	r3, #57	; 0x39
 800d0ba:	d1d8      	bne.n	800d06e <_dtoa_r+0xa6e>
 800d0bc:	9a02      	ldr	r2, [sp, #8]
 800d0be:	2339      	movs	r3, #57	; 0x39
 800d0c0:	7013      	strb	r3, [r2, #0]
 800d0c2:	462b      	mov	r3, r5
 800d0c4:	461d      	mov	r5, r3
 800d0c6:	3b01      	subs	r3, #1
 800d0c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d0cc:	2a39      	cmp	r2, #57	; 0x39
 800d0ce:	d050      	beq.n	800d172 <_dtoa_r+0xb72>
 800d0d0:	3201      	adds	r2, #1
 800d0d2:	701a      	strb	r2, [r3, #0]
 800d0d4:	e745      	b.n	800cf62 <_dtoa_r+0x962>
 800d0d6:	2a00      	cmp	r2, #0
 800d0d8:	dd03      	ble.n	800d0e2 <_dtoa_r+0xae2>
 800d0da:	2b39      	cmp	r3, #57	; 0x39
 800d0dc:	d0ee      	beq.n	800d0bc <_dtoa_r+0xabc>
 800d0de:	3301      	adds	r3, #1
 800d0e0:	e7c7      	b.n	800d072 <_dtoa_r+0xa72>
 800d0e2:	9a01      	ldr	r2, [sp, #4]
 800d0e4:	9907      	ldr	r1, [sp, #28]
 800d0e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d0ea:	428a      	cmp	r2, r1
 800d0ec:	d02a      	beq.n	800d144 <_dtoa_r+0xb44>
 800d0ee:	4659      	mov	r1, fp
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	220a      	movs	r2, #10
 800d0f4:	4620      	mov	r0, r4
 800d0f6:	f000 fe7d 	bl	800ddf4 <__multadd>
 800d0fa:	45b8      	cmp	r8, r7
 800d0fc:	4683      	mov	fp, r0
 800d0fe:	f04f 0300 	mov.w	r3, #0
 800d102:	f04f 020a 	mov.w	r2, #10
 800d106:	4641      	mov	r1, r8
 800d108:	4620      	mov	r0, r4
 800d10a:	d107      	bne.n	800d11c <_dtoa_r+0xb1c>
 800d10c:	f000 fe72 	bl	800ddf4 <__multadd>
 800d110:	4680      	mov	r8, r0
 800d112:	4607      	mov	r7, r0
 800d114:	9b01      	ldr	r3, [sp, #4]
 800d116:	3301      	adds	r3, #1
 800d118:	9301      	str	r3, [sp, #4]
 800d11a:	e775      	b.n	800d008 <_dtoa_r+0xa08>
 800d11c:	f000 fe6a 	bl	800ddf4 <__multadd>
 800d120:	4639      	mov	r1, r7
 800d122:	4680      	mov	r8, r0
 800d124:	2300      	movs	r3, #0
 800d126:	220a      	movs	r2, #10
 800d128:	4620      	mov	r0, r4
 800d12a:	f000 fe63 	bl	800ddf4 <__multadd>
 800d12e:	4607      	mov	r7, r0
 800d130:	e7f0      	b.n	800d114 <_dtoa_r+0xb14>
 800d132:	f1b9 0f00 	cmp.w	r9, #0
 800d136:	9a00      	ldr	r2, [sp, #0]
 800d138:	bfcc      	ite	gt
 800d13a:	464d      	movgt	r5, r9
 800d13c:	2501      	movle	r5, #1
 800d13e:	4415      	add	r5, r2
 800d140:	f04f 0800 	mov.w	r8, #0
 800d144:	4659      	mov	r1, fp
 800d146:	2201      	movs	r2, #1
 800d148:	4620      	mov	r0, r4
 800d14a:	9301      	str	r3, [sp, #4]
 800d14c:	f001 f84c 	bl	800e1e8 <__lshift>
 800d150:	4631      	mov	r1, r6
 800d152:	4683      	mov	fp, r0
 800d154:	f001 f8b4 	bl	800e2c0 <__mcmp>
 800d158:	2800      	cmp	r0, #0
 800d15a:	dcb2      	bgt.n	800d0c2 <_dtoa_r+0xac2>
 800d15c:	d102      	bne.n	800d164 <_dtoa_r+0xb64>
 800d15e:	9b01      	ldr	r3, [sp, #4]
 800d160:	07db      	lsls	r3, r3, #31
 800d162:	d4ae      	bmi.n	800d0c2 <_dtoa_r+0xac2>
 800d164:	462b      	mov	r3, r5
 800d166:	461d      	mov	r5, r3
 800d168:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d16c:	2a30      	cmp	r2, #48	; 0x30
 800d16e:	d0fa      	beq.n	800d166 <_dtoa_r+0xb66>
 800d170:	e6f7      	b.n	800cf62 <_dtoa_r+0x962>
 800d172:	9a00      	ldr	r2, [sp, #0]
 800d174:	429a      	cmp	r2, r3
 800d176:	d1a5      	bne.n	800d0c4 <_dtoa_r+0xac4>
 800d178:	f10a 0a01 	add.w	sl, sl, #1
 800d17c:	2331      	movs	r3, #49	; 0x31
 800d17e:	e779      	b.n	800d074 <_dtoa_r+0xa74>
 800d180:	4b13      	ldr	r3, [pc, #76]	; (800d1d0 <_dtoa_r+0xbd0>)
 800d182:	f7ff baaf 	b.w	800c6e4 <_dtoa_r+0xe4>
 800d186:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d188:	2b00      	cmp	r3, #0
 800d18a:	f47f aa86 	bne.w	800c69a <_dtoa_r+0x9a>
 800d18e:	4b11      	ldr	r3, [pc, #68]	; (800d1d4 <_dtoa_r+0xbd4>)
 800d190:	f7ff baa8 	b.w	800c6e4 <_dtoa_r+0xe4>
 800d194:	f1b9 0f00 	cmp.w	r9, #0
 800d198:	dc03      	bgt.n	800d1a2 <_dtoa_r+0xba2>
 800d19a:	9b05      	ldr	r3, [sp, #20]
 800d19c:	2b02      	cmp	r3, #2
 800d19e:	f73f aec9 	bgt.w	800cf34 <_dtoa_r+0x934>
 800d1a2:	9d00      	ldr	r5, [sp, #0]
 800d1a4:	4631      	mov	r1, r6
 800d1a6:	4658      	mov	r0, fp
 800d1a8:	f7ff f99c 	bl	800c4e4 <quorem>
 800d1ac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d1b0:	f805 3b01 	strb.w	r3, [r5], #1
 800d1b4:	9a00      	ldr	r2, [sp, #0]
 800d1b6:	1aaa      	subs	r2, r5, r2
 800d1b8:	4591      	cmp	r9, r2
 800d1ba:	ddba      	ble.n	800d132 <_dtoa_r+0xb32>
 800d1bc:	4659      	mov	r1, fp
 800d1be:	2300      	movs	r3, #0
 800d1c0:	220a      	movs	r2, #10
 800d1c2:	4620      	mov	r0, r4
 800d1c4:	f000 fe16 	bl	800ddf4 <__multadd>
 800d1c8:	4683      	mov	fp, r0
 800d1ca:	e7eb      	b.n	800d1a4 <_dtoa_r+0xba4>
 800d1cc:	0800f3ec 	.word	0x0800f3ec
 800d1d0:	0800f1ec 	.word	0x0800f1ec
 800d1d4:	0800f369 	.word	0x0800f369

0800d1d8 <__sflush_r>:
 800d1d8:	898a      	ldrh	r2, [r1, #12]
 800d1da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1de:	4605      	mov	r5, r0
 800d1e0:	0710      	lsls	r0, r2, #28
 800d1e2:	460c      	mov	r4, r1
 800d1e4:	d458      	bmi.n	800d298 <__sflush_r+0xc0>
 800d1e6:	684b      	ldr	r3, [r1, #4]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	dc05      	bgt.n	800d1f8 <__sflush_r+0x20>
 800d1ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	dc02      	bgt.n	800d1f8 <__sflush_r+0x20>
 800d1f2:	2000      	movs	r0, #0
 800d1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1fa:	2e00      	cmp	r6, #0
 800d1fc:	d0f9      	beq.n	800d1f2 <__sflush_r+0x1a>
 800d1fe:	2300      	movs	r3, #0
 800d200:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d204:	682f      	ldr	r7, [r5, #0]
 800d206:	602b      	str	r3, [r5, #0]
 800d208:	d032      	beq.n	800d270 <__sflush_r+0x98>
 800d20a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d20c:	89a3      	ldrh	r3, [r4, #12]
 800d20e:	075a      	lsls	r2, r3, #29
 800d210:	d505      	bpl.n	800d21e <__sflush_r+0x46>
 800d212:	6863      	ldr	r3, [r4, #4]
 800d214:	1ac0      	subs	r0, r0, r3
 800d216:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d218:	b10b      	cbz	r3, 800d21e <__sflush_r+0x46>
 800d21a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d21c:	1ac0      	subs	r0, r0, r3
 800d21e:	2300      	movs	r3, #0
 800d220:	4602      	mov	r2, r0
 800d222:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d224:	6a21      	ldr	r1, [r4, #32]
 800d226:	4628      	mov	r0, r5
 800d228:	47b0      	blx	r6
 800d22a:	1c43      	adds	r3, r0, #1
 800d22c:	89a3      	ldrh	r3, [r4, #12]
 800d22e:	d106      	bne.n	800d23e <__sflush_r+0x66>
 800d230:	6829      	ldr	r1, [r5, #0]
 800d232:	291d      	cmp	r1, #29
 800d234:	d82c      	bhi.n	800d290 <__sflush_r+0xb8>
 800d236:	4a2a      	ldr	r2, [pc, #168]	; (800d2e0 <__sflush_r+0x108>)
 800d238:	40ca      	lsrs	r2, r1
 800d23a:	07d6      	lsls	r6, r2, #31
 800d23c:	d528      	bpl.n	800d290 <__sflush_r+0xb8>
 800d23e:	2200      	movs	r2, #0
 800d240:	6062      	str	r2, [r4, #4]
 800d242:	04d9      	lsls	r1, r3, #19
 800d244:	6922      	ldr	r2, [r4, #16]
 800d246:	6022      	str	r2, [r4, #0]
 800d248:	d504      	bpl.n	800d254 <__sflush_r+0x7c>
 800d24a:	1c42      	adds	r2, r0, #1
 800d24c:	d101      	bne.n	800d252 <__sflush_r+0x7a>
 800d24e:	682b      	ldr	r3, [r5, #0]
 800d250:	b903      	cbnz	r3, 800d254 <__sflush_r+0x7c>
 800d252:	6560      	str	r0, [r4, #84]	; 0x54
 800d254:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d256:	602f      	str	r7, [r5, #0]
 800d258:	2900      	cmp	r1, #0
 800d25a:	d0ca      	beq.n	800d1f2 <__sflush_r+0x1a>
 800d25c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d260:	4299      	cmp	r1, r3
 800d262:	d002      	beq.n	800d26a <__sflush_r+0x92>
 800d264:	4628      	mov	r0, r5
 800d266:	f001 fa2d 	bl	800e6c4 <_free_r>
 800d26a:	2000      	movs	r0, #0
 800d26c:	6360      	str	r0, [r4, #52]	; 0x34
 800d26e:	e7c1      	b.n	800d1f4 <__sflush_r+0x1c>
 800d270:	6a21      	ldr	r1, [r4, #32]
 800d272:	2301      	movs	r3, #1
 800d274:	4628      	mov	r0, r5
 800d276:	47b0      	blx	r6
 800d278:	1c41      	adds	r1, r0, #1
 800d27a:	d1c7      	bne.n	800d20c <__sflush_r+0x34>
 800d27c:	682b      	ldr	r3, [r5, #0]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d0c4      	beq.n	800d20c <__sflush_r+0x34>
 800d282:	2b1d      	cmp	r3, #29
 800d284:	d001      	beq.n	800d28a <__sflush_r+0xb2>
 800d286:	2b16      	cmp	r3, #22
 800d288:	d101      	bne.n	800d28e <__sflush_r+0xb6>
 800d28a:	602f      	str	r7, [r5, #0]
 800d28c:	e7b1      	b.n	800d1f2 <__sflush_r+0x1a>
 800d28e:	89a3      	ldrh	r3, [r4, #12]
 800d290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d294:	81a3      	strh	r3, [r4, #12]
 800d296:	e7ad      	b.n	800d1f4 <__sflush_r+0x1c>
 800d298:	690f      	ldr	r7, [r1, #16]
 800d29a:	2f00      	cmp	r7, #0
 800d29c:	d0a9      	beq.n	800d1f2 <__sflush_r+0x1a>
 800d29e:	0793      	lsls	r3, r2, #30
 800d2a0:	680e      	ldr	r6, [r1, #0]
 800d2a2:	bf08      	it	eq
 800d2a4:	694b      	ldreq	r3, [r1, #20]
 800d2a6:	600f      	str	r7, [r1, #0]
 800d2a8:	bf18      	it	ne
 800d2aa:	2300      	movne	r3, #0
 800d2ac:	eba6 0807 	sub.w	r8, r6, r7
 800d2b0:	608b      	str	r3, [r1, #8]
 800d2b2:	f1b8 0f00 	cmp.w	r8, #0
 800d2b6:	dd9c      	ble.n	800d1f2 <__sflush_r+0x1a>
 800d2b8:	6a21      	ldr	r1, [r4, #32]
 800d2ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d2bc:	4643      	mov	r3, r8
 800d2be:	463a      	mov	r2, r7
 800d2c0:	4628      	mov	r0, r5
 800d2c2:	47b0      	blx	r6
 800d2c4:	2800      	cmp	r0, #0
 800d2c6:	dc06      	bgt.n	800d2d6 <__sflush_r+0xfe>
 800d2c8:	89a3      	ldrh	r3, [r4, #12]
 800d2ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2ce:	81a3      	strh	r3, [r4, #12]
 800d2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2d4:	e78e      	b.n	800d1f4 <__sflush_r+0x1c>
 800d2d6:	4407      	add	r7, r0
 800d2d8:	eba8 0800 	sub.w	r8, r8, r0
 800d2dc:	e7e9      	b.n	800d2b2 <__sflush_r+0xda>
 800d2de:	bf00      	nop
 800d2e0:	20400001 	.word	0x20400001

0800d2e4 <_fflush_r>:
 800d2e4:	b538      	push	{r3, r4, r5, lr}
 800d2e6:	690b      	ldr	r3, [r1, #16]
 800d2e8:	4605      	mov	r5, r0
 800d2ea:	460c      	mov	r4, r1
 800d2ec:	b913      	cbnz	r3, 800d2f4 <_fflush_r+0x10>
 800d2ee:	2500      	movs	r5, #0
 800d2f0:	4628      	mov	r0, r5
 800d2f2:	bd38      	pop	{r3, r4, r5, pc}
 800d2f4:	b118      	cbz	r0, 800d2fe <_fflush_r+0x1a>
 800d2f6:	6983      	ldr	r3, [r0, #24]
 800d2f8:	b90b      	cbnz	r3, 800d2fe <_fflush_r+0x1a>
 800d2fa:	f000 f887 	bl	800d40c <__sinit>
 800d2fe:	4b14      	ldr	r3, [pc, #80]	; (800d350 <_fflush_r+0x6c>)
 800d300:	429c      	cmp	r4, r3
 800d302:	d11b      	bne.n	800d33c <_fflush_r+0x58>
 800d304:	686c      	ldr	r4, [r5, #4]
 800d306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d0ef      	beq.n	800d2ee <_fflush_r+0xa>
 800d30e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d310:	07d0      	lsls	r0, r2, #31
 800d312:	d404      	bmi.n	800d31e <_fflush_r+0x3a>
 800d314:	0599      	lsls	r1, r3, #22
 800d316:	d402      	bmi.n	800d31e <_fflush_r+0x3a>
 800d318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d31a:	f000 fc88 	bl	800dc2e <__retarget_lock_acquire_recursive>
 800d31e:	4628      	mov	r0, r5
 800d320:	4621      	mov	r1, r4
 800d322:	f7ff ff59 	bl	800d1d8 <__sflush_r>
 800d326:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d328:	07da      	lsls	r2, r3, #31
 800d32a:	4605      	mov	r5, r0
 800d32c:	d4e0      	bmi.n	800d2f0 <_fflush_r+0xc>
 800d32e:	89a3      	ldrh	r3, [r4, #12]
 800d330:	059b      	lsls	r3, r3, #22
 800d332:	d4dd      	bmi.n	800d2f0 <_fflush_r+0xc>
 800d334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d336:	f000 fc7b 	bl	800dc30 <__retarget_lock_release_recursive>
 800d33a:	e7d9      	b.n	800d2f0 <_fflush_r+0xc>
 800d33c:	4b05      	ldr	r3, [pc, #20]	; (800d354 <_fflush_r+0x70>)
 800d33e:	429c      	cmp	r4, r3
 800d340:	d101      	bne.n	800d346 <_fflush_r+0x62>
 800d342:	68ac      	ldr	r4, [r5, #8]
 800d344:	e7df      	b.n	800d306 <_fflush_r+0x22>
 800d346:	4b04      	ldr	r3, [pc, #16]	; (800d358 <_fflush_r+0x74>)
 800d348:	429c      	cmp	r4, r3
 800d34a:	bf08      	it	eq
 800d34c:	68ec      	ldreq	r4, [r5, #12]
 800d34e:	e7da      	b.n	800d306 <_fflush_r+0x22>
 800d350:	0800f420 	.word	0x0800f420
 800d354:	0800f440 	.word	0x0800f440
 800d358:	0800f400 	.word	0x0800f400

0800d35c <std>:
 800d35c:	2300      	movs	r3, #0
 800d35e:	b510      	push	{r4, lr}
 800d360:	4604      	mov	r4, r0
 800d362:	e9c0 3300 	strd	r3, r3, [r0]
 800d366:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d36a:	6083      	str	r3, [r0, #8]
 800d36c:	8181      	strh	r1, [r0, #12]
 800d36e:	6643      	str	r3, [r0, #100]	; 0x64
 800d370:	81c2      	strh	r2, [r0, #14]
 800d372:	6183      	str	r3, [r0, #24]
 800d374:	4619      	mov	r1, r3
 800d376:	2208      	movs	r2, #8
 800d378:	305c      	adds	r0, #92	; 0x5c
 800d37a:	f7fd fa09 	bl	800a790 <memset>
 800d37e:	4b05      	ldr	r3, [pc, #20]	; (800d394 <std+0x38>)
 800d380:	6263      	str	r3, [r4, #36]	; 0x24
 800d382:	4b05      	ldr	r3, [pc, #20]	; (800d398 <std+0x3c>)
 800d384:	62a3      	str	r3, [r4, #40]	; 0x28
 800d386:	4b05      	ldr	r3, [pc, #20]	; (800d39c <std+0x40>)
 800d388:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d38a:	4b05      	ldr	r3, [pc, #20]	; (800d3a0 <std+0x44>)
 800d38c:	6224      	str	r4, [r4, #32]
 800d38e:	6323      	str	r3, [r4, #48]	; 0x30
 800d390:	bd10      	pop	{r4, pc}
 800d392:	bf00      	nop
 800d394:	0800edb9 	.word	0x0800edb9
 800d398:	0800eddb 	.word	0x0800eddb
 800d39c:	0800ee13 	.word	0x0800ee13
 800d3a0:	0800ee37 	.word	0x0800ee37

0800d3a4 <_cleanup_r>:
 800d3a4:	4901      	ldr	r1, [pc, #4]	; (800d3ac <_cleanup_r+0x8>)
 800d3a6:	f000 b8af 	b.w	800d508 <_fwalk_reent>
 800d3aa:	bf00      	nop
 800d3ac:	0800d2e5 	.word	0x0800d2e5

0800d3b0 <__sfmoreglue>:
 800d3b0:	b570      	push	{r4, r5, r6, lr}
 800d3b2:	1e4a      	subs	r2, r1, #1
 800d3b4:	2568      	movs	r5, #104	; 0x68
 800d3b6:	4355      	muls	r5, r2
 800d3b8:	460e      	mov	r6, r1
 800d3ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d3be:	f001 f9d1 	bl	800e764 <_malloc_r>
 800d3c2:	4604      	mov	r4, r0
 800d3c4:	b140      	cbz	r0, 800d3d8 <__sfmoreglue+0x28>
 800d3c6:	2100      	movs	r1, #0
 800d3c8:	e9c0 1600 	strd	r1, r6, [r0]
 800d3cc:	300c      	adds	r0, #12
 800d3ce:	60a0      	str	r0, [r4, #8]
 800d3d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d3d4:	f7fd f9dc 	bl	800a790 <memset>
 800d3d8:	4620      	mov	r0, r4
 800d3da:	bd70      	pop	{r4, r5, r6, pc}

0800d3dc <__sfp_lock_acquire>:
 800d3dc:	4801      	ldr	r0, [pc, #4]	; (800d3e4 <__sfp_lock_acquire+0x8>)
 800d3de:	f000 bc26 	b.w	800dc2e <__retarget_lock_acquire_recursive>
 800d3e2:	bf00      	nop
 800d3e4:	200007d4 	.word	0x200007d4

0800d3e8 <__sfp_lock_release>:
 800d3e8:	4801      	ldr	r0, [pc, #4]	; (800d3f0 <__sfp_lock_release+0x8>)
 800d3ea:	f000 bc21 	b.w	800dc30 <__retarget_lock_release_recursive>
 800d3ee:	bf00      	nop
 800d3f0:	200007d4 	.word	0x200007d4

0800d3f4 <__sinit_lock_acquire>:
 800d3f4:	4801      	ldr	r0, [pc, #4]	; (800d3fc <__sinit_lock_acquire+0x8>)
 800d3f6:	f000 bc1a 	b.w	800dc2e <__retarget_lock_acquire_recursive>
 800d3fa:	bf00      	nop
 800d3fc:	200007cf 	.word	0x200007cf

0800d400 <__sinit_lock_release>:
 800d400:	4801      	ldr	r0, [pc, #4]	; (800d408 <__sinit_lock_release+0x8>)
 800d402:	f000 bc15 	b.w	800dc30 <__retarget_lock_release_recursive>
 800d406:	bf00      	nop
 800d408:	200007cf 	.word	0x200007cf

0800d40c <__sinit>:
 800d40c:	b510      	push	{r4, lr}
 800d40e:	4604      	mov	r4, r0
 800d410:	f7ff fff0 	bl	800d3f4 <__sinit_lock_acquire>
 800d414:	69a3      	ldr	r3, [r4, #24]
 800d416:	b11b      	cbz	r3, 800d420 <__sinit+0x14>
 800d418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d41c:	f7ff bff0 	b.w	800d400 <__sinit_lock_release>
 800d420:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d424:	6523      	str	r3, [r4, #80]	; 0x50
 800d426:	4b13      	ldr	r3, [pc, #76]	; (800d474 <__sinit+0x68>)
 800d428:	4a13      	ldr	r2, [pc, #76]	; (800d478 <__sinit+0x6c>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	62a2      	str	r2, [r4, #40]	; 0x28
 800d42e:	42a3      	cmp	r3, r4
 800d430:	bf04      	itt	eq
 800d432:	2301      	moveq	r3, #1
 800d434:	61a3      	streq	r3, [r4, #24]
 800d436:	4620      	mov	r0, r4
 800d438:	f000 f820 	bl	800d47c <__sfp>
 800d43c:	6060      	str	r0, [r4, #4]
 800d43e:	4620      	mov	r0, r4
 800d440:	f000 f81c 	bl	800d47c <__sfp>
 800d444:	60a0      	str	r0, [r4, #8]
 800d446:	4620      	mov	r0, r4
 800d448:	f000 f818 	bl	800d47c <__sfp>
 800d44c:	2200      	movs	r2, #0
 800d44e:	60e0      	str	r0, [r4, #12]
 800d450:	2104      	movs	r1, #4
 800d452:	6860      	ldr	r0, [r4, #4]
 800d454:	f7ff ff82 	bl	800d35c <std>
 800d458:	68a0      	ldr	r0, [r4, #8]
 800d45a:	2201      	movs	r2, #1
 800d45c:	2109      	movs	r1, #9
 800d45e:	f7ff ff7d 	bl	800d35c <std>
 800d462:	68e0      	ldr	r0, [r4, #12]
 800d464:	2202      	movs	r2, #2
 800d466:	2112      	movs	r1, #18
 800d468:	f7ff ff78 	bl	800d35c <std>
 800d46c:	2301      	movs	r3, #1
 800d46e:	61a3      	str	r3, [r4, #24]
 800d470:	e7d2      	b.n	800d418 <__sinit+0xc>
 800d472:	bf00      	nop
 800d474:	0800f1d8 	.word	0x0800f1d8
 800d478:	0800d3a5 	.word	0x0800d3a5

0800d47c <__sfp>:
 800d47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d47e:	4607      	mov	r7, r0
 800d480:	f7ff ffac 	bl	800d3dc <__sfp_lock_acquire>
 800d484:	4b1e      	ldr	r3, [pc, #120]	; (800d500 <__sfp+0x84>)
 800d486:	681e      	ldr	r6, [r3, #0]
 800d488:	69b3      	ldr	r3, [r6, #24]
 800d48a:	b913      	cbnz	r3, 800d492 <__sfp+0x16>
 800d48c:	4630      	mov	r0, r6
 800d48e:	f7ff ffbd 	bl	800d40c <__sinit>
 800d492:	3648      	adds	r6, #72	; 0x48
 800d494:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d498:	3b01      	subs	r3, #1
 800d49a:	d503      	bpl.n	800d4a4 <__sfp+0x28>
 800d49c:	6833      	ldr	r3, [r6, #0]
 800d49e:	b30b      	cbz	r3, 800d4e4 <__sfp+0x68>
 800d4a0:	6836      	ldr	r6, [r6, #0]
 800d4a2:	e7f7      	b.n	800d494 <__sfp+0x18>
 800d4a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d4a8:	b9d5      	cbnz	r5, 800d4e0 <__sfp+0x64>
 800d4aa:	4b16      	ldr	r3, [pc, #88]	; (800d504 <__sfp+0x88>)
 800d4ac:	60e3      	str	r3, [r4, #12]
 800d4ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d4b2:	6665      	str	r5, [r4, #100]	; 0x64
 800d4b4:	f000 fbba 	bl	800dc2c <__retarget_lock_init_recursive>
 800d4b8:	f7ff ff96 	bl	800d3e8 <__sfp_lock_release>
 800d4bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d4c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d4c4:	6025      	str	r5, [r4, #0]
 800d4c6:	61a5      	str	r5, [r4, #24]
 800d4c8:	2208      	movs	r2, #8
 800d4ca:	4629      	mov	r1, r5
 800d4cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d4d0:	f7fd f95e 	bl	800a790 <memset>
 800d4d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d4d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d4dc:	4620      	mov	r0, r4
 800d4de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4e0:	3468      	adds	r4, #104	; 0x68
 800d4e2:	e7d9      	b.n	800d498 <__sfp+0x1c>
 800d4e4:	2104      	movs	r1, #4
 800d4e6:	4638      	mov	r0, r7
 800d4e8:	f7ff ff62 	bl	800d3b0 <__sfmoreglue>
 800d4ec:	4604      	mov	r4, r0
 800d4ee:	6030      	str	r0, [r6, #0]
 800d4f0:	2800      	cmp	r0, #0
 800d4f2:	d1d5      	bne.n	800d4a0 <__sfp+0x24>
 800d4f4:	f7ff ff78 	bl	800d3e8 <__sfp_lock_release>
 800d4f8:	230c      	movs	r3, #12
 800d4fa:	603b      	str	r3, [r7, #0]
 800d4fc:	e7ee      	b.n	800d4dc <__sfp+0x60>
 800d4fe:	bf00      	nop
 800d500:	0800f1d8 	.word	0x0800f1d8
 800d504:	ffff0001 	.word	0xffff0001

0800d508 <_fwalk_reent>:
 800d508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d50c:	4606      	mov	r6, r0
 800d50e:	4688      	mov	r8, r1
 800d510:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d514:	2700      	movs	r7, #0
 800d516:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d51a:	f1b9 0901 	subs.w	r9, r9, #1
 800d51e:	d505      	bpl.n	800d52c <_fwalk_reent+0x24>
 800d520:	6824      	ldr	r4, [r4, #0]
 800d522:	2c00      	cmp	r4, #0
 800d524:	d1f7      	bne.n	800d516 <_fwalk_reent+0xe>
 800d526:	4638      	mov	r0, r7
 800d528:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d52c:	89ab      	ldrh	r3, [r5, #12]
 800d52e:	2b01      	cmp	r3, #1
 800d530:	d907      	bls.n	800d542 <_fwalk_reent+0x3a>
 800d532:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d536:	3301      	adds	r3, #1
 800d538:	d003      	beq.n	800d542 <_fwalk_reent+0x3a>
 800d53a:	4629      	mov	r1, r5
 800d53c:	4630      	mov	r0, r6
 800d53e:	47c0      	blx	r8
 800d540:	4307      	orrs	r7, r0
 800d542:	3568      	adds	r5, #104	; 0x68
 800d544:	e7e9      	b.n	800d51a <_fwalk_reent+0x12>

0800d546 <rshift>:
 800d546:	6903      	ldr	r3, [r0, #16]
 800d548:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d54c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d550:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d554:	f100 0414 	add.w	r4, r0, #20
 800d558:	dd45      	ble.n	800d5e6 <rshift+0xa0>
 800d55a:	f011 011f 	ands.w	r1, r1, #31
 800d55e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d562:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d566:	d10c      	bne.n	800d582 <rshift+0x3c>
 800d568:	f100 0710 	add.w	r7, r0, #16
 800d56c:	4629      	mov	r1, r5
 800d56e:	42b1      	cmp	r1, r6
 800d570:	d334      	bcc.n	800d5dc <rshift+0x96>
 800d572:	1a9b      	subs	r3, r3, r2
 800d574:	009b      	lsls	r3, r3, #2
 800d576:	1eea      	subs	r2, r5, #3
 800d578:	4296      	cmp	r6, r2
 800d57a:	bf38      	it	cc
 800d57c:	2300      	movcc	r3, #0
 800d57e:	4423      	add	r3, r4
 800d580:	e015      	b.n	800d5ae <rshift+0x68>
 800d582:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d586:	f1c1 0820 	rsb	r8, r1, #32
 800d58a:	40cf      	lsrs	r7, r1
 800d58c:	f105 0e04 	add.w	lr, r5, #4
 800d590:	46a1      	mov	r9, r4
 800d592:	4576      	cmp	r6, lr
 800d594:	46f4      	mov	ip, lr
 800d596:	d815      	bhi.n	800d5c4 <rshift+0x7e>
 800d598:	1a9b      	subs	r3, r3, r2
 800d59a:	009a      	lsls	r2, r3, #2
 800d59c:	3a04      	subs	r2, #4
 800d59e:	3501      	adds	r5, #1
 800d5a0:	42ae      	cmp	r6, r5
 800d5a2:	bf38      	it	cc
 800d5a4:	2200      	movcc	r2, #0
 800d5a6:	18a3      	adds	r3, r4, r2
 800d5a8:	50a7      	str	r7, [r4, r2]
 800d5aa:	b107      	cbz	r7, 800d5ae <rshift+0x68>
 800d5ac:	3304      	adds	r3, #4
 800d5ae:	1b1a      	subs	r2, r3, r4
 800d5b0:	42a3      	cmp	r3, r4
 800d5b2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d5b6:	bf08      	it	eq
 800d5b8:	2300      	moveq	r3, #0
 800d5ba:	6102      	str	r2, [r0, #16]
 800d5bc:	bf08      	it	eq
 800d5be:	6143      	streq	r3, [r0, #20]
 800d5c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5c4:	f8dc c000 	ldr.w	ip, [ip]
 800d5c8:	fa0c fc08 	lsl.w	ip, ip, r8
 800d5cc:	ea4c 0707 	orr.w	r7, ip, r7
 800d5d0:	f849 7b04 	str.w	r7, [r9], #4
 800d5d4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d5d8:	40cf      	lsrs	r7, r1
 800d5da:	e7da      	b.n	800d592 <rshift+0x4c>
 800d5dc:	f851 cb04 	ldr.w	ip, [r1], #4
 800d5e0:	f847 cf04 	str.w	ip, [r7, #4]!
 800d5e4:	e7c3      	b.n	800d56e <rshift+0x28>
 800d5e6:	4623      	mov	r3, r4
 800d5e8:	e7e1      	b.n	800d5ae <rshift+0x68>

0800d5ea <__hexdig_fun>:
 800d5ea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d5ee:	2b09      	cmp	r3, #9
 800d5f0:	d802      	bhi.n	800d5f8 <__hexdig_fun+0xe>
 800d5f2:	3820      	subs	r0, #32
 800d5f4:	b2c0      	uxtb	r0, r0
 800d5f6:	4770      	bx	lr
 800d5f8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d5fc:	2b05      	cmp	r3, #5
 800d5fe:	d801      	bhi.n	800d604 <__hexdig_fun+0x1a>
 800d600:	3847      	subs	r0, #71	; 0x47
 800d602:	e7f7      	b.n	800d5f4 <__hexdig_fun+0xa>
 800d604:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d608:	2b05      	cmp	r3, #5
 800d60a:	d801      	bhi.n	800d610 <__hexdig_fun+0x26>
 800d60c:	3827      	subs	r0, #39	; 0x27
 800d60e:	e7f1      	b.n	800d5f4 <__hexdig_fun+0xa>
 800d610:	2000      	movs	r0, #0
 800d612:	4770      	bx	lr

0800d614 <__gethex>:
 800d614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d618:	ed2d 8b02 	vpush	{d8}
 800d61c:	b089      	sub	sp, #36	; 0x24
 800d61e:	ee08 0a10 	vmov	s16, r0
 800d622:	9304      	str	r3, [sp, #16]
 800d624:	4bbc      	ldr	r3, [pc, #752]	; (800d918 <__gethex+0x304>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	9301      	str	r3, [sp, #4]
 800d62a:	4618      	mov	r0, r3
 800d62c:	468b      	mov	fp, r1
 800d62e:	4690      	mov	r8, r2
 800d630:	f7f2 fdce 	bl	80001d0 <strlen>
 800d634:	9b01      	ldr	r3, [sp, #4]
 800d636:	f8db 2000 	ldr.w	r2, [fp]
 800d63a:	4403      	add	r3, r0
 800d63c:	4682      	mov	sl, r0
 800d63e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d642:	9305      	str	r3, [sp, #20]
 800d644:	1c93      	adds	r3, r2, #2
 800d646:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d64a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d64e:	32fe      	adds	r2, #254	; 0xfe
 800d650:	18d1      	adds	r1, r2, r3
 800d652:	461f      	mov	r7, r3
 800d654:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d658:	9100      	str	r1, [sp, #0]
 800d65a:	2830      	cmp	r0, #48	; 0x30
 800d65c:	d0f8      	beq.n	800d650 <__gethex+0x3c>
 800d65e:	f7ff ffc4 	bl	800d5ea <__hexdig_fun>
 800d662:	4604      	mov	r4, r0
 800d664:	2800      	cmp	r0, #0
 800d666:	d13a      	bne.n	800d6de <__gethex+0xca>
 800d668:	9901      	ldr	r1, [sp, #4]
 800d66a:	4652      	mov	r2, sl
 800d66c:	4638      	mov	r0, r7
 800d66e:	f001 fbe6 	bl	800ee3e <strncmp>
 800d672:	4605      	mov	r5, r0
 800d674:	2800      	cmp	r0, #0
 800d676:	d168      	bne.n	800d74a <__gethex+0x136>
 800d678:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d67c:	eb07 060a 	add.w	r6, r7, sl
 800d680:	f7ff ffb3 	bl	800d5ea <__hexdig_fun>
 800d684:	2800      	cmp	r0, #0
 800d686:	d062      	beq.n	800d74e <__gethex+0x13a>
 800d688:	4633      	mov	r3, r6
 800d68a:	7818      	ldrb	r0, [r3, #0]
 800d68c:	2830      	cmp	r0, #48	; 0x30
 800d68e:	461f      	mov	r7, r3
 800d690:	f103 0301 	add.w	r3, r3, #1
 800d694:	d0f9      	beq.n	800d68a <__gethex+0x76>
 800d696:	f7ff ffa8 	bl	800d5ea <__hexdig_fun>
 800d69a:	2301      	movs	r3, #1
 800d69c:	fab0 f480 	clz	r4, r0
 800d6a0:	0964      	lsrs	r4, r4, #5
 800d6a2:	4635      	mov	r5, r6
 800d6a4:	9300      	str	r3, [sp, #0]
 800d6a6:	463a      	mov	r2, r7
 800d6a8:	4616      	mov	r6, r2
 800d6aa:	3201      	adds	r2, #1
 800d6ac:	7830      	ldrb	r0, [r6, #0]
 800d6ae:	f7ff ff9c 	bl	800d5ea <__hexdig_fun>
 800d6b2:	2800      	cmp	r0, #0
 800d6b4:	d1f8      	bne.n	800d6a8 <__gethex+0x94>
 800d6b6:	9901      	ldr	r1, [sp, #4]
 800d6b8:	4652      	mov	r2, sl
 800d6ba:	4630      	mov	r0, r6
 800d6bc:	f001 fbbf 	bl	800ee3e <strncmp>
 800d6c0:	b980      	cbnz	r0, 800d6e4 <__gethex+0xd0>
 800d6c2:	b94d      	cbnz	r5, 800d6d8 <__gethex+0xc4>
 800d6c4:	eb06 050a 	add.w	r5, r6, sl
 800d6c8:	462a      	mov	r2, r5
 800d6ca:	4616      	mov	r6, r2
 800d6cc:	3201      	adds	r2, #1
 800d6ce:	7830      	ldrb	r0, [r6, #0]
 800d6d0:	f7ff ff8b 	bl	800d5ea <__hexdig_fun>
 800d6d4:	2800      	cmp	r0, #0
 800d6d6:	d1f8      	bne.n	800d6ca <__gethex+0xb6>
 800d6d8:	1bad      	subs	r5, r5, r6
 800d6da:	00ad      	lsls	r5, r5, #2
 800d6dc:	e004      	b.n	800d6e8 <__gethex+0xd4>
 800d6de:	2400      	movs	r4, #0
 800d6e0:	4625      	mov	r5, r4
 800d6e2:	e7e0      	b.n	800d6a6 <__gethex+0x92>
 800d6e4:	2d00      	cmp	r5, #0
 800d6e6:	d1f7      	bne.n	800d6d8 <__gethex+0xc4>
 800d6e8:	7833      	ldrb	r3, [r6, #0]
 800d6ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d6ee:	2b50      	cmp	r3, #80	; 0x50
 800d6f0:	d13b      	bne.n	800d76a <__gethex+0x156>
 800d6f2:	7873      	ldrb	r3, [r6, #1]
 800d6f4:	2b2b      	cmp	r3, #43	; 0x2b
 800d6f6:	d02c      	beq.n	800d752 <__gethex+0x13e>
 800d6f8:	2b2d      	cmp	r3, #45	; 0x2d
 800d6fa:	d02e      	beq.n	800d75a <__gethex+0x146>
 800d6fc:	1c71      	adds	r1, r6, #1
 800d6fe:	f04f 0900 	mov.w	r9, #0
 800d702:	7808      	ldrb	r0, [r1, #0]
 800d704:	f7ff ff71 	bl	800d5ea <__hexdig_fun>
 800d708:	1e43      	subs	r3, r0, #1
 800d70a:	b2db      	uxtb	r3, r3
 800d70c:	2b18      	cmp	r3, #24
 800d70e:	d82c      	bhi.n	800d76a <__gethex+0x156>
 800d710:	f1a0 0210 	sub.w	r2, r0, #16
 800d714:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d718:	f7ff ff67 	bl	800d5ea <__hexdig_fun>
 800d71c:	1e43      	subs	r3, r0, #1
 800d71e:	b2db      	uxtb	r3, r3
 800d720:	2b18      	cmp	r3, #24
 800d722:	d91d      	bls.n	800d760 <__gethex+0x14c>
 800d724:	f1b9 0f00 	cmp.w	r9, #0
 800d728:	d000      	beq.n	800d72c <__gethex+0x118>
 800d72a:	4252      	negs	r2, r2
 800d72c:	4415      	add	r5, r2
 800d72e:	f8cb 1000 	str.w	r1, [fp]
 800d732:	b1e4      	cbz	r4, 800d76e <__gethex+0x15a>
 800d734:	9b00      	ldr	r3, [sp, #0]
 800d736:	2b00      	cmp	r3, #0
 800d738:	bf14      	ite	ne
 800d73a:	2700      	movne	r7, #0
 800d73c:	2706      	moveq	r7, #6
 800d73e:	4638      	mov	r0, r7
 800d740:	b009      	add	sp, #36	; 0x24
 800d742:	ecbd 8b02 	vpop	{d8}
 800d746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d74a:	463e      	mov	r6, r7
 800d74c:	4625      	mov	r5, r4
 800d74e:	2401      	movs	r4, #1
 800d750:	e7ca      	b.n	800d6e8 <__gethex+0xd4>
 800d752:	f04f 0900 	mov.w	r9, #0
 800d756:	1cb1      	adds	r1, r6, #2
 800d758:	e7d3      	b.n	800d702 <__gethex+0xee>
 800d75a:	f04f 0901 	mov.w	r9, #1
 800d75e:	e7fa      	b.n	800d756 <__gethex+0x142>
 800d760:	230a      	movs	r3, #10
 800d762:	fb03 0202 	mla	r2, r3, r2, r0
 800d766:	3a10      	subs	r2, #16
 800d768:	e7d4      	b.n	800d714 <__gethex+0x100>
 800d76a:	4631      	mov	r1, r6
 800d76c:	e7df      	b.n	800d72e <__gethex+0x11a>
 800d76e:	1bf3      	subs	r3, r6, r7
 800d770:	3b01      	subs	r3, #1
 800d772:	4621      	mov	r1, r4
 800d774:	2b07      	cmp	r3, #7
 800d776:	dc0b      	bgt.n	800d790 <__gethex+0x17c>
 800d778:	ee18 0a10 	vmov	r0, s16
 800d77c:	f000 fad8 	bl	800dd30 <_Balloc>
 800d780:	4604      	mov	r4, r0
 800d782:	b940      	cbnz	r0, 800d796 <__gethex+0x182>
 800d784:	4b65      	ldr	r3, [pc, #404]	; (800d91c <__gethex+0x308>)
 800d786:	4602      	mov	r2, r0
 800d788:	21de      	movs	r1, #222	; 0xde
 800d78a:	4865      	ldr	r0, [pc, #404]	; (800d920 <__gethex+0x30c>)
 800d78c:	f001 fb88 	bl	800eea0 <__assert_func>
 800d790:	3101      	adds	r1, #1
 800d792:	105b      	asrs	r3, r3, #1
 800d794:	e7ee      	b.n	800d774 <__gethex+0x160>
 800d796:	f100 0914 	add.w	r9, r0, #20
 800d79a:	f04f 0b00 	mov.w	fp, #0
 800d79e:	f1ca 0301 	rsb	r3, sl, #1
 800d7a2:	f8cd 9008 	str.w	r9, [sp, #8]
 800d7a6:	f8cd b000 	str.w	fp, [sp]
 800d7aa:	9306      	str	r3, [sp, #24]
 800d7ac:	42b7      	cmp	r7, r6
 800d7ae:	d340      	bcc.n	800d832 <__gethex+0x21e>
 800d7b0:	9802      	ldr	r0, [sp, #8]
 800d7b2:	9b00      	ldr	r3, [sp, #0]
 800d7b4:	f840 3b04 	str.w	r3, [r0], #4
 800d7b8:	eba0 0009 	sub.w	r0, r0, r9
 800d7bc:	1080      	asrs	r0, r0, #2
 800d7be:	0146      	lsls	r6, r0, #5
 800d7c0:	6120      	str	r0, [r4, #16]
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f000 fbaa 	bl	800df1c <__hi0bits>
 800d7c8:	1a30      	subs	r0, r6, r0
 800d7ca:	f8d8 6000 	ldr.w	r6, [r8]
 800d7ce:	42b0      	cmp	r0, r6
 800d7d0:	dd63      	ble.n	800d89a <__gethex+0x286>
 800d7d2:	1b87      	subs	r7, r0, r6
 800d7d4:	4639      	mov	r1, r7
 800d7d6:	4620      	mov	r0, r4
 800d7d8:	f000 ff44 	bl	800e664 <__any_on>
 800d7dc:	4682      	mov	sl, r0
 800d7de:	b1a8      	cbz	r0, 800d80c <__gethex+0x1f8>
 800d7e0:	1e7b      	subs	r3, r7, #1
 800d7e2:	1159      	asrs	r1, r3, #5
 800d7e4:	f003 021f 	and.w	r2, r3, #31
 800d7e8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d7ec:	f04f 0a01 	mov.w	sl, #1
 800d7f0:	fa0a f202 	lsl.w	r2, sl, r2
 800d7f4:	420a      	tst	r2, r1
 800d7f6:	d009      	beq.n	800d80c <__gethex+0x1f8>
 800d7f8:	4553      	cmp	r3, sl
 800d7fa:	dd05      	ble.n	800d808 <__gethex+0x1f4>
 800d7fc:	1eb9      	subs	r1, r7, #2
 800d7fe:	4620      	mov	r0, r4
 800d800:	f000 ff30 	bl	800e664 <__any_on>
 800d804:	2800      	cmp	r0, #0
 800d806:	d145      	bne.n	800d894 <__gethex+0x280>
 800d808:	f04f 0a02 	mov.w	sl, #2
 800d80c:	4639      	mov	r1, r7
 800d80e:	4620      	mov	r0, r4
 800d810:	f7ff fe99 	bl	800d546 <rshift>
 800d814:	443d      	add	r5, r7
 800d816:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d81a:	42ab      	cmp	r3, r5
 800d81c:	da4c      	bge.n	800d8b8 <__gethex+0x2a4>
 800d81e:	ee18 0a10 	vmov	r0, s16
 800d822:	4621      	mov	r1, r4
 800d824:	f000 fac4 	bl	800ddb0 <_Bfree>
 800d828:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d82a:	2300      	movs	r3, #0
 800d82c:	6013      	str	r3, [r2, #0]
 800d82e:	27a3      	movs	r7, #163	; 0xa3
 800d830:	e785      	b.n	800d73e <__gethex+0x12a>
 800d832:	1e73      	subs	r3, r6, #1
 800d834:	9a05      	ldr	r2, [sp, #20]
 800d836:	9303      	str	r3, [sp, #12]
 800d838:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d83c:	4293      	cmp	r3, r2
 800d83e:	d019      	beq.n	800d874 <__gethex+0x260>
 800d840:	f1bb 0f20 	cmp.w	fp, #32
 800d844:	d107      	bne.n	800d856 <__gethex+0x242>
 800d846:	9b02      	ldr	r3, [sp, #8]
 800d848:	9a00      	ldr	r2, [sp, #0]
 800d84a:	f843 2b04 	str.w	r2, [r3], #4
 800d84e:	9302      	str	r3, [sp, #8]
 800d850:	2300      	movs	r3, #0
 800d852:	9300      	str	r3, [sp, #0]
 800d854:	469b      	mov	fp, r3
 800d856:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d85a:	f7ff fec6 	bl	800d5ea <__hexdig_fun>
 800d85e:	9b00      	ldr	r3, [sp, #0]
 800d860:	f000 000f 	and.w	r0, r0, #15
 800d864:	fa00 f00b 	lsl.w	r0, r0, fp
 800d868:	4303      	orrs	r3, r0
 800d86a:	9300      	str	r3, [sp, #0]
 800d86c:	f10b 0b04 	add.w	fp, fp, #4
 800d870:	9b03      	ldr	r3, [sp, #12]
 800d872:	e00d      	b.n	800d890 <__gethex+0x27c>
 800d874:	9b03      	ldr	r3, [sp, #12]
 800d876:	9a06      	ldr	r2, [sp, #24]
 800d878:	4413      	add	r3, r2
 800d87a:	42bb      	cmp	r3, r7
 800d87c:	d3e0      	bcc.n	800d840 <__gethex+0x22c>
 800d87e:	4618      	mov	r0, r3
 800d880:	9901      	ldr	r1, [sp, #4]
 800d882:	9307      	str	r3, [sp, #28]
 800d884:	4652      	mov	r2, sl
 800d886:	f001 fada 	bl	800ee3e <strncmp>
 800d88a:	9b07      	ldr	r3, [sp, #28]
 800d88c:	2800      	cmp	r0, #0
 800d88e:	d1d7      	bne.n	800d840 <__gethex+0x22c>
 800d890:	461e      	mov	r6, r3
 800d892:	e78b      	b.n	800d7ac <__gethex+0x198>
 800d894:	f04f 0a03 	mov.w	sl, #3
 800d898:	e7b8      	b.n	800d80c <__gethex+0x1f8>
 800d89a:	da0a      	bge.n	800d8b2 <__gethex+0x29e>
 800d89c:	1a37      	subs	r7, r6, r0
 800d89e:	4621      	mov	r1, r4
 800d8a0:	ee18 0a10 	vmov	r0, s16
 800d8a4:	463a      	mov	r2, r7
 800d8a6:	f000 fc9f 	bl	800e1e8 <__lshift>
 800d8aa:	1bed      	subs	r5, r5, r7
 800d8ac:	4604      	mov	r4, r0
 800d8ae:	f100 0914 	add.w	r9, r0, #20
 800d8b2:	f04f 0a00 	mov.w	sl, #0
 800d8b6:	e7ae      	b.n	800d816 <__gethex+0x202>
 800d8b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d8bc:	42a8      	cmp	r0, r5
 800d8be:	dd72      	ble.n	800d9a6 <__gethex+0x392>
 800d8c0:	1b45      	subs	r5, r0, r5
 800d8c2:	42ae      	cmp	r6, r5
 800d8c4:	dc36      	bgt.n	800d934 <__gethex+0x320>
 800d8c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d8ca:	2b02      	cmp	r3, #2
 800d8cc:	d02a      	beq.n	800d924 <__gethex+0x310>
 800d8ce:	2b03      	cmp	r3, #3
 800d8d0:	d02c      	beq.n	800d92c <__gethex+0x318>
 800d8d2:	2b01      	cmp	r3, #1
 800d8d4:	d115      	bne.n	800d902 <__gethex+0x2ee>
 800d8d6:	42ae      	cmp	r6, r5
 800d8d8:	d113      	bne.n	800d902 <__gethex+0x2ee>
 800d8da:	2e01      	cmp	r6, #1
 800d8dc:	d10b      	bne.n	800d8f6 <__gethex+0x2e2>
 800d8de:	9a04      	ldr	r2, [sp, #16]
 800d8e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d8e4:	6013      	str	r3, [r2, #0]
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	6123      	str	r3, [r4, #16]
 800d8ea:	f8c9 3000 	str.w	r3, [r9]
 800d8ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d8f0:	2762      	movs	r7, #98	; 0x62
 800d8f2:	601c      	str	r4, [r3, #0]
 800d8f4:	e723      	b.n	800d73e <__gethex+0x12a>
 800d8f6:	1e71      	subs	r1, r6, #1
 800d8f8:	4620      	mov	r0, r4
 800d8fa:	f000 feb3 	bl	800e664 <__any_on>
 800d8fe:	2800      	cmp	r0, #0
 800d900:	d1ed      	bne.n	800d8de <__gethex+0x2ca>
 800d902:	ee18 0a10 	vmov	r0, s16
 800d906:	4621      	mov	r1, r4
 800d908:	f000 fa52 	bl	800ddb0 <_Bfree>
 800d90c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d90e:	2300      	movs	r3, #0
 800d910:	6013      	str	r3, [r2, #0]
 800d912:	2750      	movs	r7, #80	; 0x50
 800d914:	e713      	b.n	800d73e <__gethex+0x12a>
 800d916:	bf00      	nop
 800d918:	0800f4cc 	.word	0x0800f4cc
 800d91c:	0800f3ec 	.word	0x0800f3ec
 800d920:	0800f460 	.word	0x0800f460
 800d924:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d926:	2b00      	cmp	r3, #0
 800d928:	d1eb      	bne.n	800d902 <__gethex+0x2ee>
 800d92a:	e7d8      	b.n	800d8de <__gethex+0x2ca>
 800d92c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d1d5      	bne.n	800d8de <__gethex+0x2ca>
 800d932:	e7e6      	b.n	800d902 <__gethex+0x2ee>
 800d934:	1e6f      	subs	r7, r5, #1
 800d936:	f1ba 0f00 	cmp.w	sl, #0
 800d93a:	d131      	bne.n	800d9a0 <__gethex+0x38c>
 800d93c:	b127      	cbz	r7, 800d948 <__gethex+0x334>
 800d93e:	4639      	mov	r1, r7
 800d940:	4620      	mov	r0, r4
 800d942:	f000 fe8f 	bl	800e664 <__any_on>
 800d946:	4682      	mov	sl, r0
 800d948:	117b      	asrs	r3, r7, #5
 800d94a:	2101      	movs	r1, #1
 800d94c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d950:	f007 071f 	and.w	r7, r7, #31
 800d954:	fa01 f707 	lsl.w	r7, r1, r7
 800d958:	421f      	tst	r7, r3
 800d95a:	4629      	mov	r1, r5
 800d95c:	4620      	mov	r0, r4
 800d95e:	bf18      	it	ne
 800d960:	f04a 0a02 	orrne.w	sl, sl, #2
 800d964:	1b76      	subs	r6, r6, r5
 800d966:	f7ff fdee 	bl	800d546 <rshift>
 800d96a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d96e:	2702      	movs	r7, #2
 800d970:	f1ba 0f00 	cmp.w	sl, #0
 800d974:	d048      	beq.n	800da08 <__gethex+0x3f4>
 800d976:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d97a:	2b02      	cmp	r3, #2
 800d97c:	d015      	beq.n	800d9aa <__gethex+0x396>
 800d97e:	2b03      	cmp	r3, #3
 800d980:	d017      	beq.n	800d9b2 <__gethex+0x39e>
 800d982:	2b01      	cmp	r3, #1
 800d984:	d109      	bne.n	800d99a <__gethex+0x386>
 800d986:	f01a 0f02 	tst.w	sl, #2
 800d98a:	d006      	beq.n	800d99a <__gethex+0x386>
 800d98c:	f8d9 0000 	ldr.w	r0, [r9]
 800d990:	ea4a 0a00 	orr.w	sl, sl, r0
 800d994:	f01a 0f01 	tst.w	sl, #1
 800d998:	d10e      	bne.n	800d9b8 <__gethex+0x3a4>
 800d99a:	f047 0710 	orr.w	r7, r7, #16
 800d99e:	e033      	b.n	800da08 <__gethex+0x3f4>
 800d9a0:	f04f 0a01 	mov.w	sl, #1
 800d9a4:	e7d0      	b.n	800d948 <__gethex+0x334>
 800d9a6:	2701      	movs	r7, #1
 800d9a8:	e7e2      	b.n	800d970 <__gethex+0x35c>
 800d9aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d9ac:	f1c3 0301 	rsb	r3, r3, #1
 800d9b0:	9315      	str	r3, [sp, #84]	; 0x54
 800d9b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d0f0      	beq.n	800d99a <__gethex+0x386>
 800d9b8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d9bc:	f104 0314 	add.w	r3, r4, #20
 800d9c0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d9c4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d9c8:	f04f 0c00 	mov.w	ip, #0
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9d2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d9d6:	d01c      	beq.n	800da12 <__gethex+0x3fe>
 800d9d8:	3201      	adds	r2, #1
 800d9da:	6002      	str	r2, [r0, #0]
 800d9dc:	2f02      	cmp	r7, #2
 800d9de:	f104 0314 	add.w	r3, r4, #20
 800d9e2:	d13f      	bne.n	800da64 <__gethex+0x450>
 800d9e4:	f8d8 2000 	ldr.w	r2, [r8]
 800d9e8:	3a01      	subs	r2, #1
 800d9ea:	42b2      	cmp	r2, r6
 800d9ec:	d10a      	bne.n	800da04 <__gethex+0x3f0>
 800d9ee:	1171      	asrs	r1, r6, #5
 800d9f0:	2201      	movs	r2, #1
 800d9f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d9f6:	f006 061f 	and.w	r6, r6, #31
 800d9fa:	fa02 f606 	lsl.w	r6, r2, r6
 800d9fe:	421e      	tst	r6, r3
 800da00:	bf18      	it	ne
 800da02:	4617      	movne	r7, r2
 800da04:	f047 0720 	orr.w	r7, r7, #32
 800da08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800da0a:	601c      	str	r4, [r3, #0]
 800da0c:	9b04      	ldr	r3, [sp, #16]
 800da0e:	601d      	str	r5, [r3, #0]
 800da10:	e695      	b.n	800d73e <__gethex+0x12a>
 800da12:	4299      	cmp	r1, r3
 800da14:	f843 cc04 	str.w	ip, [r3, #-4]
 800da18:	d8d8      	bhi.n	800d9cc <__gethex+0x3b8>
 800da1a:	68a3      	ldr	r3, [r4, #8]
 800da1c:	459b      	cmp	fp, r3
 800da1e:	db19      	blt.n	800da54 <__gethex+0x440>
 800da20:	6861      	ldr	r1, [r4, #4]
 800da22:	ee18 0a10 	vmov	r0, s16
 800da26:	3101      	adds	r1, #1
 800da28:	f000 f982 	bl	800dd30 <_Balloc>
 800da2c:	4681      	mov	r9, r0
 800da2e:	b918      	cbnz	r0, 800da38 <__gethex+0x424>
 800da30:	4b1a      	ldr	r3, [pc, #104]	; (800da9c <__gethex+0x488>)
 800da32:	4602      	mov	r2, r0
 800da34:	2184      	movs	r1, #132	; 0x84
 800da36:	e6a8      	b.n	800d78a <__gethex+0x176>
 800da38:	6922      	ldr	r2, [r4, #16]
 800da3a:	3202      	adds	r2, #2
 800da3c:	f104 010c 	add.w	r1, r4, #12
 800da40:	0092      	lsls	r2, r2, #2
 800da42:	300c      	adds	r0, #12
 800da44:	f7fc fe96 	bl	800a774 <memcpy>
 800da48:	4621      	mov	r1, r4
 800da4a:	ee18 0a10 	vmov	r0, s16
 800da4e:	f000 f9af 	bl	800ddb0 <_Bfree>
 800da52:	464c      	mov	r4, r9
 800da54:	6923      	ldr	r3, [r4, #16]
 800da56:	1c5a      	adds	r2, r3, #1
 800da58:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800da5c:	6122      	str	r2, [r4, #16]
 800da5e:	2201      	movs	r2, #1
 800da60:	615a      	str	r2, [r3, #20]
 800da62:	e7bb      	b.n	800d9dc <__gethex+0x3c8>
 800da64:	6922      	ldr	r2, [r4, #16]
 800da66:	455a      	cmp	r2, fp
 800da68:	dd0b      	ble.n	800da82 <__gethex+0x46e>
 800da6a:	2101      	movs	r1, #1
 800da6c:	4620      	mov	r0, r4
 800da6e:	f7ff fd6a 	bl	800d546 <rshift>
 800da72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800da76:	3501      	adds	r5, #1
 800da78:	42ab      	cmp	r3, r5
 800da7a:	f6ff aed0 	blt.w	800d81e <__gethex+0x20a>
 800da7e:	2701      	movs	r7, #1
 800da80:	e7c0      	b.n	800da04 <__gethex+0x3f0>
 800da82:	f016 061f 	ands.w	r6, r6, #31
 800da86:	d0fa      	beq.n	800da7e <__gethex+0x46a>
 800da88:	449a      	add	sl, r3
 800da8a:	f1c6 0620 	rsb	r6, r6, #32
 800da8e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800da92:	f000 fa43 	bl	800df1c <__hi0bits>
 800da96:	42b0      	cmp	r0, r6
 800da98:	dbe7      	blt.n	800da6a <__gethex+0x456>
 800da9a:	e7f0      	b.n	800da7e <__gethex+0x46a>
 800da9c:	0800f3ec 	.word	0x0800f3ec

0800daa0 <L_shift>:
 800daa0:	f1c2 0208 	rsb	r2, r2, #8
 800daa4:	0092      	lsls	r2, r2, #2
 800daa6:	b570      	push	{r4, r5, r6, lr}
 800daa8:	f1c2 0620 	rsb	r6, r2, #32
 800daac:	6843      	ldr	r3, [r0, #4]
 800daae:	6804      	ldr	r4, [r0, #0]
 800dab0:	fa03 f506 	lsl.w	r5, r3, r6
 800dab4:	432c      	orrs	r4, r5
 800dab6:	40d3      	lsrs	r3, r2
 800dab8:	6004      	str	r4, [r0, #0]
 800daba:	f840 3f04 	str.w	r3, [r0, #4]!
 800dabe:	4288      	cmp	r0, r1
 800dac0:	d3f4      	bcc.n	800daac <L_shift+0xc>
 800dac2:	bd70      	pop	{r4, r5, r6, pc}

0800dac4 <__match>:
 800dac4:	b530      	push	{r4, r5, lr}
 800dac6:	6803      	ldr	r3, [r0, #0]
 800dac8:	3301      	adds	r3, #1
 800daca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dace:	b914      	cbnz	r4, 800dad6 <__match+0x12>
 800dad0:	6003      	str	r3, [r0, #0]
 800dad2:	2001      	movs	r0, #1
 800dad4:	bd30      	pop	{r4, r5, pc}
 800dad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dada:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800dade:	2d19      	cmp	r5, #25
 800dae0:	bf98      	it	ls
 800dae2:	3220      	addls	r2, #32
 800dae4:	42a2      	cmp	r2, r4
 800dae6:	d0f0      	beq.n	800daca <__match+0x6>
 800dae8:	2000      	movs	r0, #0
 800daea:	e7f3      	b.n	800dad4 <__match+0x10>

0800daec <__hexnan>:
 800daec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daf0:	680b      	ldr	r3, [r1, #0]
 800daf2:	6801      	ldr	r1, [r0, #0]
 800daf4:	115e      	asrs	r6, r3, #5
 800daf6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dafa:	f013 031f 	ands.w	r3, r3, #31
 800dafe:	b087      	sub	sp, #28
 800db00:	bf18      	it	ne
 800db02:	3604      	addne	r6, #4
 800db04:	2500      	movs	r5, #0
 800db06:	1f37      	subs	r7, r6, #4
 800db08:	4682      	mov	sl, r0
 800db0a:	4690      	mov	r8, r2
 800db0c:	9301      	str	r3, [sp, #4]
 800db0e:	f846 5c04 	str.w	r5, [r6, #-4]
 800db12:	46b9      	mov	r9, r7
 800db14:	463c      	mov	r4, r7
 800db16:	9502      	str	r5, [sp, #8]
 800db18:	46ab      	mov	fp, r5
 800db1a:	784a      	ldrb	r2, [r1, #1]
 800db1c:	1c4b      	adds	r3, r1, #1
 800db1e:	9303      	str	r3, [sp, #12]
 800db20:	b342      	cbz	r2, 800db74 <__hexnan+0x88>
 800db22:	4610      	mov	r0, r2
 800db24:	9105      	str	r1, [sp, #20]
 800db26:	9204      	str	r2, [sp, #16]
 800db28:	f7ff fd5f 	bl	800d5ea <__hexdig_fun>
 800db2c:	2800      	cmp	r0, #0
 800db2e:	d14f      	bne.n	800dbd0 <__hexnan+0xe4>
 800db30:	9a04      	ldr	r2, [sp, #16]
 800db32:	9905      	ldr	r1, [sp, #20]
 800db34:	2a20      	cmp	r2, #32
 800db36:	d818      	bhi.n	800db6a <__hexnan+0x7e>
 800db38:	9b02      	ldr	r3, [sp, #8]
 800db3a:	459b      	cmp	fp, r3
 800db3c:	dd13      	ble.n	800db66 <__hexnan+0x7a>
 800db3e:	454c      	cmp	r4, r9
 800db40:	d206      	bcs.n	800db50 <__hexnan+0x64>
 800db42:	2d07      	cmp	r5, #7
 800db44:	dc04      	bgt.n	800db50 <__hexnan+0x64>
 800db46:	462a      	mov	r2, r5
 800db48:	4649      	mov	r1, r9
 800db4a:	4620      	mov	r0, r4
 800db4c:	f7ff ffa8 	bl	800daa0 <L_shift>
 800db50:	4544      	cmp	r4, r8
 800db52:	d950      	bls.n	800dbf6 <__hexnan+0x10a>
 800db54:	2300      	movs	r3, #0
 800db56:	f1a4 0904 	sub.w	r9, r4, #4
 800db5a:	f844 3c04 	str.w	r3, [r4, #-4]
 800db5e:	f8cd b008 	str.w	fp, [sp, #8]
 800db62:	464c      	mov	r4, r9
 800db64:	461d      	mov	r5, r3
 800db66:	9903      	ldr	r1, [sp, #12]
 800db68:	e7d7      	b.n	800db1a <__hexnan+0x2e>
 800db6a:	2a29      	cmp	r2, #41	; 0x29
 800db6c:	d156      	bne.n	800dc1c <__hexnan+0x130>
 800db6e:	3102      	adds	r1, #2
 800db70:	f8ca 1000 	str.w	r1, [sl]
 800db74:	f1bb 0f00 	cmp.w	fp, #0
 800db78:	d050      	beq.n	800dc1c <__hexnan+0x130>
 800db7a:	454c      	cmp	r4, r9
 800db7c:	d206      	bcs.n	800db8c <__hexnan+0xa0>
 800db7e:	2d07      	cmp	r5, #7
 800db80:	dc04      	bgt.n	800db8c <__hexnan+0xa0>
 800db82:	462a      	mov	r2, r5
 800db84:	4649      	mov	r1, r9
 800db86:	4620      	mov	r0, r4
 800db88:	f7ff ff8a 	bl	800daa0 <L_shift>
 800db8c:	4544      	cmp	r4, r8
 800db8e:	d934      	bls.n	800dbfa <__hexnan+0x10e>
 800db90:	f1a8 0204 	sub.w	r2, r8, #4
 800db94:	4623      	mov	r3, r4
 800db96:	f853 1b04 	ldr.w	r1, [r3], #4
 800db9a:	f842 1f04 	str.w	r1, [r2, #4]!
 800db9e:	429f      	cmp	r7, r3
 800dba0:	d2f9      	bcs.n	800db96 <__hexnan+0xaa>
 800dba2:	1b3b      	subs	r3, r7, r4
 800dba4:	f023 0303 	bic.w	r3, r3, #3
 800dba8:	3304      	adds	r3, #4
 800dbaa:	3401      	adds	r4, #1
 800dbac:	3e03      	subs	r6, #3
 800dbae:	42b4      	cmp	r4, r6
 800dbb0:	bf88      	it	hi
 800dbb2:	2304      	movhi	r3, #4
 800dbb4:	4443      	add	r3, r8
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	f843 2b04 	str.w	r2, [r3], #4
 800dbbc:	429f      	cmp	r7, r3
 800dbbe:	d2fb      	bcs.n	800dbb8 <__hexnan+0xcc>
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	b91b      	cbnz	r3, 800dbcc <__hexnan+0xe0>
 800dbc4:	4547      	cmp	r7, r8
 800dbc6:	d127      	bne.n	800dc18 <__hexnan+0x12c>
 800dbc8:	2301      	movs	r3, #1
 800dbca:	603b      	str	r3, [r7, #0]
 800dbcc:	2005      	movs	r0, #5
 800dbce:	e026      	b.n	800dc1e <__hexnan+0x132>
 800dbd0:	3501      	adds	r5, #1
 800dbd2:	2d08      	cmp	r5, #8
 800dbd4:	f10b 0b01 	add.w	fp, fp, #1
 800dbd8:	dd06      	ble.n	800dbe8 <__hexnan+0xfc>
 800dbda:	4544      	cmp	r4, r8
 800dbdc:	d9c3      	bls.n	800db66 <__hexnan+0x7a>
 800dbde:	2300      	movs	r3, #0
 800dbe0:	f844 3c04 	str.w	r3, [r4, #-4]
 800dbe4:	2501      	movs	r5, #1
 800dbe6:	3c04      	subs	r4, #4
 800dbe8:	6822      	ldr	r2, [r4, #0]
 800dbea:	f000 000f 	and.w	r0, r0, #15
 800dbee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800dbf2:	6022      	str	r2, [r4, #0]
 800dbf4:	e7b7      	b.n	800db66 <__hexnan+0x7a>
 800dbf6:	2508      	movs	r5, #8
 800dbf8:	e7b5      	b.n	800db66 <__hexnan+0x7a>
 800dbfa:	9b01      	ldr	r3, [sp, #4]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d0df      	beq.n	800dbc0 <__hexnan+0xd4>
 800dc00:	f04f 32ff 	mov.w	r2, #4294967295
 800dc04:	f1c3 0320 	rsb	r3, r3, #32
 800dc08:	fa22 f303 	lsr.w	r3, r2, r3
 800dc0c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dc10:	401a      	ands	r2, r3
 800dc12:	f846 2c04 	str.w	r2, [r6, #-4]
 800dc16:	e7d3      	b.n	800dbc0 <__hexnan+0xd4>
 800dc18:	3f04      	subs	r7, #4
 800dc1a:	e7d1      	b.n	800dbc0 <__hexnan+0xd4>
 800dc1c:	2004      	movs	r0, #4
 800dc1e:	b007      	add	sp, #28
 800dc20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dc24 <_localeconv_r>:
 800dc24:	4800      	ldr	r0, [pc, #0]	; (800dc28 <_localeconv_r+0x4>)
 800dc26:	4770      	bx	lr
 800dc28:	2000018c 	.word	0x2000018c

0800dc2c <__retarget_lock_init_recursive>:
 800dc2c:	4770      	bx	lr

0800dc2e <__retarget_lock_acquire_recursive>:
 800dc2e:	4770      	bx	lr

0800dc30 <__retarget_lock_release_recursive>:
 800dc30:	4770      	bx	lr

0800dc32 <__swhatbuf_r>:
 800dc32:	b570      	push	{r4, r5, r6, lr}
 800dc34:	460e      	mov	r6, r1
 800dc36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc3a:	2900      	cmp	r1, #0
 800dc3c:	b096      	sub	sp, #88	; 0x58
 800dc3e:	4614      	mov	r4, r2
 800dc40:	461d      	mov	r5, r3
 800dc42:	da07      	bge.n	800dc54 <__swhatbuf_r+0x22>
 800dc44:	2300      	movs	r3, #0
 800dc46:	602b      	str	r3, [r5, #0]
 800dc48:	89b3      	ldrh	r3, [r6, #12]
 800dc4a:	061a      	lsls	r2, r3, #24
 800dc4c:	d410      	bmi.n	800dc70 <__swhatbuf_r+0x3e>
 800dc4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc52:	e00e      	b.n	800dc72 <__swhatbuf_r+0x40>
 800dc54:	466a      	mov	r2, sp
 800dc56:	f001 f963 	bl	800ef20 <_fstat_r>
 800dc5a:	2800      	cmp	r0, #0
 800dc5c:	dbf2      	blt.n	800dc44 <__swhatbuf_r+0x12>
 800dc5e:	9a01      	ldr	r2, [sp, #4]
 800dc60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dc64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dc68:	425a      	negs	r2, r3
 800dc6a:	415a      	adcs	r2, r3
 800dc6c:	602a      	str	r2, [r5, #0]
 800dc6e:	e7ee      	b.n	800dc4e <__swhatbuf_r+0x1c>
 800dc70:	2340      	movs	r3, #64	; 0x40
 800dc72:	2000      	movs	r0, #0
 800dc74:	6023      	str	r3, [r4, #0]
 800dc76:	b016      	add	sp, #88	; 0x58
 800dc78:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dc7c <__smakebuf_r>:
 800dc7c:	898b      	ldrh	r3, [r1, #12]
 800dc7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc80:	079d      	lsls	r5, r3, #30
 800dc82:	4606      	mov	r6, r0
 800dc84:	460c      	mov	r4, r1
 800dc86:	d507      	bpl.n	800dc98 <__smakebuf_r+0x1c>
 800dc88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dc8c:	6023      	str	r3, [r4, #0]
 800dc8e:	6123      	str	r3, [r4, #16]
 800dc90:	2301      	movs	r3, #1
 800dc92:	6163      	str	r3, [r4, #20]
 800dc94:	b002      	add	sp, #8
 800dc96:	bd70      	pop	{r4, r5, r6, pc}
 800dc98:	ab01      	add	r3, sp, #4
 800dc9a:	466a      	mov	r2, sp
 800dc9c:	f7ff ffc9 	bl	800dc32 <__swhatbuf_r>
 800dca0:	9900      	ldr	r1, [sp, #0]
 800dca2:	4605      	mov	r5, r0
 800dca4:	4630      	mov	r0, r6
 800dca6:	f000 fd5d 	bl	800e764 <_malloc_r>
 800dcaa:	b948      	cbnz	r0, 800dcc0 <__smakebuf_r+0x44>
 800dcac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcb0:	059a      	lsls	r2, r3, #22
 800dcb2:	d4ef      	bmi.n	800dc94 <__smakebuf_r+0x18>
 800dcb4:	f023 0303 	bic.w	r3, r3, #3
 800dcb8:	f043 0302 	orr.w	r3, r3, #2
 800dcbc:	81a3      	strh	r3, [r4, #12]
 800dcbe:	e7e3      	b.n	800dc88 <__smakebuf_r+0xc>
 800dcc0:	4b0d      	ldr	r3, [pc, #52]	; (800dcf8 <__smakebuf_r+0x7c>)
 800dcc2:	62b3      	str	r3, [r6, #40]	; 0x28
 800dcc4:	89a3      	ldrh	r3, [r4, #12]
 800dcc6:	6020      	str	r0, [r4, #0]
 800dcc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dccc:	81a3      	strh	r3, [r4, #12]
 800dcce:	9b00      	ldr	r3, [sp, #0]
 800dcd0:	6163      	str	r3, [r4, #20]
 800dcd2:	9b01      	ldr	r3, [sp, #4]
 800dcd4:	6120      	str	r0, [r4, #16]
 800dcd6:	b15b      	cbz	r3, 800dcf0 <__smakebuf_r+0x74>
 800dcd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dcdc:	4630      	mov	r0, r6
 800dcde:	f001 f931 	bl	800ef44 <_isatty_r>
 800dce2:	b128      	cbz	r0, 800dcf0 <__smakebuf_r+0x74>
 800dce4:	89a3      	ldrh	r3, [r4, #12]
 800dce6:	f023 0303 	bic.w	r3, r3, #3
 800dcea:	f043 0301 	orr.w	r3, r3, #1
 800dcee:	81a3      	strh	r3, [r4, #12]
 800dcf0:	89a0      	ldrh	r0, [r4, #12]
 800dcf2:	4305      	orrs	r5, r0
 800dcf4:	81a5      	strh	r5, [r4, #12]
 800dcf6:	e7cd      	b.n	800dc94 <__smakebuf_r+0x18>
 800dcf8:	0800d3a5 	.word	0x0800d3a5

0800dcfc <malloc>:
 800dcfc:	4b02      	ldr	r3, [pc, #8]	; (800dd08 <malloc+0xc>)
 800dcfe:	4601      	mov	r1, r0
 800dd00:	6818      	ldr	r0, [r3, #0]
 800dd02:	f000 bd2f 	b.w	800e764 <_malloc_r>
 800dd06:	bf00      	nop
 800dd08:	20000034 	.word	0x20000034

0800dd0c <__ascii_mbtowc>:
 800dd0c:	b082      	sub	sp, #8
 800dd0e:	b901      	cbnz	r1, 800dd12 <__ascii_mbtowc+0x6>
 800dd10:	a901      	add	r1, sp, #4
 800dd12:	b142      	cbz	r2, 800dd26 <__ascii_mbtowc+0x1a>
 800dd14:	b14b      	cbz	r3, 800dd2a <__ascii_mbtowc+0x1e>
 800dd16:	7813      	ldrb	r3, [r2, #0]
 800dd18:	600b      	str	r3, [r1, #0]
 800dd1a:	7812      	ldrb	r2, [r2, #0]
 800dd1c:	1e10      	subs	r0, r2, #0
 800dd1e:	bf18      	it	ne
 800dd20:	2001      	movne	r0, #1
 800dd22:	b002      	add	sp, #8
 800dd24:	4770      	bx	lr
 800dd26:	4610      	mov	r0, r2
 800dd28:	e7fb      	b.n	800dd22 <__ascii_mbtowc+0x16>
 800dd2a:	f06f 0001 	mvn.w	r0, #1
 800dd2e:	e7f8      	b.n	800dd22 <__ascii_mbtowc+0x16>

0800dd30 <_Balloc>:
 800dd30:	b570      	push	{r4, r5, r6, lr}
 800dd32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dd34:	4604      	mov	r4, r0
 800dd36:	460d      	mov	r5, r1
 800dd38:	b976      	cbnz	r6, 800dd58 <_Balloc+0x28>
 800dd3a:	2010      	movs	r0, #16
 800dd3c:	f7ff ffde 	bl	800dcfc <malloc>
 800dd40:	4602      	mov	r2, r0
 800dd42:	6260      	str	r0, [r4, #36]	; 0x24
 800dd44:	b920      	cbnz	r0, 800dd50 <_Balloc+0x20>
 800dd46:	4b18      	ldr	r3, [pc, #96]	; (800dda8 <_Balloc+0x78>)
 800dd48:	4818      	ldr	r0, [pc, #96]	; (800ddac <_Balloc+0x7c>)
 800dd4a:	2166      	movs	r1, #102	; 0x66
 800dd4c:	f001 f8a8 	bl	800eea0 <__assert_func>
 800dd50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dd54:	6006      	str	r6, [r0, #0]
 800dd56:	60c6      	str	r6, [r0, #12]
 800dd58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dd5a:	68f3      	ldr	r3, [r6, #12]
 800dd5c:	b183      	cbz	r3, 800dd80 <_Balloc+0x50>
 800dd5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd60:	68db      	ldr	r3, [r3, #12]
 800dd62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dd66:	b9b8      	cbnz	r0, 800dd98 <_Balloc+0x68>
 800dd68:	2101      	movs	r1, #1
 800dd6a:	fa01 f605 	lsl.w	r6, r1, r5
 800dd6e:	1d72      	adds	r2, r6, #5
 800dd70:	0092      	lsls	r2, r2, #2
 800dd72:	4620      	mov	r0, r4
 800dd74:	f000 fc97 	bl	800e6a6 <_calloc_r>
 800dd78:	b160      	cbz	r0, 800dd94 <_Balloc+0x64>
 800dd7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dd7e:	e00e      	b.n	800dd9e <_Balloc+0x6e>
 800dd80:	2221      	movs	r2, #33	; 0x21
 800dd82:	2104      	movs	r1, #4
 800dd84:	4620      	mov	r0, r4
 800dd86:	f000 fc8e 	bl	800e6a6 <_calloc_r>
 800dd8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd8c:	60f0      	str	r0, [r6, #12]
 800dd8e:	68db      	ldr	r3, [r3, #12]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d1e4      	bne.n	800dd5e <_Balloc+0x2e>
 800dd94:	2000      	movs	r0, #0
 800dd96:	bd70      	pop	{r4, r5, r6, pc}
 800dd98:	6802      	ldr	r2, [r0, #0]
 800dd9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dd9e:	2300      	movs	r3, #0
 800dda0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dda4:	e7f7      	b.n	800dd96 <_Balloc+0x66>
 800dda6:	bf00      	nop
 800dda8:	0800f376 	.word	0x0800f376
 800ddac:	0800f4e0 	.word	0x0800f4e0

0800ddb0 <_Bfree>:
 800ddb0:	b570      	push	{r4, r5, r6, lr}
 800ddb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ddb4:	4605      	mov	r5, r0
 800ddb6:	460c      	mov	r4, r1
 800ddb8:	b976      	cbnz	r6, 800ddd8 <_Bfree+0x28>
 800ddba:	2010      	movs	r0, #16
 800ddbc:	f7ff ff9e 	bl	800dcfc <malloc>
 800ddc0:	4602      	mov	r2, r0
 800ddc2:	6268      	str	r0, [r5, #36]	; 0x24
 800ddc4:	b920      	cbnz	r0, 800ddd0 <_Bfree+0x20>
 800ddc6:	4b09      	ldr	r3, [pc, #36]	; (800ddec <_Bfree+0x3c>)
 800ddc8:	4809      	ldr	r0, [pc, #36]	; (800ddf0 <_Bfree+0x40>)
 800ddca:	218a      	movs	r1, #138	; 0x8a
 800ddcc:	f001 f868 	bl	800eea0 <__assert_func>
 800ddd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ddd4:	6006      	str	r6, [r0, #0]
 800ddd6:	60c6      	str	r6, [r0, #12]
 800ddd8:	b13c      	cbz	r4, 800ddea <_Bfree+0x3a>
 800ddda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dddc:	6862      	ldr	r2, [r4, #4]
 800ddde:	68db      	ldr	r3, [r3, #12]
 800dde0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dde4:	6021      	str	r1, [r4, #0]
 800dde6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ddea:	bd70      	pop	{r4, r5, r6, pc}
 800ddec:	0800f376 	.word	0x0800f376
 800ddf0:	0800f4e0 	.word	0x0800f4e0

0800ddf4 <__multadd>:
 800ddf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddf8:	690e      	ldr	r6, [r1, #16]
 800ddfa:	4607      	mov	r7, r0
 800ddfc:	4698      	mov	r8, r3
 800ddfe:	460c      	mov	r4, r1
 800de00:	f101 0014 	add.w	r0, r1, #20
 800de04:	2300      	movs	r3, #0
 800de06:	6805      	ldr	r5, [r0, #0]
 800de08:	b2a9      	uxth	r1, r5
 800de0a:	fb02 8101 	mla	r1, r2, r1, r8
 800de0e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800de12:	0c2d      	lsrs	r5, r5, #16
 800de14:	fb02 c505 	mla	r5, r2, r5, ip
 800de18:	b289      	uxth	r1, r1
 800de1a:	3301      	adds	r3, #1
 800de1c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800de20:	429e      	cmp	r6, r3
 800de22:	f840 1b04 	str.w	r1, [r0], #4
 800de26:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800de2a:	dcec      	bgt.n	800de06 <__multadd+0x12>
 800de2c:	f1b8 0f00 	cmp.w	r8, #0
 800de30:	d022      	beq.n	800de78 <__multadd+0x84>
 800de32:	68a3      	ldr	r3, [r4, #8]
 800de34:	42b3      	cmp	r3, r6
 800de36:	dc19      	bgt.n	800de6c <__multadd+0x78>
 800de38:	6861      	ldr	r1, [r4, #4]
 800de3a:	4638      	mov	r0, r7
 800de3c:	3101      	adds	r1, #1
 800de3e:	f7ff ff77 	bl	800dd30 <_Balloc>
 800de42:	4605      	mov	r5, r0
 800de44:	b928      	cbnz	r0, 800de52 <__multadd+0x5e>
 800de46:	4602      	mov	r2, r0
 800de48:	4b0d      	ldr	r3, [pc, #52]	; (800de80 <__multadd+0x8c>)
 800de4a:	480e      	ldr	r0, [pc, #56]	; (800de84 <__multadd+0x90>)
 800de4c:	21b5      	movs	r1, #181	; 0xb5
 800de4e:	f001 f827 	bl	800eea0 <__assert_func>
 800de52:	6922      	ldr	r2, [r4, #16]
 800de54:	3202      	adds	r2, #2
 800de56:	f104 010c 	add.w	r1, r4, #12
 800de5a:	0092      	lsls	r2, r2, #2
 800de5c:	300c      	adds	r0, #12
 800de5e:	f7fc fc89 	bl	800a774 <memcpy>
 800de62:	4621      	mov	r1, r4
 800de64:	4638      	mov	r0, r7
 800de66:	f7ff ffa3 	bl	800ddb0 <_Bfree>
 800de6a:	462c      	mov	r4, r5
 800de6c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800de70:	3601      	adds	r6, #1
 800de72:	f8c3 8014 	str.w	r8, [r3, #20]
 800de76:	6126      	str	r6, [r4, #16]
 800de78:	4620      	mov	r0, r4
 800de7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de7e:	bf00      	nop
 800de80:	0800f3ec 	.word	0x0800f3ec
 800de84:	0800f4e0 	.word	0x0800f4e0

0800de88 <__s2b>:
 800de88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de8c:	460c      	mov	r4, r1
 800de8e:	4615      	mov	r5, r2
 800de90:	461f      	mov	r7, r3
 800de92:	2209      	movs	r2, #9
 800de94:	3308      	adds	r3, #8
 800de96:	4606      	mov	r6, r0
 800de98:	fb93 f3f2 	sdiv	r3, r3, r2
 800de9c:	2100      	movs	r1, #0
 800de9e:	2201      	movs	r2, #1
 800dea0:	429a      	cmp	r2, r3
 800dea2:	db09      	blt.n	800deb8 <__s2b+0x30>
 800dea4:	4630      	mov	r0, r6
 800dea6:	f7ff ff43 	bl	800dd30 <_Balloc>
 800deaa:	b940      	cbnz	r0, 800debe <__s2b+0x36>
 800deac:	4602      	mov	r2, r0
 800deae:	4b19      	ldr	r3, [pc, #100]	; (800df14 <__s2b+0x8c>)
 800deb0:	4819      	ldr	r0, [pc, #100]	; (800df18 <__s2b+0x90>)
 800deb2:	21ce      	movs	r1, #206	; 0xce
 800deb4:	f000 fff4 	bl	800eea0 <__assert_func>
 800deb8:	0052      	lsls	r2, r2, #1
 800deba:	3101      	adds	r1, #1
 800debc:	e7f0      	b.n	800dea0 <__s2b+0x18>
 800debe:	9b08      	ldr	r3, [sp, #32]
 800dec0:	6143      	str	r3, [r0, #20]
 800dec2:	2d09      	cmp	r5, #9
 800dec4:	f04f 0301 	mov.w	r3, #1
 800dec8:	6103      	str	r3, [r0, #16]
 800deca:	dd16      	ble.n	800defa <__s2b+0x72>
 800decc:	f104 0909 	add.w	r9, r4, #9
 800ded0:	46c8      	mov	r8, r9
 800ded2:	442c      	add	r4, r5
 800ded4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ded8:	4601      	mov	r1, r0
 800deda:	3b30      	subs	r3, #48	; 0x30
 800dedc:	220a      	movs	r2, #10
 800dede:	4630      	mov	r0, r6
 800dee0:	f7ff ff88 	bl	800ddf4 <__multadd>
 800dee4:	45a0      	cmp	r8, r4
 800dee6:	d1f5      	bne.n	800ded4 <__s2b+0x4c>
 800dee8:	f1a5 0408 	sub.w	r4, r5, #8
 800deec:	444c      	add	r4, r9
 800deee:	1b2d      	subs	r5, r5, r4
 800def0:	1963      	adds	r3, r4, r5
 800def2:	42bb      	cmp	r3, r7
 800def4:	db04      	blt.n	800df00 <__s2b+0x78>
 800def6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800defa:	340a      	adds	r4, #10
 800defc:	2509      	movs	r5, #9
 800defe:	e7f6      	b.n	800deee <__s2b+0x66>
 800df00:	f814 3b01 	ldrb.w	r3, [r4], #1
 800df04:	4601      	mov	r1, r0
 800df06:	3b30      	subs	r3, #48	; 0x30
 800df08:	220a      	movs	r2, #10
 800df0a:	4630      	mov	r0, r6
 800df0c:	f7ff ff72 	bl	800ddf4 <__multadd>
 800df10:	e7ee      	b.n	800def0 <__s2b+0x68>
 800df12:	bf00      	nop
 800df14:	0800f3ec 	.word	0x0800f3ec
 800df18:	0800f4e0 	.word	0x0800f4e0

0800df1c <__hi0bits>:
 800df1c:	0c03      	lsrs	r3, r0, #16
 800df1e:	041b      	lsls	r3, r3, #16
 800df20:	b9d3      	cbnz	r3, 800df58 <__hi0bits+0x3c>
 800df22:	0400      	lsls	r0, r0, #16
 800df24:	2310      	movs	r3, #16
 800df26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800df2a:	bf04      	itt	eq
 800df2c:	0200      	lsleq	r0, r0, #8
 800df2e:	3308      	addeq	r3, #8
 800df30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800df34:	bf04      	itt	eq
 800df36:	0100      	lsleq	r0, r0, #4
 800df38:	3304      	addeq	r3, #4
 800df3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800df3e:	bf04      	itt	eq
 800df40:	0080      	lsleq	r0, r0, #2
 800df42:	3302      	addeq	r3, #2
 800df44:	2800      	cmp	r0, #0
 800df46:	db05      	blt.n	800df54 <__hi0bits+0x38>
 800df48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800df4c:	f103 0301 	add.w	r3, r3, #1
 800df50:	bf08      	it	eq
 800df52:	2320      	moveq	r3, #32
 800df54:	4618      	mov	r0, r3
 800df56:	4770      	bx	lr
 800df58:	2300      	movs	r3, #0
 800df5a:	e7e4      	b.n	800df26 <__hi0bits+0xa>

0800df5c <__lo0bits>:
 800df5c:	6803      	ldr	r3, [r0, #0]
 800df5e:	f013 0207 	ands.w	r2, r3, #7
 800df62:	4601      	mov	r1, r0
 800df64:	d00b      	beq.n	800df7e <__lo0bits+0x22>
 800df66:	07da      	lsls	r2, r3, #31
 800df68:	d424      	bmi.n	800dfb4 <__lo0bits+0x58>
 800df6a:	0798      	lsls	r0, r3, #30
 800df6c:	bf49      	itett	mi
 800df6e:	085b      	lsrmi	r3, r3, #1
 800df70:	089b      	lsrpl	r3, r3, #2
 800df72:	2001      	movmi	r0, #1
 800df74:	600b      	strmi	r3, [r1, #0]
 800df76:	bf5c      	itt	pl
 800df78:	600b      	strpl	r3, [r1, #0]
 800df7a:	2002      	movpl	r0, #2
 800df7c:	4770      	bx	lr
 800df7e:	b298      	uxth	r0, r3
 800df80:	b9b0      	cbnz	r0, 800dfb0 <__lo0bits+0x54>
 800df82:	0c1b      	lsrs	r3, r3, #16
 800df84:	2010      	movs	r0, #16
 800df86:	f013 0fff 	tst.w	r3, #255	; 0xff
 800df8a:	bf04      	itt	eq
 800df8c:	0a1b      	lsreq	r3, r3, #8
 800df8e:	3008      	addeq	r0, #8
 800df90:	071a      	lsls	r2, r3, #28
 800df92:	bf04      	itt	eq
 800df94:	091b      	lsreq	r3, r3, #4
 800df96:	3004      	addeq	r0, #4
 800df98:	079a      	lsls	r2, r3, #30
 800df9a:	bf04      	itt	eq
 800df9c:	089b      	lsreq	r3, r3, #2
 800df9e:	3002      	addeq	r0, #2
 800dfa0:	07da      	lsls	r2, r3, #31
 800dfa2:	d403      	bmi.n	800dfac <__lo0bits+0x50>
 800dfa4:	085b      	lsrs	r3, r3, #1
 800dfa6:	f100 0001 	add.w	r0, r0, #1
 800dfaa:	d005      	beq.n	800dfb8 <__lo0bits+0x5c>
 800dfac:	600b      	str	r3, [r1, #0]
 800dfae:	4770      	bx	lr
 800dfb0:	4610      	mov	r0, r2
 800dfb2:	e7e8      	b.n	800df86 <__lo0bits+0x2a>
 800dfb4:	2000      	movs	r0, #0
 800dfb6:	4770      	bx	lr
 800dfb8:	2020      	movs	r0, #32
 800dfba:	4770      	bx	lr

0800dfbc <__i2b>:
 800dfbc:	b510      	push	{r4, lr}
 800dfbe:	460c      	mov	r4, r1
 800dfc0:	2101      	movs	r1, #1
 800dfc2:	f7ff feb5 	bl	800dd30 <_Balloc>
 800dfc6:	4602      	mov	r2, r0
 800dfc8:	b928      	cbnz	r0, 800dfd6 <__i2b+0x1a>
 800dfca:	4b05      	ldr	r3, [pc, #20]	; (800dfe0 <__i2b+0x24>)
 800dfcc:	4805      	ldr	r0, [pc, #20]	; (800dfe4 <__i2b+0x28>)
 800dfce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dfd2:	f000 ff65 	bl	800eea0 <__assert_func>
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	6144      	str	r4, [r0, #20]
 800dfda:	6103      	str	r3, [r0, #16]
 800dfdc:	bd10      	pop	{r4, pc}
 800dfde:	bf00      	nop
 800dfe0:	0800f3ec 	.word	0x0800f3ec
 800dfe4:	0800f4e0 	.word	0x0800f4e0

0800dfe8 <__multiply>:
 800dfe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfec:	4614      	mov	r4, r2
 800dfee:	690a      	ldr	r2, [r1, #16]
 800dff0:	6923      	ldr	r3, [r4, #16]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	bfb8      	it	lt
 800dff6:	460b      	movlt	r3, r1
 800dff8:	460d      	mov	r5, r1
 800dffa:	bfbc      	itt	lt
 800dffc:	4625      	movlt	r5, r4
 800dffe:	461c      	movlt	r4, r3
 800e000:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e004:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e008:	68ab      	ldr	r3, [r5, #8]
 800e00a:	6869      	ldr	r1, [r5, #4]
 800e00c:	eb0a 0709 	add.w	r7, sl, r9
 800e010:	42bb      	cmp	r3, r7
 800e012:	b085      	sub	sp, #20
 800e014:	bfb8      	it	lt
 800e016:	3101      	addlt	r1, #1
 800e018:	f7ff fe8a 	bl	800dd30 <_Balloc>
 800e01c:	b930      	cbnz	r0, 800e02c <__multiply+0x44>
 800e01e:	4602      	mov	r2, r0
 800e020:	4b42      	ldr	r3, [pc, #264]	; (800e12c <__multiply+0x144>)
 800e022:	4843      	ldr	r0, [pc, #268]	; (800e130 <__multiply+0x148>)
 800e024:	f240 115d 	movw	r1, #349	; 0x15d
 800e028:	f000 ff3a 	bl	800eea0 <__assert_func>
 800e02c:	f100 0614 	add.w	r6, r0, #20
 800e030:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e034:	4633      	mov	r3, r6
 800e036:	2200      	movs	r2, #0
 800e038:	4543      	cmp	r3, r8
 800e03a:	d31e      	bcc.n	800e07a <__multiply+0x92>
 800e03c:	f105 0c14 	add.w	ip, r5, #20
 800e040:	f104 0314 	add.w	r3, r4, #20
 800e044:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e048:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e04c:	9202      	str	r2, [sp, #8]
 800e04e:	ebac 0205 	sub.w	r2, ip, r5
 800e052:	3a15      	subs	r2, #21
 800e054:	f022 0203 	bic.w	r2, r2, #3
 800e058:	3204      	adds	r2, #4
 800e05a:	f105 0115 	add.w	r1, r5, #21
 800e05e:	458c      	cmp	ip, r1
 800e060:	bf38      	it	cc
 800e062:	2204      	movcc	r2, #4
 800e064:	9201      	str	r2, [sp, #4]
 800e066:	9a02      	ldr	r2, [sp, #8]
 800e068:	9303      	str	r3, [sp, #12]
 800e06a:	429a      	cmp	r2, r3
 800e06c:	d808      	bhi.n	800e080 <__multiply+0x98>
 800e06e:	2f00      	cmp	r7, #0
 800e070:	dc55      	bgt.n	800e11e <__multiply+0x136>
 800e072:	6107      	str	r7, [r0, #16]
 800e074:	b005      	add	sp, #20
 800e076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e07a:	f843 2b04 	str.w	r2, [r3], #4
 800e07e:	e7db      	b.n	800e038 <__multiply+0x50>
 800e080:	f8b3 a000 	ldrh.w	sl, [r3]
 800e084:	f1ba 0f00 	cmp.w	sl, #0
 800e088:	d020      	beq.n	800e0cc <__multiply+0xe4>
 800e08a:	f105 0e14 	add.w	lr, r5, #20
 800e08e:	46b1      	mov	r9, r6
 800e090:	2200      	movs	r2, #0
 800e092:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e096:	f8d9 b000 	ldr.w	fp, [r9]
 800e09a:	b2a1      	uxth	r1, r4
 800e09c:	fa1f fb8b 	uxth.w	fp, fp
 800e0a0:	fb0a b101 	mla	r1, sl, r1, fp
 800e0a4:	4411      	add	r1, r2
 800e0a6:	f8d9 2000 	ldr.w	r2, [r9]
 800e0aa:	0c24      	lsrs	r4, r4, #16
 800e0ac:	0c12      	lsrs	r2, r2, #16
 800e0ae:	fb0a 2404 	mla	r4, sl, r4, r2
 800e0b2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e0b6:	b289      	uxth	r1, r1
 800e0b8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e0bc:	45f4      	cmp	ip, lr
 800e0be:	f849 1b04 	str.w	r1, [r9], #4
 800e0c2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e0c6:	d8e4      	bhi.n	800e092 <__multiply+0xaa>
 800e0c8:	9901      	ldr	r1, [sp, #4]
 800e0ca:	5072      	str	r2, [r6, r1]
 800e0cc:	9a03      	ldr	r2, [sp, #12]
 800e0ce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e0d2:	3304      	adds	r3, #4
 800e0d4:	f1b9 0f00 	cmp.w	r9, #0
 800e0d8:	d01f      	beq.n	800e11a <__multiply+0x132>
 800e0da:	6834      	ldr	r4, [r6, #0]
 800e0dc:	f105 0114 	add.w	r1, r5, #20
 800e0e0:	46b6      	mov	lr, r6
 800e0e2:	f04f 0a00 	mov.w	sl, #0
 800e0e6:	880a      	ldrh	r2, [r1, #0]
 800e0e8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e0ec:	fb09 b202 	mla	r2, r9, r2, fp
 800e0f0:	4492      	add	sl, r2
 800e0f2:	b2a4      	uxth	r4, r4
 800e0f4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e0f8:	f84e 4b04 	str.w	r4, [lr], #4
 800e0fc:	f851 4b04 	ldr.w	r4, [r1], #4
 800e100:	f8be 2000 	ldrh.w	r2, [lr]
 800e104:	0c24      	lsrs	r4, r4, #16
 800e106:	fb09 2404 	mla	r4, r9, r4, r2
 800e10a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e10e:	458c      	cmp	ip, r1
 800e110:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e114:	d8e7      	bhi.n	800e0e6 <__multiply+0xfe>
 800e116:	9a01      	ldr	r2, [sp, #4]
 800e118:	50b4      	str	r4, [r6, r2]
 800e11a:	3604      	adds	r6, #4
 800e11c:	e7a3      	b.n	800e066 <__multiply+0x7e>
 800e11e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e122:	2b00      	cmp	r3, #0
 800e124:	d1a5      	bne.n	800e072 <__multiply+0x8a>
 800e126:	3f01      	subs	r7, #1
 800e128:	e7a1      	b.n	800e06e <__multiply+0x86>
 800e12a:	bf00      	nop
 800e12c:	0800f3ec 	.word	0x0800f3ec
 800e130:	0800f4e0 	.word	0x0800f4e0

0800e134 <__pow5mult>:
 800e134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e138:	4615      	mov	r5, r2
 800e13a:	f012 0203 	ands.w	r2, r2, #3
 800e13e:	4606      	mov	r6, r0
 800e140:	460f      	mov	r7, r1
 800e142:	d007      	beq.n	800e154 <__pow5mult+0x20>
 800e144:	4c25      	ldr	r4, [pc, #148]	; (800e1dc <__pow5mult+0xa8>)
 800e146:	3a01      	subs	r2, #1
 800e148:	2300      	movs	r3, #0
 800e14a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e14e:	f7ff fe51 	bl	800ddf4 <__multadd>
 800e152:	4607      	mov	r7, r0
 800e154:	10ad      	asrs	r5, r5, #2
 800e156:	d03d      	beq.n	800e1d4 <__pow5mult+0xa0>
 800e158:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e15a:	b97c      	cbnz	r4, 800e17c <__pow5mult+0x48>
 800e15c:	2010      	movs	r0, #16
 800e15e:	f7ff fdcd 	bl	800dcfc <malloc>
 800e162:	4602      	mov	r2, r0
 800e164:	6270      	str	r0, [r6, #36]	; 0x24
 800e166:	b928      	cbnz	r0, 800e174 <__pow5mult+0x40>
 800e168:	4b1d      	ldr	r3, [pc, #116]	; (800e1e0 <__pow5mult+0xac>)
 800e16a:	481e      	ldr	r0, [pc, #120]	; (800e1e4 <__pow5mult+0xb0>)
 800e16c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e170:	f000 fe96 	bl	800eea0 <__assert_func>
 800e174:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e178:	6004      	str	r4, [r0, #0]
 800e17a:	60c4      	str	r4, [r0, #12]
 800e17c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e180:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e184:	b94c      	cbnz	r4, 800e19a <__pow5mult+0x66>
 800e186:	f240 2171 	movw	r1, #625	; 0x271
 800e18a:	4630      	mov	r0, r6
 800e18c:	f7ff ff16 	bl	800dfbc <__i2b>
 800e190:	2300      	movs	r3, #0
 800e192:	f8c8 0008 	str.w	r0, [r8, #8]
 800e196:	4604      	mov	r4, r0
 800e198:	6003      	str	r3, [r0, #0]
 800e19a:	f04f 0900 	mov.w	r9, #0
 800e19e:	07eb      	lsls	r3, r5, #31
 800e1a0:	d50a      	bpl.n	800e1b8 <__pow5mult+0x84>
 800e1a2:	4639      	mov	r1, r7
 800e1a4:	4622      	mov	r2, r4
 800e1a6:	4630      	mov	r0, r6
 800e1a8:	f7ff ff1e 	bl	800dfe8 <__multiply>
 800e1ac:	4639      	mov	r1, r7
 800e1ae:	4680      	mov	r8, r0
 800e1b0:	4630      	mov	r0, r6
 800e1b2:	f7ff fdfd 	bl	800ddb0 <_Bfree>
 800e1b6:	4647      	mov	r7, r8
 800e1b8:	106d      	asrs	r5, r5, #1
 800e1ba:	d00b      	beq.n	800e1d4 <__pow5mult+0xa0>
 800e1bc:	6820      	ldr	r0, [r4, #0]
 800e1be:	b938      	cbnz	r0, 800e1d0 <__pow5mult+0x9c>
 800e1c0:	4622      	mov	r2, r4
 800e1c2:	4621      	mov	r1, r4
 800e1c4:	4630      	mov	r0, r6
 800e1c6:	f7ff ff0f 	bl	800dfe8 <__multiply>
 800e1ca:	6020      	str	r0, [r4, #0]
 800e1cc:	f8c0 9000 	str.w	r9, [r0]
 800e1d0:	4604      	mov	r4, r0
 800e1d2:	e7e4      	b.n	800e19e <__pow5mult+0x6a>
 800e1d4:	4638      	mov	r0, r7
 800e1d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1da:	bf00      	nop
 800e1dc:	0800f630 	.word	0x0800f630
 800e1e0:	0800f376 	.word	0x0800f376
 800e1e4:	0800f4e0 	.word	0x0800f4e0

0800e1e8 <__lshift>:
 800e1e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1ec:	460c      	mov	r4, r1
 800e1ee:	6849      	ldr	r1, [r1, #4]
 800e1f0:	6923      	ldr	r3, [r4, #16]
 800e1f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e1f6:	68a3      	ldr	r3, [r4, #8]
 800e1f8:	4607      	mov	r7, r0
 800e1fa:	4691      	mov	r9, r2
 800e1fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e200:	f108 0601 	add.w	r6, r8, #1
 800e204:	42b3      	cmp	r3, r6
 800e206:	db0b      	blt.n	800e220 <__lshift+0x38>
 800e208:	4638      	mov	r0, r7
 800e20a:	f7ff fd91 	bl	800dd30 <_Balloc>
 800e20e:	4605      	mov	r5, r0
 800e210:	b948      	cbnz	r0, 800e226 <__lshift+0x3e>
 800e212:	4602      	mov	r2, r0
 800e214:	4b28      	ldr	r3, [pc, #160]	; (800e2b8 <__lshift+0xd0>)
 800e216:	4829      	ldr	r0, [pc, #164]	; (800e2bc <__lshift+0xd4>)
 800e218:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e21c:	f000 fe40 	bl	800eea0 <__assert_func>
 800e220:	3101      	adds	r1, #1
 800e222:	005b      	lsls	r3, r3, #1
 800e224:	e7ee      	b.n	800e204 <__lshift+0x1c>
 800e226:	2300      	movs	r3, #0
 800e228:	f100 0114 	add.w	r1, r0, #20
 800e22c:	f100 0210 	add.w	r2, r0, #16
 800e230:	4618      	mov	r0, r3
 800e232:	4553      	cmp	r3, sl
 800e234:	db33      	blt.n	800e29e <__lshift+0xb6>
 800e236:	6920      	ldr	r0, [r4, #16]
 800e238:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e23c:	f104 0314 	add.w	r3, r4, #20
 800e240:	f019 091f 	ands.w	r9, r9, #31
 800e244:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e248:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e24c:	d02b      	beq.n	800e2a6 <__lshift+0xbe>
 800e24e:	f1c9 0e20 	rsb	lr, r9, #32
 800e252:	468a      	mov	sl, r1
 800e254:	2200      	movs	r2, #0
 800e256:	6818      	ldr	r0, [r3, #0]
 800e258:	fa00 f009 	lsl.w	r0, r0, r9
 800e25c:	4302      	orrs	r2, r0
 800e25e:	f84a 2b04 	str.w	r2, [sl], #4
 800e262:	f853 2b04 	ldr.w	r2, [r3], #4
 800e266:	459c      	cmp	ip, r3
 800e268:	fa22 f20e 	lsr.w	r2, r2, lr
 800e26c:	d8f3      	bhi.n	800e256 <__lshift+0x6e>
 800e26e:	ebac 0304 	sub.w	r3, ip, r4
 800e272:	3b15      	subs	r3, #21
 800e274:	f023 0303 	bic.w	r3, r3, #3
 800e278:	3304      	adds	r3, #4
 800e27a:	f104 0015 	add.w	r0, r4, #21
 800e27e:	4584      	cmp	ip, r0
 800e280:	bf38      	it	cc
 800e282:	2304      	movcc	r3, #4
 800e284:	50ca      	str	r2, [r1, r3]
 800e286:	b10a      	cbz	r2, 800e28c <__lshift+0xa4>
 800e288:	f108 0602 	add.w	r6, r8, #2
 800e28c:	3e01      	subs	r6, #1
 800e28e:	4638      	mov	r0, r7
 800e290:	612e      	str	r6, [r5, #16]
 800e292:	4621      	mov	r1, r4
 800e294:	f7ff fd8c 	bl	800ddb0 <_Bfree>
 800e298:	4628      	mov	r0, r5
 800e29a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e29e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e2a2:	3301      	adds	r3, #1
 800e2a4:	e7c5      	b.n	800e232 <__lshift+0x4a>
 800e2a6:	3904      	subs	r1, #4
 800e2a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800e2b0:	459c      	cmp	ip, r3
 800e2b2:	d8f9      	bhi.n	800e2a8 <__lshift+0xc0>
 800e2b4:	e7ea      	b.n	800e28c <__lshift+0xa4>
 800e2b6:	bf00      	nop
 800e2b8:	0800f3ec 	.word	0x0800f3ec
 800e2bc:	0800f4e0 	.word	0x0800f4e0

0800e2c0 <__mcmp>:
 800e2c0:	b530      	push	{r4, r5, lr}
 800e2c2:	6902      	ldr	r2, [r0, #16]
 800e2c4:	690c      	ldr	r4, [r1, #16]
 800e2c6:	1b12      	subs	r2, r2, r4
 800e2c8:	d10e      	bne.n	800e2e8 <__mcmp+0x28>
 800e2ca:	f100 0314 	add.w	r3, r0, #20
 800e2ce:	3114      	adds	r1, #20
 800e2d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e2d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e2d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e2dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e2e0:	42a5      	cmp	r5, r4
 800e2e2:	d003      	beq.n	800e2ec <__mcmp+0x2c>
 800e2e4:	d305      	bcc.n	800e2f2 <__mcmp+0x32>
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	4610      	mov	r0, r2
 800e2ea:	bd30      	pop	{r4, r5, pc}
 800e2ec:	4283      	cmp	r3, r0
 800e2ee:	d3f3      	bcc.n	800e2d8 <__mcmp+0x18>
 800e2f0:	e7fa      	b.n	800e2e8 <__mcmp+0x28>
 800e2f2:	f04f 32ff 	mov.w	r2, #4294967295
 800e2f6:	e7f7      	b.n	800e2e8 <__mcmp+0x28>

0800e2f8 <__mdiff>:
 800e2f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2fc:	460c      	mov	r4, r1
 800e2fe:	4606      	mov	r6, r0
 800e300:	4611      	mov	r1, r2
 800e302:	4620      	mov	r0, r4
 800e304:	4617      	mov	r7, r2
 800e306:	f7ff ffdb 	bl	800e2c0 <__mcmp>
 800e30a:	1e05      	subs	r5, r0, #0
 800e30c:	d110      	bne.n	800e330 <__mdiff+0x38>
 800e30e:	4629      	mov	r1, r5
 800e310:	4630      	mov	r0, r6
 800e312:	f7ff fd0d 	bl	800dd30 <_Balloc>
 800e316:	b930      	cbnz	r0, 800e326 <__mdiff+0x2e>
 800e318:	4b39      	ldr	r3, [pc, #228]	; (800e400 <__mdiff+0x108>)
 800e31a:	4602      	mov	r2, r0
 800e31c:	f240 2132 	movw	r1, #562	; 0x232
 800e320:	4838      	ldr	r0, [pc, #224]	; (800e404 <__mdiff+0x10c>)
 800e322:	f000 fdbd 	bl	800eea0 <__assert_func>
 800e326:	2301      	movs	r3, #1
 800e328:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e32c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e330:	bfa4      	itt	ge
 800e332:	463b      	movge	r3, r7
 800e334:	4627      	movge	r7, r4
 800e336:	4630      	mov	r0, r6
 800e338:	6879      	ldr	r1, [r7, #4]
 800e33a:	bfa6      	itte	ge
 800e33c:	461c      	movge	r4, r3
 800e33e:	2500      	movge	r5, #0
 800e340:	2501      	movlt	r5, #1
 800e342:	f7ff fcf5 	bl	800dd30 <_Balloc>
 800e346:	b920      	cbnz	r0, 800e352 <__mdiff+0x5a>
 800e348:	4b2d      	ldr	r3, [pc, #180]	; (800e400 <__mdiff+0x108>)
 800e34a:	4602      	mov	r2, r0
 800e34c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e350:	e7e6      	b.n	800e320 <__mdiff+0x28>
 800e352:	693e      	ldr	r6, [r7, #16]
 800e354:	60c5      	str	r5, [r0, #12]
 800e356:	6925      	ldr	r5, [r4, #16]
 800e358:	f107 0114 	add.w	r1, r7, #20
 800e35c:	f104 0914 	add.w	r9, r4, #20
 800e360:	f100 0e14 	add.w	lr, r0, #20
 800e364:	f107 0210 	add.w	r2, r7, #16
 800e368:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e36c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e370:	46f2      	mov	sl, lr
 800e372:	2700      	movs	r7, #0
 800e374:	f859 3b04 	ldr.w	r3, [r9], #4
 800e378:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e37c:	fa1f f883 	uxth.w	r8, r3
 800e380:	fa17 f78b 	uxtah	r7, r7, fp
 800e384:	0c1b      	lsrs	r3, r3, #16
 800e386:	eba7 0808 	sub.w	r8, r7, r8
 800e38a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e38e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e392:	fa1f f888 	uxth.w	r8, r8
 800e396:	141f      	asrs	r7, r3, #16
 800e398:	454d      	cmp	r5, r9
 800e39a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e39e:	f84a 3b04 	str.w	r3, [sl], #4
 800e3a2:	d8e7      	bhi.n	800e374 <__mdiff+0x7c>
 800e3a4:	1b2b      	subs	r3, r5, r4
 800e3a6:	3b15      	subs	r3, #21
 800e3a8:	f023 0303 	bic.w	r3, r3, #3
 800e3ac:	3304      	adds	r3, #4
 800e3ae:	3415      	adds	r4, #21
 800e3b0:	42a5      	cmp	r5, r4
 800e3b2:	bf38      	it	cc
 800e3b4:	2304      	movcc	r3, #4
 800e3b6:	4419      	add	r1, r3
 800e3b8:	4473      	add	r3, lr
 800e3ba:	469e      	mov	lr, r3
 800e3bc:	460d      	mov	r5, r1
 800e3be:	4565      	cmp	r5, ip
 800e3c0:	d30e      	bcc.n	800e3e0 <__mdiff+0xe8>
 800e3c2:	f10c 0203 	add.w	r2, ip, #3
 800e3c6:	1a52      	subs	r2, r2, r1
 800e3c8:	f022 0203 	bic.w	r2, r2, #3
 800e3cc:	3903      	subs	r1, #3
 800e3ce:	458c      	cmp	ip, r1
 800e3d0:	bf38      	it	cc
 800e3d2:	2200      	movcc	r2, #0
 800e3d4:	441a      	add	r2, r3
 800e3d6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e3da:	b17b      	cbz	r3, 800e3fc <__mdiff+0x104>
 800e3dc:	6106      	str	r6, [r0, #16]
 800e3de:	e7a5      	b.n	800e32c <__mdiff+0x34>
 800e3e0:	f855 8b04 	ldr.w	r8, [r5], #4
 800e3e4:	fa17 f488 	uxtah	r4, r7, r8
 800e3e8:	1422      	asrs	r2, r4, #16
 800e3ea:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800e3ee:	b2a4      	uxth	r4, r4
 800e3f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e3f4:	f84e 4b04 	str.w	r4, [lr], #4
 800e3f8:	1417      	asrs	r7, r2, #16
 800e3fa:	e7e0      	b.n	800e3be <__mdiff+0xc6>
 800e3fc:	3e01      	subs	r6, #1
 800e3fe:	e7ea      	b.n	800e3d6 <__mdiff+0xde>
 800e400:	0800f3ec 	.word	0x0800f3ec
 800e404:	0800f4e0 	.word	0x0800f4e0

0800e408 <__ulp>:
 800e408:	b082      	sub	sp, #8
 800e40a:	ed8d 0b00 	vstr	d0, [sp]
 800e40e:	9b01      	ldr	r3, [sp, #4]
 800e410:	4912      	ldr	r1, [pc, #72]	; (800e45c <__ulp+0x54>)
 800e412:	4019      	ands	r1, r3
 800e414:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e418:	2900      	cmp	r1, #0
 800e41a:	dd05      	ble.n	800e428 <__ulp+0x20>
 800e41c:	2200      	movs	r2, #0
 800e41e:	460b      	mov	r3, r1
 800e420:	ec43 2b10 	vmov	d0, r2, r3
 800e424:	b002      	add	sp, #8
 800e426:	4770      	bx	lr
 800e428:	4249      	negs	r1, r1
 800e42a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e42e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e432:	f04f 0200 	mov.w	r2, #0
 800e436:	f04f 0300 	mov.w	r3, #0
 800e43a:	da04      	bge.n	800e446 <__ulp+0x3e>
 800e43c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e440:	fa41 f300 	asr.w	r3, r1, r0
 800e444:	e7ec      	b.n	800e420 <__ulp+0x18>
 800e446:	f1a0 0114 	sub.w	r1, r0, #20
 800e44a:	291e      	cmp	r1, #30
 800e44c:	bfda      	itte	le
 800e44e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e452:	fa20 f101 	lsrle.w	r1, r0, r1
 800e456:	2101      	movgt	r1, #1
 800e458:	460a      	mov	r2, r1
 800e45a:	e7e1      	b.n	800e420 <__ulp+0x18>
 800e45c:	7ff00000 	.word	0x7ff00000

0800e460 <__b2d>:
 800e460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e462:	6905      	ldr	r5, [r0, #16]
 800e464:	f100 0714 	add.w	r7, r0, #20
 800e468:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e46c:	1f2e      	subs	r6, r5, #4
 800e46e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e472:	4620      	mov	r0, r4
 800e474:	f7ff fd52 	bl	800df1c <__hi0bits>
 800e478:	f1c0 0320 	rsb	r3, r0, #32
 800e47c:	280a      	cmp	r0, #10
 800e47e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e4fc <__b2d+0x9c>
 800e482:	600b      	str	r3, [r1, #0]
 800e484:	dc14      	bgt.n	800e4b0 <__b2d+0x50>
 800e486:	f1c0 0e0b 	rsb	lr, r0, #11
 800e48a:	fa24 f10e 	lsr.w	r1, r4, lr
 800e48e:	42b7      	cmp	r7, r6
 800e490:	ea41 030c 	orr.w	r3, r1, ip
 800e494:	bf34      	ite	cc
 800e496:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e49a:	2100      	movcs	r1, #0
 800e49c:	3015      	adds	r0, #21
 800e49e:	fa04 f000 	lsl.w	r0, r4, r0
 800e4a2:	fa21 f10e 	lsr.w	r1, r1, lr
 800e4a6:	ea40 0201 	orr.w	r2, r0, r1
 800e4aa:	ec43 2b10 	vmov	d0, r2, r3
 800e4ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4b0:	42b7      	cmp	r7, r6
 800e4b2:	bf3a      	itte	cc
 800e4b4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e4b8:	f1a5 0608 	subcc.w	r6, r5, #8
 800e4bc:	2100      	movcs	r1, #0
 800e4be:	380b      	subs	r0, #11
 800e4c0:	d017      	beq.n	800e4f2 <__b2d+0x92>
 800e4c2:	f1c0 0c20 	rsb	ip, r0, #32
 800e4c6:	fa04 f500 	lsl.w	r5, r4, r0
 800e4ca:	42be      	cmp	r6, r7
 800e4cc:	fa21 f40c 	lsr.w	r4, r1, ip
 800e4d0:	ea45 0504 	orr.w	r5, r5, r4
 800e4d4:	bf8c      	ite	hi
 800e4d6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e4da:	2400      	movls	r4, #0
 800e4dc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e4e0:	fa01 f000 	lsl.w	r0, r1, r0
 800e4e4:	fa24 f40c 	lsr.w	r4, r4, ip
 800e4e8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e4ec:	ea40 0204 	orr.w	r2, r0, r4
 800e4f0:	e7db      	b.n	800e4aa <__b2d+0x4a>
 800e4f2:	ea44 030c 	orr.w	r3, r4, ip
 800e4f6:	460a      	mov	r2, r1
 800e4f8:	e7d7      	b.n	800e4aa <__b2d+0x4a>
 800e4fa:	bf00      	nop
 800e4fc:	3ff00000 	.word	0x3ff00000

0800e500 <__d2b>:
 800e500:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e504:	4689      	mov	r9, r1
 800e506:	2101      	movs	r1, #1
 800e508:	ec57 6b10 	vmov	r6, r7, d0
 800e50c:	4690      	mov	r8, r2
 800e50e:	f7ff fc0f 	bl	800dd30 <_Balloc>
 800e512:	4604      	mov	r4, r0
 800e514:	b930      	cbnz	r0, 800e524 <__d2b+0x24>
 800e516:	4602      	mov	r2, r0
 800e518:	4b25      	ldr	r3, [pc, #148]	; (800e5b0 <__d2b+0xb0>)
 800e51a:	4826      	ldr	r0, [pc, #152]	; (800e5b4 <__d2b+0xb4>)
 800e51c:	f240 310a 	movw	r1, #778	; 0x30a
 800e520:	f000 fcbe 	bl	800eea0 <__assert_func>
 800e524:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e528:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e52c:	bb35      	cbnz	r5, 800e57c <__d2b+0x7c>
 800e52e:	2e00      	cmp	r6, #0
 800e530:	9301      	str	r3, [sp, #4]
 800e532:	d028      	beq.n	800e586 <__d2b+0x86>
 800e534:	4668      	mov	r0, sp
 800e536:	9600      	str	r6, [sp, #0]
 800e538:	f7ff fd10 	bl	800df5c <__lo0bits>
 800e53c:	9900      	ldr	r1, [sp, #0]
 800e53e:	b300      	cbz	r0, 800e582 <__d2b+0x82>
 800e540:	9a01      	ldr	r2, [sp, #4]
 800e542:	f1c0 0320 	rsb	r3, r0, #32
 800e546:	fa02 f303 	lsl.w	r3, r2, r3
 800e54a:	430b      	orrs	r3, r1
 800e54c:	40c2      	lsrs	r2, r0
 800e54e:	6163      	str	r3, [r4, #20]
 800e550:	9201      	str	r2, [sp, #4]
 800e552:	9b01      	ldr	r3, [sp, #4]
 800e554:	61a3      	str	r3, [r4, #24]
 800e556:	2b00      	cmp	r3, #0
 800e558:	bf14      	ite	ne
 800e55a:	2202      	movne	r2, #2
 800e55c:	2201      	moveq	r2, #1
 800e55e:	6122      	str	r2, [r4, #16]
 800e560:	b1d5      	cbz	r5, 800e598 <__d2b+0x98>
 800e562:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e566:	4405      	add	r5, r0
 800e568:	f8c9 5000 	str.w	r5, [r9]
 800e56c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e570:	f8c8 0000 	str.w	r0, [r8]
 800e574:	4620      	mov	r0, r4
 800e576:	b003      	add	sp, #12
 800e578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e57c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e580:	e7d5      	b.n	800e52e <__d2b+0x2e>
 800e582:	6161      	str	r1, [r4, #20]
 800e584:	e7e5      	b.n	800e552 <__d2b+0x52>
 800e586:	a801      	add	r0, sp, #4
 800e588:	f7ff fce8 	bl	800df5c <__lo0bits>
 800e58c:	9b01      	ldr	r3, [sp, #4]
 800e58e:	6163      	str	r3, [r4, #20]
 800e590:	2201      	movs	r2, #1
 800e592:	6122      	str	r2, [r4, #16]
 800e594:	3020      	adds	r0, #32
 800e596:	e7e3      	b.n	800e560 <__d2b+0x60>
 800e598:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e59c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e5a0:	f8c9 0000 	str.w	r0, [r9]
 800e5a4:	6918      	ldr	r0, [r3, #16]
 800e5a6:	f7ff fcb9 	bl	800df1c <__hi0bits>
 800e5aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e5ae:	e7df      	b.n	800e570 <__d2b+0x70>
 800e5b0:	0800f3ec 	.word	0x0800f3ec
 800e5b4:	0800f4e0 	.word	0x0800f4e0

0800e5b8 <__ratio>:
 800e5b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5bc:	4688      	mov	r8, r1
 800e5be:	4669      	mov	r1, sp
 800e5c0:	4681      	mov	r9, r0
 800e5c2:	f7ff ff4d 	bl	800e460 <__b2d>
 800e5c6:	a901      	add	r1, sp, #4
 800e5c8:	4640      	mov	r0, r8
 800e5ca:	ec55 4b10 	vmov	r4, r5, d0
 800e5ce:	f7ff ff47 	bl	800e460 <__b2d>
 800e5d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e5d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e5da:	eba3 0c02 	sub.w	ip, r3, r2
 800e5de:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e5e2:	1a9b      	subs	r3, r3, r2
 800e5e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e5e8:	ec51 0b10 	vmov	r0, r1, d0
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	bfd6      	itet	le
 800e5f0:	460a      	movle	r2, r1
 800e5f2:	462a      	movgt	r2, r5
 800e5f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e5f8:	468b      	mov	fp, r1
 800e5fa:	462f      	mov	r7, r5
 800e5fc:	bfd4      	ite	le
 800e5fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e602:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e606:	4620      	mov	r0, r4
 800e608:	ee10 2a10 	vmov	r2, s0
 800e60c:	465b      	mov	r3, fp
 800e60e:	4639      	mov	r1, r7
 800e610:	f7f2 f91c 	bl	800084c <__aeabi_ddiv>
 800e614:	ec41 0b10 	vmov	d0, r0, r1
 800e618:	b003      	add	sp, #12
 800e61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e61e <__copybits>:
 800e61e:	3901      	subs	r1, #1
 800e620:	b570      	push	{r4, r5, r6, lr}
 800e622:	1149      	asrs	r1, r1, #5
 800e624:	6914      	ldr	r4, [r2, #16]
 800e626:	3101      	adds	r1, #1
 800e628:	f102 0314 	add.w	r3, r2, #20
 800e62c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e630:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e634:	1f05      	subs	r5, r0, #4
 800e636:	42a3      	cmp	r3, r4
 800e638:	d30c      	bcc.n	800e654 <__copybits+0x36>
 800e63a:	1aa3      	subs	r3, r4, r2
 800e63c:	3b11      	subs	r3, #17
 800e63e:	f023 0303 	bic.w	r3, r3, #3
 800e642:	3211      	adds	r2, #17
 800e644:	42a2      	cmp	r2, r4
 800e646:	bf88      	it	hi
 800e648:	2300      	movhi	r3, #0
 800e64a:	4418      	add	r0, r3
 800e64c:	2300      	movs	r3, #0
 800e64e:	4288      	cmp	r0, r1
 800e650:	d305      	bcc.n	800e65e <__copybits+0x40>
 800e652:	bd70      	pop	{r4, r5, r6, pc}
 800e654:	f853 6b04 	ldr.w	r6, [r3], #4
 800e658:	f845 6f04 	str.w	r6, [r5, #4]!
 800e65c:	e7eb      	b.n	800e636 <__copybits+0x18>
 800e65e:	f840 3b04 	str.w	r3, [r0], #4
 800e662:	e7f4      	b.n	800e64e <__copybits+0x30>

0800e664 <__any_on>:
 800e664:	f100 0214 	add.w	r2, r0, #20
 800e668:	6900      	ldr	r0, [r0, #16]
 800e66a:	114b      	asrs	r3, r1, #5
 800e66c:	4298      	cmp	r0, r3
 800e66e:	b510      	push	{r4, lr}
 800e670:	db11      	blt.n	800e696 <__any_on+0x32>
 800e672:	dd0a      	ble.n	800e68a <__any_on+0x26>
 800e674:	f011 011f 	ands.w	r1, r1, #31
 800e678:	d007      	beq.n	800e68a <__any_on+0x26>
 800e67a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e67e:	fa24 f001 	lsr.w	r0, r4, r1
 800e682:	fa00 f101 	lsl.w	r1, r0, r1
 800e686:	428c      	cmp	r4, r1
 800e688:	d10b      	bne.n	800e6a2 <__any_on+0x3e>
 800e68a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e68e:	4293      	cmp	r3, r2
 800e690:	d803      	bhi.n	800e69a <__any_on+0x36>
 800e692:	2000      	movs	r0, #0
 800e694:	bd10      	pop	{r4, pc}
 800e696:	4603      	mov	r3, r0
 800e698:	e7f7      	b.n	800e68a <__any_on+0x26>
 800e69a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e69e:	2900      	cmp	r1, #0
 800e6a0:	d0f5      	beq.n	800e68e <__any_on+0x2a>
 800e6a2:	2001      	movs	r0, #1
 800e6a4:	e7f6      	b.n	800e694 <__any_on+0x30>

0800e6a6 <_calloc_r>:
 800e6a6:	b513      	push	{r0, r1, r4, lr}
 800e6a8:	434a      	muls	r2, r1
 800e6aa:	4611      	mov	r1, r2
 800e6ac:	9201      	str	r2, [sp, #4]
 800e6ae:	f000 f859 	bl	800e764 <_malloc_r>
 800e6b2:	4604      	mov	r4, r0
 800e6b4:	b118      	cbz	r0, 800e6be <_calloc_r+0x18>
 800e6b6:	9a01      	ldr	r2, [sp, #4]
 800e6b8:	2100      	movs	r1, #0
 800e6ba:	f7fc f869 	bl	800a790 <memset>
 800e6be:	4620      	mov	r0, r4
 800e6c0:	b002      	add	sp, #8
 800e6c2:	bd10      	pop	{r4, pc}

0800e6c4 <_free_r>:
 800e6c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e6c6:	2900      	cmp	r1, #0
 800e6c8:	d048      	beq.n	800e75c <_free_r+0x98>
 800e6ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6ce:	9001      	str	r0, [sp, #4]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	f1a1 0404 	sub.w	r4, r1, #4
 800e6d6:	bfb8      	it	lt
 800e6d8:	18e4      	addlt	r4, r4, r3
 800e6da:	f000 fc6f 	bl	800efbc <__malloc_lock>
 800e6de:	4a20      	ldr	r2, [pc, #128]	; (800e760 <_free_r+0x9c>)
 800e6e0:	9801      	ldr	r0, [sp, #4]
 800e6e2:	6813      	ldr	r3, [r2, #0]
 800e6e4:	4615      	mov	r5, r2
 800e6e6:	b933      	cbnz	r3, 800e6f6 <_free_r+0x32>
 800e6e8:	6063      	str	r3, [r4, #4]
 800e6ea:	6014      	str	r4, [r2, #0]
 800e6ec:	b003      	add	sp, #12
 800e6ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e6f2:	f000 bc69 	b.w	800efc8 <__malloc_unlock>
 800e6f6:	42a3      	cmp	r3, r4
 800e6f8:	d90b      	bls.n	800e712 <_free_r+0x4e>
 800e6fa:	6821      	ldr	r1, [r4, #0]
 800e6fc:	1862      	adds	r2, r4, r1
 800e6fe:	4293      	cmp	r3, r2
 800e700:	bf04      	itt	eq
 800e702:	681a      	ldreq	r2, [r3, #0]
 800e704:	685b      	ldreq	r3, [r3, #4]
 800e706:	6063      	str	r3, [r4, #4]
 800e708:	bf04      	itt	eq
 800e70a:	1852      	addeq	r2, r2, r1
 800e70c:	6022      	streq	r2, [r4, #0]
 800e70e:	602c      	str	r4, [r5, #0]
 800e710:	e7ec      	b.n	800e6ec <_free_r+0x28>
 800e712:	461a      	mov	r2, r3
 800e714:	685b      	ldr	r3, [r3, #4]
 800e716:	b10b      	cbz	r3, 800e71c <_free_r+0x58>
 800e718:	42a3      	cmp	r3, r4
 800e71a:	d9fa      	bls.n	800e712 <_free_r+0x4e>
 800e71c:	6811      	ldr	r1, [r2, #0]
 800e71e:	1855      	adds	r5, r2, r1
 800e720:	42a5      	cmp	r5, r4
 800e722:	d10b      	bne.n	800e73c <_free_r+0x78>
 800e724:	6824      	ldr	r4, [r4, #0]
 800e726:	4421      	add	r1, r4
 800e728:	1854      	adds	r4, r2, r1
 800e72a:	42a3      	cmp	r3, r4
 800e72c:	6011      	str	r1, [r2, #0]
 800e72e:	d1dd      	bne.n	800e6ec <_free_r+0x28>
 800e730:	681c      	ldr	r4, [r3, #0]
 800e732:	685b      	ldr	r3, [r3, #4]
 800e734:	6053      	str	r3, [r2, #4]
 800e736:	4421      	add	r1, r4
 800e738:	6011      	str	r1, [r2, #0]
 800e73a:	e7d7      	b.n	800e6ec <_free_r+0x28>
 800e73c:	d902      	bls.n	800e744 <_free_r+0x80>
 800e73e:	230c      	movs	r3, #12
 800e740:	6003      	str	r3, [r0, #0]
 800e742:	e7d3      	b.n	800e6ec <_free_r+0x28>
 800e744:	6825      	ldr	r5, [r4, #0]
 800e746:	1961      	adds	r1, r4, r5
 800e748:	428b      	cmp	r3, r1
 800e74a:	bf04      	itt	eq
 800e74c:	6819      	ldreq	r1, [r3, #0]
 800e74e:	685b      	ldreq	r3, [r3, #4]
 800e750:	6063      	str	r3, [r4, #4]
 800e752:	bf04      	itt	eq
 800e754:	1949      	addeq	r1, r1, r5
 800e756:	6021      	streq	r1, [r4, #0]
 800e758:	6054      	str	r4, [r2, #4]
 800e75a:	e7c7      	b.n	800e6ec <_free_r+0x28>
 800e75c:	b003      	add	sp, #12
 800e75e:	bd30      	pop	{r4, r5, pc}
 800e760:	20000248 	.word	0x20000248

0800e764 <_malloc_r>:
 800e764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e766:	1ccd      	adds	r5, r1, #3
 800e768:	f025 0503 	bic.w	r5, r5, #3
 800e76c:	3508      	adds	r5, #8
 800e76e:	2d0c      	cmp	r5, #12
 800e770:	bf38      	it	cc
 800e772:	250c      	movcc	r5, #12
 800e774:	2d00      	cmp	r5, #0
 800e776:	4606      	mov	r6, r0
 800e778:	db01      	blt.n	800e77e <_malloc_r+0x1a>
 800e77a:	42a9      	cmp	r1, r5
 800e77c:	d903      	bls.n	800e786 <_malloc_r+0x22>
 800e77e:	230c      	movs	r3, #12
 800e780:	6033      	str	r3, [r6, #0]
 800e782:	2000      	movs	r0, #0
 800e784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e786:	f000 fc19 	bl	800efbc <__malloc_lock>
 800e78a:	4921      	ldr	r1, [pc, #132]	; (800e810 <_malloc_r+0xac>)
 800e78c:	680a      	ldr	r2, [r1, #0]
 800e78e:	4614      	mov	r4, r2
 800e790:	b99c      	cbnz	r4, 800e7ba <_malloc_r+0x56>
 800e792:	4f20      	ldr	r7, [pc, #128]	; (800e814 <_malloc_r+0xb0>)
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	b923      	cbnz	r3, 800e7a2 <_malloc_r+0x3e>
 800e798:	4621      	mov	r1, r4
 800e79a:	4630      	mov	r0, r6
 800e79c:	f000 fafc 	bl	800ed98 <_sbrk_r>
 800e7a0:	6038      	str	r0, [r7, #0]
 800e7a2:	4629      	mov	r1, r5
 800e7a4:	4630      	mov	r0, r6
 800e7a6:	f000 faf7 	bl	800ed98 <_sbrk_r>
 800e7aa:	1c43      	adds	r3, r0, #1
 800e7ac:	d123      	bne.n	800e7f6 <_malloc_r+0x92>
 800e7ae:	230c      	movs	r3, #12
 800e7b0:	6033      	str	r3, [r6, #0]
 800e7b2:	4630      	mov	r0, r6
 800e7b4:	f000 fc08 	bl	800efc8 <__malloc_unlock>
 800e7b8:	e7e3      	b.n	800e782 <_malloc_r+0x1e>
 800e7ba:	6823      	ldr	r3, [r4, #0]
 800e7bc:	1b5b      	subs	r3, r3, r5
 800e7be:	d417      	bmi.n	800e7f0 <_malloc_r+0x8c>
 800e7c0:	2b0b      	cmp	r3, #11
 800e7c2:	d903      	bls.n	800e7cc <_malloc_r+0x68>
 800e7c4:	6023      	str	r3, [r4, #0]
 800e7c6:	441c      	add	r4, r3
 800e7c8:	6025      	str	r5, [r4, #0]
 800e7ca:	e004      	b.n	800e7d6 <_malloc_r+0x72>
 800e7cc:	6863      	ldr	r3, [r4, #4]
 800e7ce:	42a2      	cmp	r2, r4
 800e7d0:	bf0c      	ite	eq
 800e7d2:	600b      	streq	r3, [r1, #0]
 800e7d4:	6053      	strne	r3, [r2, #4]
 800e7d6:	4630      	mov	r0, r6
 800e7d8:	f000 fbf6 	bl	800efc8 <__malloc_unlock>
 800e7dc:	f104 000b 	add.w	r0, r4, #11
 800e7e0:	1d23      	adds	r3, r4, #4
 800e7e2:	f020 0007 	bic.w	r0, r0, #7
 800e7e6:	1ac2      	subs	r2, r0, r3
 800e7e8:	d0cc      	beq.n	800e784 <_malloc_r+0x20>
 800e7ea:	1a1b      	subs	r3, r3, r0
 800e7ec:	50a3      	str	r3, [r4, r2]
 800e7ee:	e7c9      	b.n	800e784 <_malloc_r+0x20>
 800e7f0:	4622      	mov	r2, r4
 800e7f2:	6864      	ldr	r4, [r4, #4]
 800e7f4:	e7cc      	b.n	800e790 <_malloc_r+0x2c>
 800e7f6:	1cc4      	adds	r4, r0, #3
 800e7f8:	f024 0403 	bic.w	r4, r4, #3
 800e7fc:	42a0      	cmp	r0, r4
 800e7fe:	d0e3      	beq.n	800e7c8 <_malloc_r+0x64>
 800e800:	1a21      	subs	r1, r4, r0
 800e802:	4630      	mov	r0, r6
 800e804:	f000 fac8 	bl	800ed98 <_sbrk_r>
 800e808:	3001      	adds	r0, #1
 800e80a:	d1dd      	bne.n	800e7c8 <_malloc_r+0x64>
 800e80c:	e7cf      	b.n	800e7ae <_malloc_r+0x4a>
 800e80e:	bf00      	nop
 800e810:	20000248 	.word	0x20000248
 800e814:	2000024c 	.word	0x2000024c

0800e818 <__ssputs_r>:
 800e818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e81c:	688e      	ldr	r6, [r1, #8]
 800e81e:	429e      	cmp	r6, r3
 800e820:	4682      	mov	sl, r0
 800e822:	460c      	mov	r4, r1
 800e824:	4690      	mov	r8, r2
 800e826:	461f      	mov	r7, r3
 800e828:	d838      	bhi.n	800e89c <__ssputs_r+0x84>
 800e82a:	898a      	ldrh	r2, [r1, #12]
 800e82c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e830:	d032      	beq.n	800e898 <__ssputs_r+0x80>
 800e832:	6825      	ldr	r5, [r4, #0]
 800e834:	6909      	ldr	r1, [r1, #16]
 800e836:	eba5 0901 	sub.w	r9, r5, r1
 800e83a:	6965      	ldr	r5, [r4, #20]
 800e83c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e840:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e844:	3301      	adds	r3, #1
 800e846:	444b      	add	r3, r9
 800e848:	106d      	asrs	r5, r5, #1
 800e84a:	429d      	cmp	r5, r3
 800e84c:	bf38      	it	cc
 800e84e:	461d      	movcc	r5, r3
 800e850:	0553      	lsls	r3, r2, #21
 800e852:	d531      	bpl.n	800e8b8 <__ssputs_r+0xa0>
 800e854:	4629      	mov	r1, r5
 800e856:	f7ff ff85 	bl	800e764 <_malloc_r>
 800e85a:	4606      	mov	r6, r0
 800e85c:	b950      	cbnz	r0, 800e874 <__ssputs_r+0x5c>
 800e85e:	230c      	movs	r3, #12
 800e860:	f8ca 3000 	str.w	r3, [sl]
 800e864:	89a3      	ldrh	r3, [r4, #12]
 800e866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e86a:	81a3      	strh	r3, [r4, #12]
 800e86c:	f04f 30ff 	mov.w	r0, #4294967295
 800e870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e874:	6921      	ldr	r1, [r4, #16]
 800e876:	464a      	mov	r2, r9
 800e878:	f7fb ff7c 	bl	800a774 <memcpy>
 800e87c:	89a3      	ldrh	r3, [r4, #12]
 800e87e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e886:	81a3      	strh	r3, [r4, #12]
 800e888:	6126      	str	r6, [r4, #16]
 800e88a:	6165      	str	r5, [r4, #20]
 800e88c:	444e      	add	r6, r9
 800e88e:	eba5 0509 	sub.w	r5, r5, r9
 800e892:	6026      	str	r6, [r4, #0]
 800e894:	60a5      	str	r5, [r4, #8]
 800e896:	463e      	mov	r6, r7
 800e898:	42be      	cmp	r6, r7
 800e89a:	d900      	bls.n	800e89e <__ssputs_r+0x86>
 800e89c:	463e      	mov	r6, r7
 800e89e:	4632      	mov	r2, r6
 800e8a0:	6820      	ldr	r0, [r4, #0]
 800e8a2:	4641      	mov	r1, r8
 800e8a4:	f000 fb70 	bl	800ef88 <memmove>
 800e8a8:	68a3      	ldr	r3, [r4, #8]
 800e8aa:	6822      	ldr	r2, [r4, #0]
 800e8ac:	1b9b      	subs	r3, r3, r6
 800e8ae:	4432      	add	r2, r6
 800e8b0:	60a3      	str	r3, [r4, #8]
 800e8b2:	6022      	str	r2, [r4, #0]
 800e8b4:	2000      	movs	r0, #0
 800e8b6:	e7db      	b.n	800e870 <__ssputs_r+0x58>
 800e8b8:	462a      	mov	r2, r5
 800e8ba:	f000 fb8b 	bl	800efd4 <_realloc_r>
 800e8be:	4606      	mov	r6, r0
 800e8c0:	2800      	cmp	r0, #0
 800e8c2:	d1e1      	bne.n	800e888 <__ssputs_r+0x70>
 800e8c4:	6921      	ldr	r1, [r4, #16]
 800e8c6:	4650      	mov	r0, sl
 800e8c8:	f7ff fefc 	bl	800e6c4 <_free_r>
 800e8cc:	e7c7      	b.n	800e85e <__ssputs_r+0x46>
	...

0800e8d0 <_svfiprintf_r>:
 800e8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8d4:	4698      	mov	r8, r3
 800e8d6:	898b      	ldrh	r3, [r1, #12]
 800e8d8:	061b      	lsls	r3, r3, #24
 800e8da:	b09d      	sub	sp, #116	; 0x74
 800e8dc:	4607      	mov	r7, r0
 800e8de:	460d      	mov	r5, r1
 800e8e0:	4614      	mov	r4, r2
 800e8e2:	d50e      	bpl.n	800e902 <_svfiprintf_r+0x32>
 800e8e4:	690b      	ldr	r3, [r1, #16]
 800e8e6:	b963      	cbnz	r3, 800e902 <_svfiprintf_r+0x32>
 800e8e8:	2140      	movs	r1, #64	; 0x40
 800e8ea:	f7ff ff3b 	bl	800e764 <_malloc_r>
 800e8ee:	6028      	str	r0, [r5, #0]
 800e8f0:	6128      	str	r0, [r5, #16]
 800e8f2:	b920      	cbnz	r0, 800e8fe <_svfiprintf_r+0x2e>
 800e8f4:	230c      	movs	r3, #12
 800e8f6:	603b      	str	r3, [r7, #0]
 800e8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e8fc:	e0d1      	b.n	800eaa2 <_svfiprintf_r+0x1d2>
 800e8fe:	2340      	movs	r3, #64	; 0x40
 800e900:	616b      	str	r3, [r5, #20]
 800e902:	2300      	movs	r3, #0
 800e904:	9309      	str	r3, [sp, #36]	; 0x24
 800e906:	2320      	movs	r3, #32
 800e908:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e90c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e910:	2330      	movs	r3, #48	; 0x30
 800e912:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800eabc <_svfiprintf_r+0x1ec>
 800e916:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e91a:	f04f 0901 	mov.w	r9, #1
 800e91e:	4623      	mov	r3, r4
 800e920:	469a      	mov	sl, r3
 800e922:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e926:	b10a      	cbz	r2, 800e92c <_svfiprintf_r+0x5c>
 800e928:	2a25      	cmp	r2, #37	; 0x25
 800e92a:	d1f9      	bne.n	800e920 <_svfiprintf_r+0x50>
 800e92c:	ebba 0b04 	subs.w	fp, sl, r4
 800e930:	d00b      	beq.n	800e94a <_svfiprintf_r+0x7a>
 800e932:	465b      	mov	r3, fp
 800e934:	4622      	mov	r2, r4
 800e936:	4629      	mov	r1, r5
 800e938:	4638      	mov	r0, r7
 800e93a:	f7ff ff6d 	bl	800e818 <__ssputs_r>
 800e93e:	3001      	adds	r0, #1
 800e940:	f000 80aa 	beq.w	800ea98 <_svfiprintf_r+0x1c8>
 800e944:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e946:	445a      	add	r2, fp
 800e948:	9209      	str	r2, [sp, #36]	; 0x24
 800e94a:	f89a 3000 	ldrb.w	r3, [sl]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	f000 80a2 	beq.w	800ea98 <_svfiprintf_r+0x1c8>
 800e954:	2300      	movs	r3, #0
 800e956:	f04f 32ff 	mov.w	r2, #4294967295
 800e95a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e95e:	f10a 0a01 	add.w	sl, sl, #1
 800e962:	9304      	str	r3, [sp, #16]
 800e964:	9307      	str	r3, [sp, #28]
 800e966:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e96a:	931a      	str	r3, [sp, #104]	; 0x68
 800e96c:	4654      	mov	r4, sl
 800e96e:	2205      	movs	r2, #5
 800e970:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e974:	4851      	ldr	r0, [pc, #324]	; (800eabc <_svfiprintf_r+0x1ec>)
 800e976:	f7f1 fc33 	bl	80001e0 <memchr>
 800e97a:	9a04      	ldr	r2, [sp, #16]
 800e97c:	b9d8      	cbnz	r0, 800e9b6 <_svfiprintf_r+0xe6>
 800e97e:	06d0      	lsls	r0, r2, #27
 800e980:	bf44      	itt	mi
 800e982:	2320      	movmi	r3, #32
 800e984:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e988:	0711      	lsls	r1, r2, #28
 800e98a:	bf44      	itt	mi
 800e98c:	232b      	movmi	r3, #43	; 0x2b
 800e98e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e992:	f89a 3000 	ldrb.w	r3, [sl]
 800e996:	2b2a      	cmp	r3, #42	; 0x2a
 800e998:	d015      	beq.n	800e9c6 <_svfiprintf_r+0xf6>
 800e99a:	9a07      	ldr	r2, [sp, #28]
 800e99c:	4654      	mov	r4, sl
 800e99e:	2000      	movs	r0, #0
 800e9a0:	f04f 0c0a 	mov.w	ip, #10
 800e9a4:	4621      	mov	r1, r4
 800e9a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9aa:	3b30      	subs	r3, #48	; 0x30
 800e9ac:	2b09      	cmp	r3, #9
 800e9ae:	d94e      	bls.n	800ea4e <_svfiprintf_r+0x17e>
 800e9b0:	b1b0      	cbz	r0, 800e9e0 <_svfiprintf_r+0x110>
 800e9b2:	9207      	str	r2, [sp, #28]
 800e9b4:	e014      	b.n	800e9e0 <_svfiprintf_r+0x110>
 800e9b6:	eba0 0308 	sub.w	r3, r0, r8
 800e9ba:	fa09 f303 	lsl.w	r3, r9, r3
 800e9be:	4313      	orrs	r3, r2
 800e9c0:	9304      	str	r3, [sp, #16]
 800e9c2:	46a2      	mov	sl, r4
 800e9c4:	e7d2      	b.n	800e96c <_svfiprintf_r+0x9c>
 800e9c6:	9b03      	ldr	r3, [sp, #12]
 800e9c8:	1d19      	adds	r1, r3, #4
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	9103      	str	r1, [sp, #12]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	bfbb      	ittet	lt
 800e9d2:	425b      	neglt	r3, r3
 800e9d4:	f042 0202 	orrlt.w	r2, r2, #2
 800e9d8:	9307      	strge	r3, [sp, #28]
 800e9da:	9307      	strlt	r3, [sp, #28]
 800e9dc:	bfb8      	it	lt
 800e9de:	9204      	strlt	r2, [sp, #16]
 800e9e0:	7823      	ldrb	r3, [r4, #0]
 800e9e2:	2b2e      	cmp	r3, #46	; 0x2e
 800e9e4:	d10c      	bne.n	800ea00 <_svfiprintf_r+0x130>
 800e9e6:	7863      	ldrb	r3, [r4, #1]
 800e9e8:	2b2a      	cmp	r3, #42	; 0x2a
 800e9ea:	d135      	bne.n	800ea58 <_svfiprintf_r+0x188>
 800e9ec:	9b03      	ldr	r3, [sp, #12]
 800e9ee:	1d1a      	adds	r2, r3, #4
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	9203      	str	r2, [sp, #12]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	bfb8      	it	lt
 800e9f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800e9fc:	3402      	adds	r4, #2
 800e9fe:	9305      	str	r3, [sp, #20]
 800ea00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800eacc <_svfiprintf_r+0x1fc>
 800ea04:	7821      	ldrb	r1, [r4, #0]
 800ea06:	2203      	movs	r2, #3
 800ea08:	4650      	mov	r0, sl
 800ea0a:	f7f1 fbe9 	bl	80001e0 <memchr>
 800ea0e:	b140      	cbz	r0, 800ea22 <_svfiprintf_r+0x152>
 800ea10:	2340      	movs	r3, #64	; 0x40
 800ea12:	eba0 000a 	sub.w	r0, r0, sl
 800ea16:	fa03 f000 	lsl.w	r0, r3, r0
 800ea1a:	9b04      	ldr	r3, [sp, #16]
 800ea1c:	4303      	orrs	r3, r0
 800ea1e:	3401      	adds	r4, #1
 800ea20:	9304      	str	r3, [sp, #16]
 800ea22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea26:	4826      	ldr	r0, [pc, #152]	; (800eac0 <_svfiprintf_r+0x1f0>)
 800ea28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea2c:	2206      	movs	r2, #6
 800ea2e:	f7f1 fbd7 	bl	80001e0 <memchr>
 800ea32:	2800      	cmp	r0, #0
 800ea34:	d038      	beq.n	800eaa8 <_svfiprintf_r+0x1d8>
 800ea36:	4b23      	ldr	r3, [pc, #140]	; (800eac4 <_svfiprintf_r+0x1f4>)
 800ea38:	bb1b      	cbnz	r3, 800ea82 <_svfiprintf_r+0x1b2>
 800ea3a:	9b03      	ldr	r3, [sp, #12]
 800ea3c:	3307      	adds	r3, #7
 800ea3e:	f023 0307 	bic.w	r3, r3, #7
 800ea42:	3308      	adds	r3, #8
 800ea44:	9303      	str	r3, [sp, #12]
 800ea46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea48:	4433      	add	r3, r6
 800ea4a:	9309      	str	r3, [sp, #36]	; 0x24
 800ea4c:	e767      	b.n	800e91e <_svfiprintf_r+0x4e>
 800ea4e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea52:	460c      	mov	r4, r1
 800ea54:	2001      	movs	r0, #1
 800ea56:	e7a5      	b.n	800e9a4 <_svfiprintf_r+0xd4>
 800ea58:	2300      	movs	r3, #0
 800ea5a:	3401      	adds	r4, #1
 800ea5c:	9305      	str	r3, [sp, #20]
 800ea5e:	4619      	mov	r1, r3
 800ea60:	f04f 0c0a 	mov.w	ip, #10
 800ea64:	4620      	mov	r0, r4
 800ea66:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea6a:	3a30      	subs	r2, #48	; 0x30
 800ea6c:	2a09      	cmp	r2, #9
 800ea6e:	d903      	bls.n	800ea78 <_svfiprintf_r+0x1a8>
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d0c5      	beq.n	800ea00 <_svfiprintf_r+0x130>
 800ea74:	9105      	str	r1, [sp, #20]
 800ea76:	e7c3      	b.n	800ea00 <_svfiprintf_r+0x130>
 800ea78:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea7c:	4604      	mov	r4, r0
 800ea7e:	2301      	movs	r3, #1
 800ea80:	e7f0      	b.n	800ea64 <_svfiprintf_r+0x194>
 800ea82:	ab03      	add	r3, sp, #12
 800ea84:	9300      	str	r3, [sp, #0]
 800ea86:	462a      	mov	r2, r5
 800ea88:	4b0f      	ldr	r3, [pc, #60]	; (800eac8 <_svfiprintf_r+0x1f8>)
 800ea8a:	a904      	add	r1, sp, #16
 800ea8c:	4638      	mov	r0, r7
 800ea8e:	f7fb ff27 	bl	800a8e0 <_printf_float>
 800ea92:	1c42      	adds	r2, r0, #1
 800ea94:	4606      	mov	r6, r0
 800ea96:	d1d6      	bne.n	800ea46 <_svfiprintf_r+0x176>
 800ea98:	89ab      	ldrh	r3, [r5, #12]
 800ea9a:	065b      	lsls	r3, r3, #25
 800ea9c:	f53f af2c 	bmi.w	800e8f8 <_svfiprintf_r+0x28>
 800eaa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eaa2:	b01d      	add	sp, #116	; 0x74
 800eaa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaa8:	ab03      	add	r3, sp, #12
 800eaaa:	9300      	str	r3, [sp, #0]
 800eaac:	462a      	mov	r2, r5
 800eaae:	4b06      	ldr	r3, [pc, #24]	; (800eac8 <_svfiprintf_r+0x1f8>)
 800eab0:	a904      	add	r1, sp, #16
 800eab2:	4638      	mov	r0, r7
 800eab4:	f7fc f9b8 	bl	800ae28 <_printf_i>
 800eab8:	e7eb      	b.n	800ea92 <_svfiprintf_r+0x1c2>
 800eaba:	bf00      	nop
 800eabc:	0800f63c 	.word	0x0800f63c
 800eac0:	0800f646 	.word	0x0800f646
 800eac4:	0800a8e1 	.word	0x0800a8e1
 800eac8:	0800e819 	.word	0x0800e819
 800eacc:	0800f642 	.word	0x0800f642

0800ead0 <__sfputc_r>:
 800ead0:	6893      	ldr	r3, [r2, #8]
 800ead2:	3b01      	subs	r3, #1
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	b410      	push	{r4}
 800ead8:	6093      	str	r3, [r2, #8]
 800eada:	da08      	bge.n	800eaee <__sfputc_r+0x1e>
 800eadc:	6994      	ldr	r4, [r2, #24]
 800eade:	42a3      	cmp	r3, r4
 800eae0:	db01      	blt.n	800eae6 <__sfputc_r+0x16>
 800eae2:	290a      	cmp	r1, #10
 800eae4:	d103      	bne.n	800eaee <__sfputc_r+0x1e>
 800eae6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eaea:	f7fd bc3b 	b.w	800c364 <__swbuf_r>
 800eaee:	6813      	ldr	r3, [r2, #0]
 800eaf0:	1c58      	adds	r0, r3, #1
 800eaf2:	6010      	str	r0, [r2, #0]
 800eaf4:	7019      	strb	r1, [r3, #0]
 800eaf6:	4608      	mov	r0, r1
 800eaf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eafc:	4770      	bx	lr

0800eafe <__sfputs_r>:
 800eafe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb00:	4606      	mov	r6, r0
 800eb02:	460f      	mov	r7, r1
 800eb04:	4614      	mov	r4, r2
 800eb06:	18d5      	adds	r5, r2, r3
 800eb08:	42ac      	cmp	r4, r5
 800eb0a:	d101      	bne.n	800eb10 <__sfputs_r+0x12>
 800eb0c:	2000      	movs	r0, #0
 800eb0e:	e007      	b.n	800eb20 <__sfputs_r+0x22>
 800eb10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb14:	463a      	mov	r2, r7
 800eb16:	4630      	mov	r0, r6
 800eb18:	f7ff ffda 	bl	800ead0 <__sfputc_r>
 800eb1c:	1c43      	adds	r3, r0, #1
 800eb1e:	d1f3      	bne.n	800eb08 <__sfputs_r+0xa>
 800eb20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eb24 <_vfiprintf_r>:
 800eb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb28:	460d      	mov	r5, r1
 800eb2a:	b09d      	sub	sp, #116	; 0x74
 800eb2c:	4614      	mov	r4, r2
 800eb2e:	4698      	mov	r8, r3
 800eb30:	4606      	mov	r6, r0
 800eb32:	b118      	cbz	r0, 800eb3c <_vfiprintf_r+0x18>
 800eb34:	6983      	ldr	r3, [r0, #24]
 800eb36:	b90b      	cbnz	r3, 800eb3c <_vfiprintf_r+0x18>
 800eb38:	f7fe fc68 	bl	800d40c <__sinit>
 800eb3c:	4b89      	ldr	r3, [pc, #548]	; (800ed64 <_vfiprintf_r+0x240>)
 800eb3e:	429d      	cmp	r5, r3
 800eb40:	d11b      	bne.n	800eb7a <_vfiprintf_r+0x56>
 800eb42:	6875      	ldr	r5, [r6, #4]
 800eb44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb46:	07d9      	lsls	r1, r3, #31
 800eb48:	d405      	bmi.n	800eb56 <_vfiprintf_r+0x32>
 800eb4a:	89ab      	ldrh	r3, [r5, #12]
 800eb4c:	059a      	lsls	r2, r3, #22
 800eb4e:	d402      	bmi.n	800eb56 <_vfiprintf_r+0x32>
 800eb50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb52:	f7ff f86c 	bl	800dc2e <__retarget_lock_acquire_recursive>
 800eb56:	89ab      	ldrh	r3, [r5, #12]
 800eb58:	071b      	lsls	r3, r3, #28
 800eb5a:	d501      	bpl.n	800eb60 <_vfiprintf_r+0x3c>
 800eb5c:	692b      	ldr	r3, [r5, #16]
 800eb5e:	b9eb      	cbnz	r3, 800eb9c <_vfiprintf_r+0x78>
 800eb60:	4629      	mov	r1, r5
 800eb62:	4630      	mov	r0, r6
 800eb64:	f7fd fc50 	bl	800c408 <__swsetup_r>
 800eb68:	b1c0      	cbz	r0, 800eb9c <_vfiprintf_r+0x78>
 800eb6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb6c:	07dc      	lsls	r4, r3, #31
 800eb6e:	d50e      	bpl.n	800eb8e <_vfiprintf_r+0x6a>
 800eb70:	f04f 30ff 	mov.w	r0, #4294967295
 800eb74:	b01d      	add	sp, #116	; 0x74
 800eb76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb7a:	4b7b      	ldr	r3, [pc, #492]	; (800ed68 <_vfiprintf_r+0x244>)
 800eb7c:	429d      	cmp	r5, r3
 800eb7e:	d101      	bne.n	800eb84 <_vfiprintf_r+0x60>
 800eb80:	68b5      	ldr	r5, [r6, #8]
 800eb82:	e7df      	b.n	800eb44 <_vfiprintf_r+0x20>
 800eb84:	4b79      	ldr	r3, [pc, #484]	; (800ed6c <_vfiprintf_r+0x248>)
 800eb86:	429d      	cmp	r5, r3
 800eb88:	bf08      	it	eq
 800eb8a:	68f5      	ldreq	r5, [r6, #12]
 800eb8c:	e7da      	b.n	800eb44 <_vfiprintf_r+0x20>
 800eb8e:	89ab      	ldrh	r3, [r5, #12]
 800eb90:	0598      	lsls	r0, r3, #22
 800eb92:	d4ed      	bmi.n	800eb70 <_vfiprintf_r+0x4c>
 800eb94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb96:	f7ff f84b 	bl	800dc30 <__retarget_lock_release_recursive>
 800eb9a:	e7e9      	b.n	800eb70 <_vfiprintf_r+0x4c>
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	9309      	str	r3, [sp, #36]	; 0x24
 800eba0:	2320      	movs	r3, #32
 800eba2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eba6:	f8cd 800c 	str.w	r8, [sp, #12]
 800ebaa:	2330      	movs	r3, #48	; 0x30
 800ebac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ed70 <_vfiprintf_r+0x24c>
 800ebb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ebb4:	f04f 0901 	mov.w	r9, #1
 800ebb8:	4623      	mov	r3, r4
 800ebba:	469a      	mov	sl, r3
 800ebbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebc0:	b10a      	cbz	r2, 800ebc6 <_vfiprintf_r+0xa2>
 800ebc2:	2a25      	cmp	r2, #37	; 0x25
 800ebc4:	d1f9      	bne.n	800ebba <_vfiprintf_r+0x96>
 800ebc6:	ebba 0b04 	subs.w	fp, sl, r4
 800ebca:	d00b      	beq.n	800ebe4 <_vfiprintf_r+0xc0>
 800ebcc:	465b      	mov	r3, fp
 800ebce:	4622      	mov	r2, r4
 800ebd0:	4629      	mov	r1, r5
 800ebd2:	4630      	mov	r0, r6
 800ebd4:	f7ff ff93 	bl	800eafe <__sfputs_r>
 800ebd8:	3001      	adds	r0, #1
 800ebda:	f000 80aa 	beq.w	800ed32 <_vfiprintf_r+0x20e>
 800ebde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebe0:	445a      	add	r2, fp
 800ebe2:	9209      	str	r2, [sp, #36]	; 0x24
 800ebe4:	f89a 3000 	ldrb.w	r3, [sl]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	f000 80a2 	beq.w	800ed32 <_vfiprintf_r+0x20e>
 800ebee:	2300      	movs	r3, #0
 800ebf0:	f04f 32ff 	mov.w	r2, #4294967295
 800ebf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ebf8:	f10a 0a01 	add.w	sl, sl, #1
 800ebfc:	9304      	str	r3, [sp, #16]
 800ebfe:	9307      	str	r3, [sp, #28]
 800ec00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec04:	931a      	str	r3, [sp, #104]	; 0x68
 800ec06:	4654      	mov	r4, sl
 800ec08:	2205      	movs	r2, #5
 800ec0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec0e:	4858      	ldr	r0, [pc, #352]	; (800ed70 <_vfiprintf_r+0x24c>)
 800ec10:	f7f1 fae6 	bl	80001e0 <memchr>
 800ec14:	9a04      	ldr	r2, [sp, #16]
 800ec16:	b9d8      	cbnz	r0, 800ec50 <_vfiprintf_r+0x12c>
 800ec18:	06d1      	lsls	r1, r2, #27
 800ec1a:	bf44      	itt	mi
 800ec1c:	2320      	movmi	r3, #32
 800ec1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec22:	0713      	lsls	r3, r2, #28
 800ec24:	bf44      	itt	mi
 800ec26:	232b      	movmi	r3, #43	; 0x2b
 800ec28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec2c:	f89a 3000 	ldrb.w	r3, [sl]
 800ec30:	2b2a      	cmp	r3, #42	; 0x2a
 800ec32:	d015      	beq.n	800ec60 <_vfiprintf_r+0x13c>
 800ec34:	9a07      	ldr	r2, [sp, #28]
 800ec36:	4654      	mov	r4, sl
 800ec38:	2000      	movs	r0, #0
 800ec3a:	f04f 0c0a 	mov.w	ip, #10
 800ec3e:	4621      	mov	r1, r4
 800ec40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec44:	3b30      	subs	r3, #48	; 0x30
 800ec46:	2b09      	cmp	r3, #9
 800ec48:	d94e      	bls.n	800ece8 <_vfiprintf_r+0x1c4>
 800ec4a:	b1b0      	cbz	r0, 800ec7a <_vfiprintf_r+0x156>
 800ec4c:	9207      	str	r2, [sp, #28]
 800ec4e:	e014      	b.n	800ec7a <_vfiprintf_r+0x156>
 800ec50:	eba0 0308 	sub.w	r3, r0, r8
 800ec54:	fa09 f303 	lsl.w	r3, r9, r3
 800ec58:	4313      	orrs	r3, r2
 800ec5a:	9304      	str	r3, [sp, #16]
 800ec5c:	46a2      	mov	sl, r4
 800ec5e:	e7d2      	b.n	800ec06 <_vfiprintf_r+0xe2>
 800ec60:	9b03      	ldr	r3, [sp, #12]
 800ec62:	1d19      	adds	r1, r3, #4
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	9103      	str	r1, [sp, #12]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	bfbb      	ittet	lt
 800ec6c:	425b      	neglt	r3, r3
 800ec6e:	f042 0202 	orrlt.w	r2, r2, #2
 800ec72:	9307      	strge	r3, [sp, #28]
 800ec74:	9307      	strlt	r3, [sp, #28]
 800ec76:	bfb8      	it	lt
 800ec78:	9204      	strlt	r2, [sp, #16]
 800ec7a:	7823      	ldrb	r3, [r4, #0]
 800ec7c:	2b2e      	cmp	r3, #46	; 0x2e
 800ec7e:	d10c      	bne.n	800ec9a <_vfiprintf_r+0x176>
 800ec80:	7863      	ldrb	r3, [r4, #1]
 800ec82:	2b2a      	cmp	r3, #42	; 0x2a
 800ec84:	d135      	bne.n	800ecf2 <_vfiprintf_r+0x1ce>
 800ec86:	9b03      	ldr	r3, [sp, #12]
 800ec88:	1d1a      	adds	r2, r3, #4
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	9203      	str	r2, [sp, #12]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	bfb8      	it	lt
 800ec92:	f04f 33ff 	movlt.w	r3, #4294967295
 800ec96:	3402      	adds	r4, #2
 800ec98:	9305      	str	r3, [sp, #20]
 800ec9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ed80 <_vfiprintf_r+0x25c>
 800ec9e:	7821      	ldrb	r1, [r4, #0]
 800eca0:	2203      	movs	r2, #3
 800eca2:	4650      	mov	r0, sl
 800eca4:	f7f1 fa9c 	bl	80001e0 <memchr>
 800eca8:	b140      	cbz	r0, 800ecbc <_vfiprintf_r+0x198>
 800ecaa:	2340      	movs	r3, #64	; 0x40
 800ecac:	eba0 000a 	sub.w	r0, r0, sl
 800ecb0:	fa03 f000 	lsl.w	r0, r3, r0
 800ecb4:	9b04      	ldr	r3, [sp, #16]
 800ecb6:	4303      	orrs	r3, r0
 800ecb8:	3401      	adds	r4, #1
 800ecba:	9304      	str	r3, [sp, #16]
 800ecbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecc0:	482c      	ldr	r0, [pc, #176]	; (800ed74 <_vfiprintf_r+0x250>)
 800ecc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ecc6:	2206      	movs	r2, #6
 800ecc8:	f7f1 fa8a 	bl	80001e0 <memchr>
 800eccc:	2800      	cmp	r0, #0
 800ecce:	d03f      	beq.n	800ed50 <_vfiprintf_r+0x22c>
 800ecd0:	4b29      	ldr	r3, [pc, #164]	; (800ed78 <_vfiprintf_r+0x254>)
 800ecd2:	bb1b      	cbnz	r3, 800ed1c <_vfiprintf_r+0x1f8>
 800ecd4:	9b03      	ldr	r3, [sp, #12]
 800ecd6:	3307      	adds	r3, #7
 800ecd8:	f023 0307 	bic.w	r3, r3, #7
 800ecdc:	3308      	adds	r3, #8
 800ecde:	9303      	str	r3, [sp, #12]
 800ece0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ece2:	443b      	add	r3, r7
 800ece4:	9309      	str	r3, [sp, #36]	; 0x24
 800ece6:	e767      	b.n	800ebb8 <_vfiprintf_r+0x94>
 800ece8:	fb0c 3202 	mla	r2, ip, r2, r3
 800ecec:	460c      	mov	r4, r1
 800ecee:	2001      	movs	r0, #1
 800ecf0:	e7a5      	b.n	800ec3e <_vfiprintf_r+0x11a>
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	3401      	adds	r4, #1
 800ecf6:	9305      	str	r3, [sp, #20]
 800ecf8:	4619      	mov	r1, r3
 800ecfa:	f04f 0c0a 	mov.w	ip, #10
 800ecfe:	4620      	mov	r0, r4
 800ed00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed04:	3a30      	subs	r2, #48	; 0x30
 800ed06:	2a09      	cmp	r2, #9
 800ed08:	d903      	bls.n	800ed12 <_vfiprintf_r+0x1ee>
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d0c5      	beq.n	800ec9a <_vfiprintf_r+0x176>
 800ed0e:	9105      	str	r1, [sp, #20]
 800ed10:	e7c3      	b.n	800ec9a <_vfiprintf_r+0x176>
 800ed12:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed16:	4604      	mov	r4, r0
 800ed18:	2301      	movs	r3, #1
 800ed1a:	e7f0      	b.n	800ecfe <_vfiprintf_r+0x1da>
 800ed1c:	ab03      	add	r3, sp, #12
 800ed1e:	9300      	str	r3, [sp, #0]
 800ed20:	462a      	mov	r2, r5
 800ed22:	4b16      	ldr	r3, [pc, #88]	; (800ed7c <_vfiprintf_r+0x258>)
 800ed24:	a904      	add	r1, sp, #16
 800ed26:	4630      	mov	r0, r6
 800ed28:	f7fb fdda 	bl	800a8e0 <_printf_float>
 800ed2c:	4607      	mov	r7, r0
 800ed2e:	1c78      	adds	r0, r7, #1
 800ed30:	d1d6      	bne.n	800ece0 <_vfiprintf_r+0x1bc>
 800ed32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed34:	07d9      	lsls	r1, r3, #31
 800ed36:	d405      	bmi.n	800ed44 <_vfiprintf_r+0x220>
 800ed38:	89ab      	ldrh	r3, [r5, #12]
 800ed3a:	059a      	lsls	r2, r3, #22
 800ed3c:	d402      	bmi.n	800ed44 <_vfiprintf_r+0x220>
 800ed3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed40:	f7fe ff76 	bl	800dc30 <__retarget_lock_release_recursive>
 800ed44:	89ab      	ldrh	r3, [r5, #12]
 800ed46:	065b      	lsls	r3, r3, #25
 800ed48:	f53f af12 	bmi.w	800eb70 <_vfiprintf_r+0x4c>
 800ed4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed4e:	e711      	b.n	800eb74 <_vfiprintf_r+0x50>
 800ed50:	ab03      	add	r3, sp, #12
 800ed52:	9300      	str	r3, [sp, #0]
 800ed54:	462a      	mov	r2, r5
 800ed56:	4b09      	ldr	r3, [pc, #36]	; (800ed7c <_vfiprintf_r+0x258>)
 800ed58:	a904      	add	r1, sp, #16
 800ed5a:	4630      	mov	r0, r6
 800ed5c:	f7fc f864 	bl	800ae28 <_printf_i>
 800ed60:	e7e4      	b.n	800ed2c <_vfiprintf_r+0x208>
 800ed62:	bf00      	nop
 800ed64:	0800f420 	.word	0x0800f420
 800ed68:	0800f440 	.word	0x0800f440
 800ed6c:	0800f400 	.word	0x0800f400
 800ed70:	0800f63c 	.word	0x0800f63c
 800ed74:	0800f646 	.word	0x0800f646
 800ed78:	0800a8e1 	.word	0x0800a8e1
 800ed7c:	0800eaff 	.word	0x0800eaff
 800ed80:	0800f642 	.word	0x0800f642
 800ed84:	00000000 	.word	0x00000000

0800ed88 <nan>:
 800ed88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ed90 <nan+0x8>
 800ed8c:	4770      	bx	lr
 800ed8e:	bf00      	nop
 800ed90:	00000000 	.word	0x00000000
 800ed94:	7ff80000 	.word	0x7ff80000

0800ed98 <_sbrk_r>:
 800ed98:	b538      	push	{r3, r4, r5, lr}
 800ed9a:	4d06      	ldr	r5, [pc, #24]	; (800edb4 <_sbrk_r+0x1c>)
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	4604      	mov	r4, r0
 800eda0:	4608      	mov	r0, r1
 800eda2:	602b      	str	r3, [r5, #0]
 800eda4:	f7f2 fcc2 	bl	800172c <_sbrk>
 800eda8:	1c43      	adds	r3, r0, #1
 800edaa:	d102      	bne.n	800edb2 <_sbrk_r+0x1a>
 800edac:	682b      	ldr	r3, [r5, #0]
 800edae:	b103      	cbz	r3, 800edb2 <_sbrk_r+0x1a>
 800edb0:	6023      	str	r3, [r4, #0]
 800edb2:	bd38      	pop	{r3, r4, r5, pc}
 800edb4:	200007d8 	.word	0x200007d8

0800edb8 <__sread>:
 800edb8:	b510      	push	{r4, lr}
 800edba:	460c      	mov	r4, r1
 800edbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edc0:	f000 f92e 	bl	800f020 <_read_r>
 800edc4:	2800      	cmp	r0, #0
 800edc6:	bfab      	itete	ge
 800edc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800edca:	89a3      	ldrhlt	r3, [r4, #12]
 800edcc:	181b      	addge	r3, r3, r0
 800edce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800edd2:	bfac      	ite	ge
 800edd4:	6563      	strge	r3, [r4, #84]	; 0x54
 800edd6:	81a3      	strhlt	r3, [r4, #12]
 800edd8:	bd10      	pop	{r4, pc}

0800edda <__swrite>:
 800edda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edde:	461f      	mov	r7, r3
 800ede0:	898b      	ldrh	r3, [r1, #12]
 800ede2:	05db      	lsls	r3, r3, #23
 800ede4:	4605      	mov	r5, r0
 800ede6:	460c      	mov	r4, r1
 800ede8:	4616      	mov	r6, r2
 800edea:	d505      	bpl.n	800edf8 <__swrite+0x1e>
 800edec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edf0:	2302      	movs	r3, #2
 800edf2:	2200      	movs	r2, #0
 800edf4:	f000 f8b6 	bl	800ef64 <_lseek_r>
 800edf8:	89a3      	ldrh	r3, [r4, #12]
 800edfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800edfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ee02:	81a3      	strh	r3, [r4, #12]
 800ee04:	4632      	mov	r2, r6
 800ee06:	463b      	mov	r3, r7
 800ee08:	4628      	mov	r0, r5
 800ee0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee0e:	f000 b835 	b.w	800ee7c <_write_r>

0800ee12 <__sseek>:
 800ee12:	b510      	push	{r4, lr}
 800ee14:	460c      	mov	r4, r1
 800ee16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee1a:	f000 f8a3 	bl	800ef64 <_lseek_r>
 800ee1e:	1c43      	adds	r3, r0, #1
 800ee20:	89a3      	ldrh	r3, [r4, #12]
 800ee22:	bf15      	itete	ne
 800ee24:	6560      	strne	r0, [r4, #84]	; 0x54
 800ee26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ee2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ee2e:	81a3      	strheq	r3, [r4, #12]
 800ee30:	bf18      	it	ne
 800ee32:	81a3      	strhne	r3, [r4, #12]
 800ee34:	bd10      	pop	{r4, pc}

0800ee36 <__sclose>:
 800ee36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee3a:	f000 b84f 	b.w	800eedc <_close_r>

0800ee3e <strncmp>:
 800ee3e:	b510      	push	{r4, lr}
 800ee40:	b16a      	cbz	r2, 800ee5e <strncmp+0x20>
 800ee42:	3901      	subs	r1, #1
 800ee44:	1884      	adds	r4, r0, r2
 800ee46:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ee4a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d103      	bne.n	800ee5a <strncmp+0x1c>
 800ee52:	42a0      	cmp	r0, r4
 800ee54:	d001      	beq.n	800ee5a <strncmp+0x1c>
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d1f5      	bne.n	800ee46 <strncmp+0x8>
 800ee5a:	1a98      	subs	r0, r3, r2
 800ee5c:	bd10      	pop	{r4, pc}
 800ee5e:	4610      	mov	r0, r2
 800ee60:	e7fc      	b.n	800ee5c <strncmp+0x1e>

0800ee62 <__ascii_wctomb>:
 800ee62:	b149      	cbz	r1, 800ee78 <__ascii_wctomb+0x16>
 800ee64:	2aff      	cmp	r2, #255	; 0xff
 800ee66:	bf85      	ittet	hi
 800ee68:	238a      	movhi	r3, #138	; 0x8a
 800ee6a:	6003      	strhi	r3, [r0, #0]
 800ee6c:	700a      	strbls	r2, [r1, #0]
 800ee6e:	f04f 30ff 	movhi.w	r0, #4294967295
 800ee72:	bf98      	it	ls
 800ee74:	2001      	movls	r0, #1
 800ee76:	4770      	bx	lr
 800ee78:	4608      	mov	r0, r1
 800ee7a:	4770      	bx	lr

0800ee7c <_write_r>:
 800ee7c:	b538      	push	{r3, r4, r5, lr}
 800ee7e:	4d07      	ldr	r5, [pc, #28]	; (800ee9c <_write_r+0x20>)
 800ee80:	4604      	mov	r4, r0
 800ee82:	4608      	mov	r0, r1
 800ee84:	4611      	mov	r1, r2
 800ee86:	2200      	movs	r2, #0
 800ee88:	602a      	str	r2, [r5, #0]
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	f7f2 fed6 	bl	8001c3c <_write>
 800ee90:	1c43      	adds	r3, r0, #1
 800ee92:	d102      	bne.n	800ee9a <_write_r+0x1e>
 800ee94:	682b      	ldr	r3, [r5, #0]
 800ee96:	b103      	cbz	r3, 800ee9a <_write_r+0x1e>
 800ee98:	6023      	str	r3, [r4, #0]
 800ee9a:	bd38      	pop	{r3, r4, r5, pc}
 800ee9c:	200007d8 	.word	0x200007d8

0800eea0 <__assert_func>:
 800eea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eea2:	4614      	mov	r4, r2
 800eea4:	461a      	mov	r2, r3
 800eea6:	4b09      	ldr	r3, [pc, #36]	; (800eecc <__assert_func+0x2c>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	4605      	mov	r5, r0
 800eeac:	68d8      	ldr	r0, [r3, #12]
 800eeae:	b14c      	cbz	r4, 800eec4 <__assert_func+0x24>
 800eeb0:	4b07      	ldr	r3, [pc, #28]	; (800eed0 <__assert_func+0x30>)
 800eeb2:	9100      	str	r1, [sp, #0]
 800eeb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eeb8:	4906      	ldr	r1, [pc, #24]	; (800eed4 <__assert_func+0x34>)
 800eeba:	462b      	mov	r3, r5
 800eebc:	f000 f81e 	bl	800eefc <fiprintf>
 800eec0:	f000 f8c0 	bl	800f044 <abort>
 800eec4:	4b04      	ldr	r3, [pc, #16]	; (800eed8 <__assert_func+0x38>)
 800eec6:	461c      	mov	r4, r3
 800eec8:	e7f3      	b.n	800eeb2 <__assert_func+0x12>
 800eeca:	bf00      	nop
 800eecc:	20000034 	.word	0x20000034
 800eed0:	0800f64d 	.word	0x0800f64d
 800eed4:	0800f65a 	.word	0x0800f65a
 800eed8:	0800f688 	.word	0x0800f688

0800eedc <_close_r>:
 800eedc:	b538      	push	{r3, r4, r5, lr}
 800eede:	4d06      	ldr	r5, [pc, #24]	; (800eef8 <_close_r+0x1c>)
 800eee0:	2300      	movs	r3, #0
 800eee2:	4604      	mov	r4, r0
 800eee4:	4608      	mov	r0, r1
 800eee6:	602b      	str	r3, [r5, #0]
 800eee8:	f7f2 fbeb 	bl	80016c2 <_close>
 800eeec:	1c43      	adds	r3, r0, #1
 800eeee:	d102      	bne.n	800eef6 <_close_r+0x1a>
 800eef0:	682b      	ldr	r3, [r5, #0]
 800eef2:	b103      	cbz	r3, 800eef6 <_close_r+0x1a>
 800eef4:	6023      	str	r3, [r4, #0]
 800eef6:	bd38      	pop	{r3, r4, r5, pc}
 800eef8:	200007d8 	.word	0x200007d8

0800eefc <fiprintf>:
 800eefc:	b40e      	push	{r1, r2, r3}
 800eefe:	b503      	push	{r0, r1, lr}
 800ef00:	4601      	mov	r1, r0
 800ef02:	ab03      	add	r3, sp, #12
 800ef04:	4805      	ldr	r0, [pc, #20]	; (800ef1c <fiprintf+0x20>)
 800ef06:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef0a:	6800      	ldr	r0, [r0, #0]
 800ef0c:	9301      	str	r3, [sp, #4]
 800ef0e:	f7ff fe09 	bl	800eb24 <_vfiprintf_r>
 800ef12:	b002      	add	sp, #8
 800ef14:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef18:	b003      	add	sp, #12
 800ef1a:	4770      	bx	lr
 800ef1c:	20000034 	.word	0x20000034

0800ef20 <_fstat_r>:
 800ef20:	b538      	push	{r3, r4, r5, lr}
 800ef22:	4d07      	ldr	r5, [pc, #28]	; (800ef40 <_fstat_r+0x20>)
 800ef24:	2300      	movs	r3, #0
 800ef26:	4604      	mov	r4, r0
 800ef28:	4608      	mov	r0, r1
 800ef2a:	4611      	mov	r1, r2
 800ef2c:	602b      	str	r3, [r5, #0]
 800ef2e:	f7f2 fbd4 	bl	80016da <_fstat>
 800ef32:	1c43      	adds	r3, r0, #1
 800ef34:	d102      	bne.n	800ef3c <_fstat_r+0x1c>
 800ef36:	682b      	ldr	r3, [r5, #0]
 800ef38:	b103      	cbz	r3, 800ef3c <_fstat_r+0x1c>
 800ef3a:	6023      	str	r3, [r4, #0]
 800ef3c:	bd38      	pop	{r3, r4, r5, pc}
 800ef3e:	bf00      	nop
 800ef40:	200007d8 	.word	0x200007d8

0800ef44 <_isatty_r>:
 800ef44:	b538      	push	{r3, r4, r5, lr}
 800ef46:	4d06      	ldr	r5, [pc, #24]	; (800ef60 <_isatty_r+0x1c>)
 800ef48:	2300      	movs	r3, #0
 800ef4a:	4604      	mov	r4, r0
 800ef4c:	4608      	mov	r0, r1
 800ef4e:	602b      	str	r3, [r5, #0]
 800ef50:	f7f2 fbd3 	bl	80016fa <_isatty>
 800ef54:	1c43      	adds	r3, r0, #1
 800ef56:	d102      	bne.n	800ef5e <_isatty_r+0x1a>
 800ef58:	682b      	ldr	r3, [r5, #0]
 800ef5a:	b103      	cbz	r3, 800ef5e <_isatty_r+0x1a>
 800ef5c:	6023      	str	r3, [r4, #0]
 800ef5e:	bd38      	pop	{r3, r4, r5, pc}
 800ef60:	200007d8 	.word	0x200007d8

0800ef64 <_lseek_r>:
 800ef64:	b538      	push	{r3, r4, r5, lr}
 800ef66:	4d07      	ldr	r5, [pc, #28]	; (800ef84 <_lseek_r+0x20>)
 800ef68:	4604      	mov	r4, r0
 800ef6a:	4608      	mov	r0, r1
 800ef6c:	4611      	mov	r1, r2
 800ef6e:	2200      	movs	r2, #0
 800ef70:	602a      	str	r2, [r5, #0]
 800ef72:	461a      	mov	r2, r3
 800ef74:	f7f2 fbcc 	bl	8001710 <_lseek>
 800ef78:	1c43      	adds	r3, r0, #1
 800ef7a:	d102      	bne.n	800ef82 <_lseek_r+0x1e>
 800ef7c:	682b      	ldr	r3, [r5, #0]
 800ef7e:	b103      	cbz	r3, 800ef82 <_lseek_r+0x1e>
 800ef80:	6023      	str	r3, [r4, #0]
 800ef82:	bd38      	pop	{r3, r4, r5, pc}
 800ef84:	200007d8 	.word	0x200007d8

0800ef88 <memmove>:
 800ef88:	4288      	cmp	r0, r1
 800ef8a:	b510      	push	{r4, lr}
 800ef8c:	eb01 0402 	add.w	r4, r1, r2
 800ef90:	d902      	bls.n	800ef98 <memmove+0x10>
 800ef92:	4284      	cmp	r4, r0
 800ef94:	4623      	mov	r3, r4
 800ef96:	d807      	bhi.n	800efa8 <memmove+0x20>
 800ef98:	1e43      	subs	r3, r0, #1
 800ef9a:	42a1      	cmp	r1, r4
 800ef9c:	d008      	beq.n	800efb0 <memmove+0x28>
 800ef9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800efa6:	e7f8      	b.n	800ef9a <memmove+0x12>
 800efa8:	4402      	add	r2, r0
 800efaa:	4601      	mov	r1, r0
 800efac:	428a      	cmp	r2, r1
 800efae:	d100      	bne.n	800efb2 <memmove+0x2a>
 800efb0:	bd10      	pop	{r4, pc}
 800efb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800efb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800efba:	e7f7      	b.n	800efac <memmove+0x24>

0800efbc <__malloc_lock>:
 800efbc:	4801      	ldr	r0, [pc, #4]	; (800efc4 <__malloc_lock+0x8>)
 800efbe:	f7fe be36 	b.w	800dc2e <__retarget_lock_acquire_recursive>
 800efc2:	bf00      	nop
 800efc4:	200007d0 	.word	0x200007d0

0800efc8 <__malloc_unlock>:
 800efc8:	4801      	ldr	r0, [pc, #4]	; (800efd0 <__malloc_unlock+0x8>)
 800efca:	f7fe be31 	b.w	800dc30 <__retarget_lock_release_recursive>
 800efce:	bf00      	nop
 800efd0:	200007d0 	.word	0x200007d0

0800efd4 <_realloc_r>:
 800efd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efd6:	4607      	mov	r7, r0
 800efd8:	4614      	mov	r4, r2
 800efda:	460e      	mov	r6, r1
 800efdc:	b921      	cbnz	r1, 800efe8 <_realloc_r+0x14>
 800efde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800efe2:	4611      	mov	r1, r2
 800efe4:	f7ff bbbe 	b.w	800e764 <_malloc_r>
 800efe8:	b922      	cbnz	r2, 800eff4 <_realloc_r+0x20>
 800efea:	f7ff fb6b 	bl	800e6c4 <_free_r>
 800efee:	4625      	mov	r5, r4
 800eff0:	4628      	mov	r0, r5
 800eff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eff4:	f000 f82d 	bl	800f052 <_malloc_usable_size_r>
 800eff8:	42a0      	cmp	r0, r4
 800effa:	d20f      	bcs.n	800f01c <_realloc_r+0x48>
 800effc:	4621      	mov	r1, r4
 800effe:	4638      	mov	r0, r7
 800f000:	f7ff fbb0 	bl	800e764 <_malloc_r>
 800f004:	4605      	mov	r5, r0
 800f006:	2800      	cmp	r0, #0
 800f008:	d0f2      	beq.n	800eff0 <_realloc_r+0x1c>
 800f00a:	4631      	mov	r1, r6
 800f00c:	4622      	mov	r2, r4
 800f00e:	f7fb fbb1 	bl	800a774 <memcpy>
 800f012:	4631      	mov	r1, r6
 800f014:	4638      	mov	r0, r7
 800f016:	f7ff fb55 	bl	800e6c4 <_free_r>
 800f01a:	e7e9      	b.n	800eff0 <_realloc_r+0x1c>
 800f01c:	4635      	mov	r5, r6
 800f01e:	e7e7      	b.n	800eff0 <_realloc_r+0x1c>

0800f020 <_read_r>:
 800f020:	b538      	push	{r3, r4, r5, lr}
 800f022:	4d07      	ldr	r5, [pc, #28]	; (800f040 <_read_r+0x20>)
 800f024:	4604      	mov	r4, r0
 800f026:	4608      	mov	r0, r1
 800f028:	4611      	mov	r1, r2
 800f02a:	2200      	movs	r2, #0
 800f02c:	602a      	str	r2, [r5, #0]
 800f02e:	461a      	mov	r2, r3
 800f030:	f7f2 fb2a 	bl	8001688 <_read>
 800f034:	1c43      	adds	r3, r0, #1
 800f036:	d102      	bne.n	800f03e <_read_r+0x1e>
 800f038:	682b      	ldr	r3, [r5, #0]
 800f03a:	b103      	cbz	r3, 800f03e <_read_r+0x1e>
 800f03c:	6023      	str	r3, [r4, #0]
 800f03e:	bd38      	pop	{r3, r4, r5, pc}
 800f040:	200007d8 	.word	0x200007d8

0800f044 <abort>:
 800f044:	b508      	push	{r3, lr}
 800f046:	2006      	movs	r0, #6
 800f048:	f000 f834 	bl	800f0b4 <raise>
 800f04c:	2001      	movs	r0, #1
 800f04e:	f7f2 fb11 	bl	8001674 <_exit>

0800f052 <_malloc_usable_size_r>:
 800f052:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f056:	1f18      	subs	r0, r3, #4
 800f058:	2b00      	cmp	r3, #0
 800f05a:	bfbc      	itt	lt
 800f05c:	580b      	ldrlt	r3, [r1, r0]
 800f05e:	18c0      	addlt	r0, r0, r3
 800f060:	4770      	bx	lr

0800f062 <_raise_r>:
 800f062:	291f      	cmp	r1, #31
 800f064:	b538      	push	{r3, r4, r5, lr}
 800f066:	4604      	mov	r4, r0
 800f068:	460d      	mov	r5, r1
 800f06a:	d904      	bls.n	800f076 <_raise_r+0x14>
 800f06c:	2316      	movs	r3, #22
 800f06e:	6003      	str	r3, [r0, #0]
 800f070:	f04f 30ff 	mov.w	r0, #4294967295
 800f074:	bd38      	pop	{r3, r4, r5, pc}
 800f076:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f078:	b112      	cbz	r2, 800f080 <_raise_r+0x1e>
 800f07a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f07e:	b94b      	cbnz	r3, 800f094 <_raise_r+0x32>
 800f080:	4620      	mov	r0, r4
 800f082:	f000 f831 	bl	800f0e8 <_getpid_r>
 800f086:	462a      	mov	r2, r5
 800f088:	4601      	mov	r1, r0
 800f08a:	4620      	mov	r0, r4
 800f08c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f090:	f000 b818 	b.w	800f0c4 <_kill_r>
 800f094:	2b01      	cmp	r3, #1
 800f096:	d00a      	beq.n	800f0ae <_raise_r+0x4c>
 800f098:	1c59      	adds	r1, r3, #1
 800f09a:	d103      	bne.n	800f0a4 <_raise_r+0x42>
 800f09c:	2316      	movs	r3, #22
 800f09e:	6003      	str	r3, [r0, #0]
 800f0a0:	2001      	movs	r0, #1
 800f0a2:	e7e7      	b.n	800f074 <_raise_r+0x12>
 800f0a4:	2400      	movs	r4, #0
 800f0a6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f0aa:	4628      	mov	r0, r5
 800f0ac:	4798      	blx	r3
 800f0ae:	2000      	movs	r0, #0
 800f0b0:	e7e0      	b.n	800f074 <_raise_r+0x12>
	...

0800f0b4 <raise>:
 800f0b4:	4b02      	ldr	r3, [pc, #8]	; (800f0c0 <raise+0xc>)
 800f0b6:	4601      	mov	r1, r0
 800f0b8:	6818      	ldr	r0, [r3, #0]
 800f0ba:	f7ff bfd2 	b.w	800f062 <_raise_r>
 800f0be:	bf00      	nop
 800f0c0:	20000034 	.word	0x20000034

0800f0c4 <_kill_r>:
 800f0c4:	b538      	push	{r3, r4, r5, lr}
 800f0c6:	4d07      	ldr	r5, [pc, #28]	; (800f0e4 <_kill_r+0x20>)
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	4604      	mov	r4, r0
 800f0cc:	4608      	mov	r0, r1
 800f0ce:	4611      	mov	r1, r2
 800f0d0:	602b      	str	r3, [r5, #0]
 800f0d2:	f7f2 fabf 	bl	8001654 <_kill>
 800f0d6:	1c43      	adds	r3, r0, #1
 800f0d8:	d102      	bne.n	800f0e0 <_kill_r+0x1c>
 800f0da:	682b      	ldr	r3, [r5, #0]
 800f0dc:	b103      	cbz	r3, 800f0e0 <_kill_r+0x1c>
 800f0de:	6023      	str	r3, [r4, #0]
 800f0e0:	bd38      	pop	{r3, r4, r5, pc}
 800f0e2:	bf00      	nop
 800f0e4:	200007d8 	.word	0x200007d8

0800f0e8 <_getpid_r>:
 800f0e8:	f7f2 baac 	b.w	8001644 <_getpid>

0800f0ec <_init>:
 800f0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ee:	bf00      	nop
 800f0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0f2:	bc08      	pop	{r3}
 800f0f4:	469e      	mov	lr, r3
 800f0f6:	4770      	bx	lr

0800f0f8 <_fini>:
 800f0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0fa:	bf00      	nop
 800f0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0fe:	bc08      	pop	{r3}
 800f100:	469e      	mov	lr, r3
 800f102:	4770      	bx	lr
